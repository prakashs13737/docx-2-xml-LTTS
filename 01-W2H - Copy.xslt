<!-- THIS XSLT is used for RUTA process conversion ONLY. DONT use this XSLT for Pagemajik general DOCX to XHTML conversion -->

<!-- Last update 24-JUNE-19: due to test issue not corrected 'pY' to 'p' -->
<!-- Last update 03-APR-19: Footnote/endnote tagging and its links, standalized to match with ck xhtml output, due to common update -->
<!-- Last update 09-JAN-19 for duplicate bookmark tag from Prasanth-->
<!-- Last update 03-JAN-19 -->
  <!-- message deleted, un-commented style definition and list code modified for "start" attribute -->
  <!-- 03-JAN-19 -->
<!-- Last update 03-JAN-19 -->
<!-- Last update 16-AUG-18 -->
<!-- Last update 07-MAY-19 -->
<!-- Last update 18-JUNE-19 for missing INDent info for normal paragraph style LISTS -->
<!DOCTYPE xsl:stylesheet [
<!ENTITY tablelabel "w:p[w:pPr/w:pStyle[@w:val='TN']]">
<!ENTITY tabletitle "w:p[w:pPr/w:pStyle[@w:val='TableCaption']]">
<!ENTITY tfootnote "w:p[w:pPr/w:pStyle[@w:val='TableSource']]">
<!ENTITY tfootnote2 "w:p[w:pPr/w:pStyle[@w:val='TableFootnote']]">
<!ENTITY tfootnote3 "w:tblPr/w:tblW/@w:w div 20">
]>
<!-- 08-10-15: for pubmed file i commented on line 482, please check for quick find, FIND the below line -->
<!-- @@@make sure it is necessary comment -->
<!-- "meta" parent of "title" commented to avoid PAGINA epub checker -->
<!-- element P deleted for <IMG> -->
<!-- <xsl:element name="br"/> commented inside colgroup -->
<!-- 23-06-16 Content Controls Added Santhanam-->
<!-- 24-sep-16 Tab issue in word. chk mail from Prasanth on "Mon 10/24/2016 12:10 PM"-"Input file for test"-->
<!-- 25-sep-16 Soft hyphen added. chk mail from Santhanam on "Tue 10/25/2016 4:03 PM"-"Softhypen"-->
<!-- 14-dec-16: i've changed "w:rPr/w:rFonts/@w:ascii" to "w:rPr/w:rFonts/@w:cs" refer below 2 lines-->
              <!--<xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                  <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>-->

<!-- 27-dec-16: reverted the above
<xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>-->
<!--<xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>-->
<!-- Defining CSS Styles -->

<!-- $$$$$$$$$$$$$$$$$$$$ END of 14-11-15 corrections $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$-->
<!-- 19-Jan-2017: bookmark commented and changed to suffic X inside all the P and LI, Table tags -->

<!-- 12-Apr-17: to find 2 digit list search "@@@@@" --> 
<!-- to find footnote tagging: @@@FOOTNOTE $$$$-->
<!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor -->
<!-- 26-apr-17: to check for 1.1,1.1.1 for Elsevier title-->
<!-- 28-04-17: NEW LIST LOGIC -->
<!-- 29-Apr-17: For *********************** KLI NUMP **************************************************************************** NUMP paragraphs and Citations -->
<!-- 28-04-17: NEW LIST LOGIC based on Review docx --> 
<!-- 19-july-17 added all theme fonts -->
<!-- Commented on 29-july-17; to give any type of BL list symbol; for sample i left here, remaining i relpace with new style attibute -->
<!-- 04-OCT-17; given line break after </table> -->
<!-- &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& Footnotes-Endnotes-Comments &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&-->
<!-- 20-JAN-18, as Sindhu's requirement I've commented -->
<!-- 06-feb-18, commented xsl:if test="w:pPr/w:pBdr, then correct it -->
<!-- 16-Mar-18: To hide list numbers/bullets-->
<!-- For Table Ruler style="border-bottom:1px solid black"--><!-- 25-Apr-18 -->
<!-- Reading borders from w:tc --><!-- 25-Apr-18 -->
<!-- for row bgcolor, if it was set as TABLE themes --><!-- 26-Apr-18 -->
<!-- For Table Ruler style="border-bottom:1px solid black"--><!--13-May-18-->
<!-- for row bgcolor, if it was set as TABLE themes -->  
<!-- 13-May-18: Added  LANG attribute -->
<!-- 22-JUNE-18: Added instruction taken from https://www.w3schools.com/tags/tag_meta.asp -->
<!-- DO NOT REMOVE THIS LINE. THIS IS FOR RUTA -->
<!-- 21-JULY-18: Removed the custom css code for custom lists, due to issue in RUTA process -->
<!-- 16-AUG-18: Added rules to avoid "style=" style=&#34;font-size" issue -->
<!-- 27-08-18: LIST in styles -->

<!-- 19-oct-18: If list changed to number to TEXT -->
<!-- 03-APR-19: Footnote/endnote tagging and its links, standalized to match with ck xhtml output, due to common update -->


<!-- 06-May-19: Getting original style name from STYLE.xml due to issue in Cicerone docx -->

<!--<xsl:attribute name="data-name" select="$paragraphStyleName"/>--><!-- 7-May-19 -->
<!--Updated for "w:u" contain no value means remove that 17-7-2019-->
<!--Removed ckeditor/images/comment.svg for suguna (image count problem)30-7-2019-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:v="urn:schemas-microsoft-com:vml"
  xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships"
  xmlns:wp="http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing"
  xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"
  xmlns:pic="http://schemas.openxmlformats.org/drawingml/2006/picture"
  xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main"
  xmlns:o="urn:schemas-microsoft-com:office:office"
  xmlns="http://schemas.openxmlformats.org/package/2006/relationships"
  xmlns:sw8="http://schemas.openxmlformats.org/package/2006/relationships"
  xmlns:rels="http://schemas.openxmlformats.org/package/2006/relationships"
  xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:my-scripts="urn:my-scripts"
  exclude-result-prefixes="#all" version="2.0">

  <!-- xmlns="http://www.w3.org/1999/xhtml"-->
  <!--<xsl:output method="html" use-character-maps="Ascii2Unicode" doctype-system="html"/>-->
  <xsl:output indent="no" method="xml" omit-xml-declaration="yes"/>
  <!-- <xsl:output indent="no" method="xml" omit-xml-declaration="yes"/> -->
  <xsl:include href="OMML2MML.XSL"/>
  <!--<xsl:include href="//s4csrvin001/automation/WORD2XML/W2HTMLsanthanam/MML2OMML.XSL"/>-->
  <xsl:strip-space elements="*"/>
  <xsl:preserve-space elements="w:t"/>

  <xsl:param name="myNameSpace" select="'http://www.w3.org/1999/xhtml'"/>

  <!-- Global Vaiable -->
  <!--<w:footnoteReference w:customMarkFollows="1" w:id="1"/>-->
  <xsl:variable name="custFootnote">
    <xsl:value-of select="count(//w:footnoteReference/@w:customMarkFollows)"/>
  </xsl:variable>
  <xsl:variable name="custEndnote">
    <xsl:value-of select="count(//w:endnoteReference/@w:customMarkFollows)"/>
  </xsl:variable>

  <xsl:template match="/">

    <xsl:element name="html">

      <xsl:element name="head">

        <!-- 22-JUNE-18: Added instruction taken from https://www.w3schools.com/tags/tag_meta.asp -->
        <xsl:text disable-output-escaping="yes">&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"/&gt;</xsl:text>
        <xsl:element name="style">
          <xsl:text disable-output-escaping="yes">&lt;!--</xsl:text>
          <xsl:text disable-output-escaping="yes"> /* Style Definitions */</xsl:text>
          <!-- DO NOT REMOVE THIS LINE. THIS IS FOR RUTA -->
          <xsl:text disable-output-escaping="yes"> p.MsoNormal, li.MsoNormal, div.MsoNormal {</xsl:text>
          <!--<xsl:text disable-output-escaping="yes">	{margin-top:0in;</xsl:text>
          <xsl:text disable-output-escaping="yes">	margin-right:0in;</xsl:text>
          <xsl:text disable-output-escaping="yes">	margin-bottom:10.0pt;</xsl:text>
          <xsl:text disable-output-escaping="yes">	margin-left:0in;</xsl:text>-->
          <xsl:text disable-output-escaping="yes">	line-height:115%;</xsl:text>
          <!-- margin -->
          <xsl:choose>
            <xsl:when test="//w:style[@w:styleId = 'Normal']/w:pPr/w:spacing">
              <xsl:variable name="bSapce"
                select="//w:style[@w:styleId = 'Normal']/w:pPr/w:spacing/@w:before"/>
              <xsl:variable name="aSapce"
                select="//w:style[@w:styleId = 'Normal']/w:pPr/w:spacing/@w:after"/>
              <xsl:variable name="lineSpace"
                select="//w:style[@w:styleId = 'Normal']/w:pPr/w:spacing/@w:line"/>
              <xsl:variable name="textAlign"
                select="//w:style[@w:styleId = 'Normal']/w:pPr/w:jc/@w:val"/>

              <xsl:choose>
                <xsl:when test="not(//w:style[@w:styleId = 'Normal']/w:pPr/w:spacing/@w:before)"> </xsl:when>
                <xsl:otherwise>
                  <xsl:if test="not($bSapce = 0)">
                    <xsl:if test="string-length($bSapce) > 0">
                      <xsl:text>margin-top:</xsl:text>
                      <xsl:value-of select="$bSapce div 20"/>
                      <xsl:text>pt;</xsl:text>
                    </xsl:if>
                  </xsl:if>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:choose>
                <xsl:when test="not(//w:style[@w:styleId = 'Normal']/w:pPr/w:spacing/@w:after)"> </xsl:when>
                <xsl:otherwise>
                  <xsl:if test="not($aSapce = 0)">
                    <xsl:if test="string-length($aSapce) > 0">
                      <xsl:text>margin-bottom:</xsl:text>
                      <xsl:value-of select="$aSapce div 20"/>
                      <xsl:text>pt;</xsl:text>
                    </xsl:if>
                  </xsl:if>
                </xsl:otherwise>
              </xsl:choose>
              <!-- Margin left-right -->
              <xsl:choose>
                <xsl:when test="//w:style[@w:styleId = 'Normal']/w:pPr/w:ind">

                  <xsl:if test="//w:style[@w:styleId = 'Normal']/w:pPr/w:ind/@w:left">
                    <xsl:text>margin-left:</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                    <xsl:text>pt;</xsl:text>

                  </xsl:if>
                  <xsl:if test="w:pPr/w:ind/@w:right">
                    <xsl:text>margin-right:</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                    <xsl:text>pt;</xsl:text>

                  </xsl:if>
                  <!--<xsl:if test="not(w:pPr/w:ind/@w:left | w:pPr/w:ind/@w:right)">
                    <xsl:call-template name="margin-left-right"/>  
                  </xsl:if>-->
                </xsl:when>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:choose>
                <xsl:when test="//w:styles/w:docDefaults/w:pPr/w:spacing/@w:before">
                  <xsl:text>margin-top:</xsl:text>
                  <xsl:value-of select="//w:styles/w:docDefaults/w:pPr/w:spacing/@w:before div 20"/>
                  <xsl:text>pt;</xsl:text>
                </xsl:when>
                <xsl:when test="//w:styles/w:docDefaults/w:pPr/w:spacing/@w:after">
                  <xsl:text>margin-bottom:</xsl:text>
                  <xsl:value-of select="//w:styles/w:docDefaults/w:pPr/w:spacing/@w:after div 20"/>
                  <xsl:text>pt;</xsl:text>
                </xsl:when>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
          <!-- Color -->
          <xsl:choose>
            <xsl:when test="//w:style[@w:styleId = 'Normal']/w:rPr/w:color">
              <xsl:text disable-output-escaping="yes">	color:#000000;</xsl:text>
              <xsl:value-of select="//w:style[@w:styleId = 'Normal']/w:rPr/w:color/@w:asciiTheme"/>
              <xsl:value-of select="//w:style[@w:styleId = 'Normal']/w:rPr/w:color/@w:ascii"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text disable-output-escaping="yes">	color:#000000;</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
          <!-- Size -->
          <xsl:choose>
            <xsl:when test="//w:style[@w:styleId = 'Normal']/w:rPr/w:sz">

              <xsl:text>    font-size:</xsl:text>
              <xsl:variable name="fontSize"
                select="number(//w:style[@w:styleId = 'Normal']/w:rPr/w:sz/@w:val) div 2"/>
              <xsl:value-of select="$fontSize"/>
              <xsl:text>pt;</xsl:text>
            </xsl:when>
            <xsl:when
              test="//w:style[@w:styleId = 'Normal']/w:rPr/w:szCs and not(//w:style[@w:styleId = 'Normal']/w:rPr/w:sz)">

              <xsl:text>    font-size:</xsl:text>
              <xsl:variable name="fontSize"
                select="number(//w:style[@w:styleId = 'Normal']/w:rPr/w:szCs/@w:val) div 2"/>
              <xsl:value-of select="$fontSize"/>
              <xsl:text>pt;</xsl:text>
            </xsl:when>
            <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:sz">

              <xsl:text>font-size:</xsl:text>
              <xsl:variable name="fontSize"
                select="number(//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:sz/@w:val) div 2"/>
              <xsl:value-of select="$fontSize"/>
              <xsl:text>pt;</xsl:text>
            </xsl:when>
            <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:szCs">

              <xsl:text>	font-size:</xsl:text>
              <xsl:variable name="fontSize"
                select="number(//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:szCs/@w:val) div 2"/>
              <xsl:value-of select="$fontSize"/>
              <xsl:text>pt;</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="w:basedOn">
                <!--<xsl:call-template name="font-size"/>-->
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>

          <xsl:choose>
            <xsl:when test="./w:rPr/w:color">

              <xsl:text>color:#</xsl:text>
              <xsl:value-of select="./w:rPr/w:color/@w:val"/>
              <xsl:text>;</xsl:text>

            </xsl:when>
            <xsl:otherwise>
              <xsl:call-template name="color"/>
            </xsl:otherwise>
          </xsl:choose>

          <xsl:choose>
            <!-- Fontfamily -->
            <xsl:when test="//w:style[@w:styleId = 'Normal']/w:rPr/w:rFonts">

              <xsl:choose>
                <xsl:when test="./w:rPr/w:rFonts/@w:ascii">
                  <xsl:text>	font-family:"</xsl:text>
                  <xsl:value-of select="./w:rPr/w:rFonts/@w:ascii"/>
                </xsl:when>
                <xsl:when test="./w:rPr/w:rFonts/@w:eastAsia">
                  <xsl:text>	mso-fareast-font-family:"</xsl:text>
                  <xsl:value-of select="./w:rPr/w:rFonts/@w:eastAsia"/>
                </xsl:when>
                <xsl:when test="./w:rPr/w:rFonts/@w:cs">
                  <xsl:text>	mso-fareast-font-family:"</xsl:text>
                  <xsl:value-of select="./w:rPr/w:rFonts/@w:cs"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>	font-family:"</xsl:text>
                  <xsl:value-of select="'Times New Roman'"/>
                  <!-- 25-Jan-18; If only theme fonts available in the fontset and doc defaults i use 'Times New Roman' as a exception condition -->
                  <!-- Refered by Ashok and Charu (but no documentation available in the net)-->
                </xsl:otherwise>
              </xsl:choose>
              <xsl:text>", "sans-serif";</xsl:text>

            </xsl:when>
            <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts">

              <xsl:choose>
                <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                  <xsl:text>	font-family:"</xsl:text>
                  <xsl:value-of
                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"/>
                </xsl:when>
                <!-- 19-july-17 added all theme fonts -->
                <xsl:when
                  test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsiaTheme">
                  <xsl:text>	mso-fareast-font-family:"</xsl:text>
                  <xsl:value-of
                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsiaTheme"/>
                </xsl:when>
                <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:hAnsiTheme">
                  <xsl:text>	mso-fareast-font-family:"</xsl:text>
                  <xsl:value-of
                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:hAnsiTheme"/>
                </xsl:when>
                <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:cstheme">
                  <xsl:text>	mso-fareast-font-family:"</xsl:text>
                  <xsl:value-of
                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:cstheme"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>	mso-fareast-font-family:"</xsl:text>
                  <xsl:value-of
                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:asciiTheme"/>
                </xsl:otherwise>
              </xsl:choose>
              <xsl:text>", "sans-serif";</xsl:text>
            </xsl:when>
            <xsl:otherwise> </xsl:otherwise>
          </xsl:choose>
          <!--</xsl:if>-->
          <xsl:text disable-output-escaping="yes">}</xsl:text>

          <xsl:for-each select="//w:style">
            <xsl:variable name="a" select="translate(@w:styleId, ' /\[\]@#-', '')"/>
            <xsl:variable name="basedOn" select="w:basedOn/@w:val"/>
            <xsl:variable name="color" select="w:rPr/w:color/@w:val"/>

            <xsl:variable name="fontFamily">
              <xsl:choose>
                <xsl:when test="child::w:rPr/w:rFonts/@w:ascii">
                  <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                </xsl:when>
                <!-- 19-july-17 added all theme fonts -->
                <xsl:when test="child::w:rPr/w:rFonts/@w:eastAsiaTheme">
                  <xsl:value-of select="w:rPr/w:rFonts/@w:eastAsiaTheme"/>
                </xsl:when>
                <xsl:when test="child::w:rPr/w:rFonts/@w:hAnsiTheme">
                  <xsl:value-of select="w:rPr/w:rFonts/@w:hAnsiTheme"/>
                </xsl:when>
                <xsl:when test="child::w:rPr/w:rFonts/@w:cstheme">
                  <xsl:value-of select="w:rPr/w:rFonts/@w:cstheme"/>
                </xsl:when>
                <xsl:when test="child::w:rPr/w:rFonts/@w:cs">
                  <!-- Newly added on 29-Mar-18 -->
                  <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                </xsl:when>
                <xsl:when test="child::w:rPr/w:rFonts/@w:hAnsi">
                  <!-- Newly added on 29-Mar-18 -->
                  <xsl:value-of select="w:rPr/w:rFonts/@w:hAnsi"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="w:rPr/w:rFonts/@w:asciiTheme"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="textVarient" select="w:rPr/w:smallCaps/@w:val"/>
            <xsl:variable name="textTrans" select="w:rPr/w:caps/@w:val"/>
            <xsl:variable name="fontWeight" select="w:rPr/w:b/@w:val"/>
            <xsl:variable name="fontStyle" select="w:rPr/w:i/@w:val"/>
            <xsl:variable name="underline" select="w:rPr/w:u/@w:val"/>
            <xsl:variable name="baseline" select="w:rPr/w:vertAlign/@w:val"/>
            <xsl:variable name="bSapce" select="w:pPr/w:spacing/@w:before"/>
            <xsl:variable name="aSapce" select="w:pPr/w:spacing/@w:after"/>
            <xsl:variable name="lineSpace" select="w:pPr/w:spacing/@w:line"/>
            <xsl:variable name="textAlign" select="w:pPr/w:jc/@w:val"/>

            <xsl:choose>
              <xsl:when test="@w:type = 'character'">

                <xsl:text>span.</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <xsl:when test="$a = 'ListParagraph'">

                    <xsl:text>li.ListParagraph, p.</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>li.</xsl:text>
                    <xsl:value-of select="$a"/>
                    <xsl:text>, p.</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:value-of select="$a"/>
            <xsl:text>{</xsl:text>

            <xsl:text>mso-style-name:</xsl:text>
            <xsl:value-of select="$a"/>
            <xsl:text>;</xsl:text>

            <xsl:if test="$a = 'CommentReference'">

              <xsl:text>color: transparent;</xsl:text>
            </xsl:if>
            <xsl:if test="$a = 'CommentText'">

              <xsl:text>color: transparent;</xsl:text>
            </xsl:if>

            <!-- xsl:if test="./w:basedOn" -->
            <xsl:if test="./w:basedOn">
              <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
              <xsl:variable name="fontFamily" select="./w:rPr/w:rFonts/@w:ascii"/>
              <xsl:variable name="color" select="w:rPr/w:color/@w:val"/>


              <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
                <!--                  <xsl:if test="./@w:styleId = $basedOn">-->
                <xsl:if test="./w:rPr/w:color">
                  <xsl:variable name="color" select="w:rPr/w:color/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$color = 'auto'">
                      <!--<xsl:value-of select="'000000'"/>-->
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="not(./w:rPr/w:color)">
                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                        <xsl:value-of select="$color"/>
                        <xsl:text>;</xsl:text>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>

                </xsl:if>
                <xsl:if test="./w:rPr/w:smallCaps">
                  <xsl:choose>
                    <xsl:when test="./w:rPr/w:smallCaps/@w:val = '0'">
                      <xsl:if test="not(./w:rPr/w:smallCaps)">
                        <xsl:text>font-variant:normal !important;</xsl:text>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="not(./w:rPr/w:smallCaps)">
                        <xsl:text>font-variant:small-caps !important;</xsl:text>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>

                </xsl:if>
                <xsl:if test="./w:rPr/w:caps">
                  <xsl:choose>
                    <xsl:when test="w:rPr/w:caps/@w:val = '0'">
                      <xsl:if test="not(./w:rPr/w:caps)">
                        <xsl:text>text-transform:none;</xsl:text>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="not(./w:rPr/w:caps)">
                        <xsl:text>text-transform:uppercase;</xsl:text>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>

                </xsl:if>
                <xsl:if test="./w:rPr/w:b">
                  <xsl:choose>
                    <xsl:when test="./w:rPr/w:b/@w:val = '0'">
                      <xsl:if test="not(./w:rPr/w:b)">
                        <xsl:text>font-weight:normal;</xsl:text>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="not(./w:rPr/w:b)">
                        <xsl:text>font-weight:bold;</xsl:text>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>

                </xsl:if>
                <xsl:if test="./w:rPr/w:i">
                  <xsl:choose>
                    <xsl:when test="./w:rPr/w:i/@w:val = '0'">
                      <xsl:if test="not(./w:rPr/w:i)">
                        <xsl:text>font-style:normal;</xsl:text>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="not(./w:rPr/w:i)">
                        <xsl:text>font-style:italic;</xsl:text>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>

                </xsl:if>
                <xsl:if test="./w:rPr/w:u">
                  <xsl:choose>
                    <xsl:when test="w:rPr/w:u/@w:val = 'none'">
                      <xsl:if test="not(./w:rPr/w:u)">
                        <xsl:text>text-decoration:none;</xsl:text>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="not(./w:rPr/w:u)">
                        <xsl:text>text-decoration:underline;</xsl:text>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>

                </xsl:if>
                <xsl:if test="./w:rPr/w:vertAlign">
                  <xsl:choose>
                    <xsl:when test="./w:rPr/w:vertAlign/@w:val = 'subscript'">
                      <xsl:if test="not(./w:rPr/w:vertAlign)">
                        <xsl:text>vertical-align:sub;</xsl:text>
                      </xsl:if>
                    </xsl:when>
                    <xsl:when test="./w:rPr/w:vertAlign/@w:val = 'superscript'">
                      <xsl:if test="not(./w:rPr/w:vertAlign)">
                        <xsl:text>vertical-align:super;</xsl:text>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="not(./w:rPr/w:vertAlign)">
                        <xsl:text>vertical-align:baseline;</xsl:text>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>

                </xsl:if>
                <xsl:if test="./w:rPr/w:rFontsX">
                  <xsl:choose>
                    <xsl:when test="w:rPr/w:rFonts/@w:cs">
                      <xsl:if test="string-length($fontFamily) > 0">
                        <xsl:text>font-family:"</xsl:text>
                        <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                        <xsl:text>","serif";</xsl:text>
                      </xsl:if>
                    </xsl:when>
                    <xsl:when test="w:rPr/w:rFonts/@w:hAnsi">
                      <xsl:if test="string-length($fontFamily) > 0">
                        <xsl:text>font-family:"</xsl:text>
                        <xsl:value-of select="w:rPr/w:rFonts/@w:hAnsi"/>
                        <xsl:text>","serif";</xsl:text>
                      </xsl:if>
                    </xsl:when>
                    <xsl:when test="w:rPr/w:rFonts/@w:hAnsiTheme">
                      <xsl:variable name="themeFont" select="w:rPr/w:rFonts/@w:asciiTheme"/>
                      <xsl:text>font-family:"</xsl:text>
                      <xsl:choose>
                        <xsl:when test="contains($themeFont, 'major')">
                          <xsl:value-of select="//a:majorFont/a:latin/@typeface"/>
                        </xsl:when>
                        <xsl:when test="contains($themeFont, 'minor')">
                          <xsl:value-of select="//a:minorFont/a:latin/@typeface"/>
                        </xsl:when>
                      </xsl:choose>
                      <xsl:text>";</xsl:text>
                    </xsl:when>
                    <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                      <xsl:if test="string-length($fontFamily) > 0">
                        <xsl:text>font-family:"</xsl:text>
                        <!--<xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>-->
                        <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                        <xsl:text>","serif";</xsl:text>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <!-- FONT FAMILY -->
                        <xsl:when test="./w:basedOn">
                          <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
                            <!--                  <xsl:if test="./@w:styleId = $basedOn">-->
                            <xsl:choose>
                              <!-- FONT FAMILY -->
                              <xsl:when test="./w:rPr/w:rFonts/@w:ascii">
                                <xsl:choose>
                                  <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                                    <xsl:text>font-family:"</xsl:text>
                                    <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                                  </xsl:when>
                                  <xsl:when test="w:rPr/w:rFonts/@w:cs">
                                    <xsl:text>mso-fareast-font-family:"</xsl:text>
                                    <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <!--<xsl:call-template name="FName"/>-->
                                  </xsl:otherwise>
                                </xsl:choose>
                                <xsl:text>", "serif";</xsl:text>
                              </xsl:when>

                              <xsl:when
                                test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                                <xsl:text>font-family:"</xsl:text>
                                <xsl:value-of
                                  select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"/>
                                <xsl:text>";</xsl:text>
                              </xsl:when>
                              <xsl:when
                                test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                                <xsl:text>font-family:"</xsl:text>
                                <xsl:value-of
                                  select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>
                                <xsl:text>";</xsl:text>
                              </xsl:when>
                              <xsl:when
                                test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                                <xsl:text>font-family:"</xsl:text>
                                <xsl:value-of
                                  select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>
                                <xsl:text>";</xsl:text>
                              </xsl:when>
                            </xsl:choose>
                            <!--</xsl:if>-->
                          </xsl:for-each>
                        </xsl:when>
                        <xsl:when
                          test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                          <xsl:text>font-family:"</xsl:text>
                          <xsl:value-of
                            select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"/>
                          <xsl:text>";</xsl:text>
                        </xsl:when>
                        <xsl:when
                          test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                          <xsl:text>font-family:"</xsl:text>
                          <xsl:value-of
                            select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>
                          <xsl:text>";</xsl:text>
                        </xsl:when>
                        <xsl:when
                          test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:asciiTheme">
                          <xsl:variable name="themeFont"
                            select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:asciiTheme"/>
                          <xsl:text>font-family:"</xsl:text>
                          <xsl:choose>
                            <xsl:when test="contains($themeFont, 'major')">
                              <xsl:value-of select="//a:majorFont/a:latin/@typeface"/>
                            </xsl:when>
                            <xsl:when test="contains($themeFont, 'minor')">
                              <xsl:value-of select="//a:minorFont/a:latin/@typeface"/>
                            </xsl:when>
                          </xsl:choose>
                          <!--<xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>-->
                          <xsl:text>";</xsl:text>
                        </xsl:when>
                        <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:cs">
                          <xsl:text>mso-fareast-font-family:"</xsl:text>
                          <xsl:value-of
                            select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:cs"/>
                          <xsl:text>";</xsl:text>
                        </xsl:when>
                        <xsl:when
                          test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:hAnsi">
                          <xsl:text>font-family:"</xsl:text>
                          <xsl:value-of
                            select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:hAnsi"/>
                          <xsl:text>";</xsl:text>
                        </xsl:when>
                      </xsl:choose>
                      <!--</xsl:if>-->
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:if>
                <!--</xsl:if>-->
                <!--</xsl:if>-->
              </xsl:for-each>
            </xsl:if>
            <!-- BASED on END -->

            <!-- 1. Font Size -->
            <xsl:choose>
              <xsl:when test="w:rPr/w:sz">
                <xsl:text>font-size:</xsl:text>
                <xsl:value-of select="(w:rPr/w:sz[1]/@w:val) div 2"/>
                <xsl:text>pt;</xsl:text>
              </xsl:when>
              <xsl:when test="w:rPr/w:szCsX">
                <xsl:text>font-size:</xsl:text>
                <xsl:value-of select="w:rPr/w:szCs[1]/@w:val"/>
                <xsl:text>pt;</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <!-- Font SIZE taken from Default-->
                  <xsl:when test="./w:basedOn">
                    <xsl:for-each select="//w:style">
                      <!-- 222222222222 -->
                      <xsl:if test="@w:styleId = $basedOn">
                        <xsl:choose>
                          <!-- FONT FAMILY -->
                          <xsl:when test="./w:rPr/w:sz">
                            <xsl:text>font-size:</xsl:text>
                            <xsl:variable name="fontSize" select="number(./w:rPr/w:sz/@w:val) div 2"/>
                            <xsl:value-of select="$fontSize"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:when>
                          <xsl:when test="./w:basedOn">
                            <!-- //w:style/w:name[@w:val = $basedOn] -->
                            <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
                              <xsl:choose>
                                <xsl:when test="./w:rPr/w:sz">
                                  <xsl:text>font-size:</xsl:text>
                                  <xsl:variable name="fontSize"
                                    select="number(./w:rPr/w:sz/@w:val) div 2"/>
                                  <xsl:value-of select="$fontSize"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:call-template name="font-size"/>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--</xsl:if>-->
                            </xsl:for-each>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>font-size:</xsl:text>
                            <xsl:variable name="fontSize"
                              select="number(//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:sz/@w:val) div 2"/>
                            <xsl:value-of select="$fontSize"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                      <!-- 2222222222 -->
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:when test="./w:rPr/w:sz">
                    <xsl:text>font-size:</xsl:text>
                    <xsl:variable name="fontSize" select="number(./w:rPr/w:sz/@w:val) div 2"/>
                    <xsl:value-of select="$fontSize"/>
                    <xsl:text>pt;</xsl:text>
                  </xsl:when>

                  <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:sz">
                    <xsl:text>font-size:</xsl:text>
                    <xsl:variable name="fontSize"
                      select="number(//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:sz/@w:val) div 2"/>
                    <xsl:value-of select="$fontSize"/>
                    <xsl:text>pt;</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>font-size:</xsl:text>
                    <xsl:value-of select="'11'"/>
                    <xsl:text>pt;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
                <!--</xsl:if>-->
              </xsl:otherwise>
            </xsl:choose>

            <!-- 2. Font Family -->
            <xsl:choose>
              <xsl:when test="./w:rPr/w:rFonts/@w:ascii">

                <xsl:if test="string-length($fontFamily) > 0">
                  <xsl:text>font-family:"</xsl:text>
                  <!--<xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>-->
                  <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                  <xsl:text>","serif";</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="./w:rPr/w:rFonts/@w:hAnsi">

                <xsl:if test="string-length($fontFamily) > 0">
                  <xsl:text>font-family:"</xsl:text>
                  <!--<xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>-->
                  <xsl:value-of select="w:rPr/w:rFonts/@w:hAnsi"/>
                  <xsl:text>","serif";</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="./w:rPr/w:rFonts/@w:csDEL">

                <xsl:if test="string-length($fontFamily) > 0">
                  <xsl:text>mso-fareast-font-family:"</xsl:text>
                  <!--<xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>-->
                  <xsl:value-of select="./w:rPr/w:rFonts/@w:cs"/>
                  <xsl:text>","serif";</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="./w:rPr/w:rFonts/@w:hAnsiTheme">
                <xsl:variable name="themeFont" select="w:rPr/w:rFonts/@w:hAnsiTheme"/>
                <xsl:if test="string-length($fontFamily) > 0">
                  <xsl:text>mso-fareast-font-family:"</xsl:text>
                  <xsl:choose>
                    <xsl:when test="contains($themeFont, 'major')">
                      <xsl:if test="not(//a:majorFont/a:latin/@typeface)">
                        <xsl:value-of
                          select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii | //w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:asciiTheme"
                        />
                      </xsl:if>
                      <xsl:value-of select="//a:majorFont/a:latin/@typeface"/>
                    </xsl:when>
                    <xsl:when test="contains($themeFont, 'minor')">
                      <xsl:if test="not(//a:majorFont/a:latin/@typeface)">
                        <xsl:value-of
                          select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii | //w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:asciiTheme"
                        />
                      </xsl:if>
                      <xsl:value-of select="//a:minorFont/a:latin/@typeface"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of
                        select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii | //w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:asciiTheme"
                      />
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:text>";</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:otherwise>

                <!--<xsl:if test="not(./w:basedOn)">-->
                <xsl:choose>
                  <!-- FONT FAMILY -->
                  <xsl:when test="./w:basedOn">
                    <xsl:for-each select="//w:style">
                      <!--xsl:if test="./w:name/@w:val = $basedOn"-->
                      <xsl:if test="@w:styleId = $basedOn">
                        <xsl:choose>
                          <!-- FONT FAMILY -->
                          <xsl:when test="./w:rPr/w:rFonts/@w:ascii">
                            <xsl:choose>
                              <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                                <xsl:text>font-family:"</xsl:text>
                                <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                              </xsl:when>
                              <xsl:when test="w:rPr/w:rFonts/@w:cs">
                                <xsl:text>mso-fareast-font-family:"</xsl:text>
                                <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:call-template name="FName"/>
                              </xsl:otherwise>
                            </xsl:choose>
                            <xsl:text>", "serif";</xsl:text>
                          </xsl:when>
                          <xsl:when test="./w:basedOn">
                            <!-- //w:style/w:name[@w:val = $basedOn] -->
                            <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
                              <xsl:choose>
                                <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                                  <xsl:text>font-family:"</xsl:text>
                                  <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                                  <xsl:text>", "serif";</xsl:text>
                                </xsl:when>
                                <xsl:when test="w:rPr/w:rFonts/@w:cs">
                                  <xsl:text>mso-fareast-font-family:"</xsl:text>
                                  <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                                  <xsl:text>", "serif";</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:call-template name="font-family"/>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--</xsl:if>-->
                            </xsl:for-each>
                          </xsl:when>
                          <xsl:when
                            test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                            <xsl:text>font-family:"</xsl:text>
                            <xsl:value-of
                              select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"/>
                            <xsl:text>";</xsl:text>
                          </xsl:when>
                          <xsl:when
                            test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:cs">
                            <xsl:text>mso-fareast-font-family:"</xsl:text>
                            <xsl:value-of
                              select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:cs"/>
                            <xsl:text>";</xsl:text>
                          </xsl:when>
                          <xsl:when
                            test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:hAnsi">
                            <xsl:text>font-family:"</xsl:text>
                            <xsl:value-of
                              select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:hAnsi"/>
                            <xsl:text>";</xsl:text>
                          </xsl:when>

                          <xsl:when
                            test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                            <xsl:text>mso-fareast-font-family:"</xsl:text>
                            <xsl:value-of
                              select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>
                            <xsl:text>";</xsl:text>
                          </xsl:when>
                        </xsl:choose>
                      </xsl:if>
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                    <xsl:text>font-family:"</xsl:text>
                    <xsl:value-of
                      select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"/>
                    <xsl:text>";</xsl:text>
                  </xsl:when>
                  <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                    <xsl:text>mso-fareast-font-family:"</xsl:text>
                    <xsl:value-of
                      select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>
                    <xsl:text>";</xsl:text>
                  </xsl:when>
                  <xsl:when
                    test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:asciiTheme">
                    <xsl:variable name="themeFont"
                      select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:asciiTheme"/>
                    <xsl:text>font-family:"</xsl:text>
                    <xsl:choose>
                      <xsl:when test="contains($themeFont, 'major')">
                        <xsl:value-of select="//a:majorFont/a:latin/@typeface"/>
                      </xsl:when>
                      <xsl:when test="contains($themeFont, 'minor')">
                        <xsl:value-of select="//a:minorFont/a:latin/@typeface"/>
                      </xsl:when>
                    </xsl:choose>
                    <!--<xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>-->
                    <xsl:text>";</xsl:text>
                  </xsl:when>
                  <xsl:when
                    test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsiaTheme">
                    <xsl:variable name="themeFont"
                      select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsiaTheme"/>
                    <xsl:text>mso-fareast-font-family:"</xsl:text>
                    <xsl:choose>
                      <xsl:when test="contains($themeFont, 'major')">
                        <xsl:value-of select="//a:majorFont/a:latin/@typeface"/>
                      </xsl:when>
                      <xsl:when test="contains($themeFont, 'minor')">
                        <xsl:value-of select="//a:minorFont/a:latin/@typeface"/>
                      </xsl:when>
                    </xsl:choose>
                    <!--<xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>-->
                    <xsl:text>";</xsl:text>
                  </xsl:when>
                  <xsl:when
                    test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:hAnsiTheme">
                    <xsl:variable name="themeFont"
                      select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:hAnsiTheme"/>
                    <xsl:text>font-family:"</xsl:text>
                    <xsl:choose>
                      <xsl:when test="contains($themeFont, 'major')">
                        <xsl:value-of select="//a:majorFont/a:latin/@typeface"/>
                      </xsl:when>
                      <xsl:when test="contains($themeFont, 'minor')">
                        <xsl:value-of select="//a:minorFont/a:latin/@typeface"/>
                      </xsl:when>
                    </xsl:choose>
                    <!--<xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>-->
                    <xsl:text>";</xsl:text>
                  </xsl:when>
                  <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:cstheme">
                    <xsl:variable name="themeFont"
                      select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:cstheme"/>
                    <xsl:text>mso-fareast-font-family:"</xsl:text>
                    <xsl:choose>
                      <xsl:when test="contains($themeFont, 'major')">
                        <xsl:value-of select="//a:majorFont/a:latin/@typeface"/>
                      </xsl:when>
                      <xsl:when test="contains($themeFont, 'minor')">
                        <xsl:value-of select="//a:minorFont/a:latin/@typeface"/>
                      </xsl:when>
                    </xsl:choose>
                    <!--<xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>-->
                    <xsl:text>";</xsl:text>
                  </xsl:when>

                  <xsl:otherwise>
                    <xsl:variable name="themeFont">
                      <xsl:choose>
                        <xsl:when
                          test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:asciiTheme">
                          <xsl:value-of
                            select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:asciiTheme"
                          />
                        </xsl:when>
                        <xsl:when
                          test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsiaTheme">
                          <xsl:value-of
                            select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsiaTheme"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:text>font-family:"</xsl:text>
                    <xsl:choose>
                      <xsl:when test="contains($themeFont, 'major')">
                        <xsl:value-of select="//a:majorFont/a:latin/@typeface"/>
                      </xsl:when>
                      <xsl:when test="contains($themeFont, 'minor')">
                        <xsl:value-of select="//a:minorFont/a:latin/@typeface"/>
                      </xsl:when>
                    </xsl:choose>
                    <!--<xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>-->
                    <xsl:text>";</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
                <!--</xsl:if>-->
              </xsl:otherwise>
            </xsl:choose>

            <!-- 3. font-variant -->
            <xsl:choose>
              <xsl:when test="w:rPr/w:smallCaps">

                <xsl:choose>
                  <xsl:when test="$textVarient = '0'">
                    <xsl:text>font-variant:normal !important;</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>font-variant:small-caps !important;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>

              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="not(w:basedOn)">
                  <xsl:call-template name="font-variant"/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>

            <!-- 4. text-transform -->
            <xsl:choose>
              <xsl:when test="w:rPr/w:caps">

                <xsl:choose>
                  <xsl:when test="$textTrans = '0'">
                    <xsl:text>text-transform:none;</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>text-transform:uppercase;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>

              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="not(w:basedOn)">
                  <xsl:call-template name="text-transform"/>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>

            <!-- 5. color -->
            <xsl:choose>
              <xsl:when test="w:rPr/w:color">

                <xsl:choose>
                  <xsl:when test="$color = 'auto'">
                    <!--<xsl:value-of select="'000000'"/>-->
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                    <xsl:value-of select="$color"/>
                  </xsl:otherwise>
                </xsl:choose>
                <!--<xsl:text>color:#</xsl:text>                      
                      <xsl:value-of select="./w:rPr/w:color/@w:val"/>-->
                <xsl:text>;</xsl:text>

              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="color"/>
              </xsl:otherwise>
            </xsl:choose>

            <!-- 7. font-weight -->
            <xsl:choose>
              <xsl:when test="w:rPr/w:b">

                <xsl:choose>
                  <xsl:when test="$fontWeight = 'false'">
                    <xsl:text>font-weight:normal;</xsl:text>
                  </xsl:when>
                  <!-- condition added by hari                 -->
                  <xsl:when test="$fontWeight = '0'">
                    <xsl:text>font-weight:normal;</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>font-weight:bold;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>

              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="font-weight"/>
              </xsl:otherwise>
            </xsl:choose>

            <!-- 8. font-style -->
            <xsl:choose>
              <xsl:when test="w:rPr/w:i">

                <xsl:choose>
                  <xsl:when test="$fontWeight = 'false'">
                    <xsl:text>font-weight:normal;</xsl:text>
                  </xsl:when>
                  <!-- condition added by hari                 -->
                  <xsl:when test="$fontStyle = '0'">
                    <xsl:text>font-style:normal;</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>font-style:italic;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>

              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="font-style"/>
              </xsl:otherwise>
            </xsl:choose>

            <!-- 9. text decoration -->
            <xsl:choose>
              <xsl:when test="w:rPr/w:u">

                <xsl:choose>
                  <xsl:when test="$underline = 'none'">
                    <xsl:text>text-decoration:none;</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>

                    <xsl:text>text-decoration:underline;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>

              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="text-decoration"/>
              </xsl:otherwise>
            </xsl:choose>

            <!-- 10. vertical-align -->
            <xsl:choose>
              <xsl:when test="w:rPr/w:vertAlign">

                <xsl:choose>
                  <xsl:when test="$baseline = 'subscript'">
                    <xsl:text>vertical-align:sub;</xsl:text>
                  </xsl:when>
                  <xsl:when test="$baseline = 'superscript'">
                    <xsl:text>vertical-align:super;</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>vertical-align:baseline;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>

              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="vertical-align"/>
              </xsl:otherwise>
            </xsl:choose>

            <!-- 11. margin -->
            <xsl:choose>
              <xsl:when test="w:pPr/w:spacing">

                <xsl:choose>
                  <xsl:when test="not(w:pPr/w:spacing/@w:before)"> </xsl:when>
                  <xsl:otherwise>
                    <xsl:if test="not($bSapce = 0)">
                      <xsl:if test="string-length($bSapce) > 0">
                        <xsl:text>margin-top:</xsl:text>
                        <xsl:value-of select="$bSapce div 20"/>
                        <!-- <xsl:value-of select="number($bSapce) div 20"/> -->
                        <xsl:text>pt;</xsl:text>
                      </xsl:if>
                    </xsl:if>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:choose>
                  <xsl:when test="not(w:pPr/w:spacing/@w:after)"> </xsl:when>
                  <xsl:otherwise>
                    <xsl:if test="not($aSapce = 0)">
                      <xsl:if test="string-length($aSapce) > 0">
                        <xsl:text>margin-bottom:</xsl:text>
                        <xsl:value-of select="$aSapce div 20"/>
                        <xsl:text>pt;</xsl:text>
                      </xsl:if>
                    </xsl:if>
                  </xsl:otherwise>
                </xsl:choose>

                <!-- Margin left-right -->
                <xsl:choose>
                  <xsl:when test="w:pPr/w:ind">

                    <xsl:if test="w:pPr/w:ind/@w:left">
                      <xsl:text>margin-left:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                      <xsl:text>pt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:pPr/w:ind/@w:right">
                      <xsl:text>margin-right:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                      <xsl:text>pt;</xsl:text>

                    </xsl:if>
                    <xsl:if test="not(w:pPr/w:ind/@w:left and w:pPr/w:ind/@w:right)">
                      <xsl:call-template name="margin-left-right"/>
                    </xsl:if>
                  </xsl:when>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>

                <xsl:call-template name="margin"/>
              </xsl:otherwise>
            </xsl:choose>


            <!--  12. Text align -->
            <xsl:choose>
              <xsl:when test="w:pPr/w:jc">

                <xsl:text>text-align:</xsl:text>
                <xsl:choose>
                  <xsl:when test="$textAlign = 'both'">
                    <xsl:text>justify</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$textAlign"/>
                  </xsl:otherwise>
                </xsl:choose>
                <!--<xsl:value-of select="$textAlign"/>-->
                <xsl:text>;</xsl:text>

              </xsl:when>
              <xsl:otherwise> </xsl:otherwise>
            </xsl:choose>


            <!--  13. Indent -->
            <xsl:choose>
              <xsl:when test="w:pPr/w:ind">

                <xsl:if
                  test="not(w:pPr/w:ind/@w:firstLine | w:pPr/w:ind/@w:hanging | w:pPr/w:ind/@w:left)">
                  <xsl:choose>
                    <xsl:when test="./w:basedOn">
                      <xsl:for-each select="//w:style">
                        <xsl:if test="./w:name/@w:val = $basedOn">
                          <xsl:if
                            test="w:pPr/w:ind/@w:firstLine and not(w:pPr/w:ind/@w:firstLine = 0)">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="w:pPr/w:ind/@w:firstLine div 20"/>
                            <xsl:text>pt;</xsl:text>

                          </xsl:if>
                          <xsl:if test="w:pPr/w:ind/@w:hanging and not(w:pPr/w:ind/@w:hanging = 0)">
                            <xsl:text>padding-left:</xsl:text>
                            <xsl:value-of select="w:pPr/w:ind/@w:hanging div 20"/>
                            <xsl:text>pt;</xsl:text>

                          </xsl:if>
                          <xsl:if test="w:pPr/w:ind/@w:left and not(w:pPr/w:ind/@w:left = 0)">
                            <xsl:text>margin-left:</xsl:text>
                            <xsl:value-of select="w:pPr/w:ind/@w:left div 20"/>
                            <xsl:text>pt;</xsl:text>

                          </xsl:if>
                          <xsl:if test="./w:basedOn">
                            <xsl:call-template name="margin-left-right"/>
                          </xsl:if>
                        </xsl:if>
                      </xsl:for-each>
                    </xsl:when>
                  </xsl:choose>
                </xsl:if>
                <xsl:if test="w:pPr/w:ind/@w:firstLine and not(w:pPr/w:ind/@w:firstLine = 0)">
                  <xsl:text>text-indent:</xsl:text>
                  <xsl:value-of select="w:pPr/w:ind/@w:firstLine div 20"/>
                  <xsl:text>pt;</xsl:text>

                </xsl:if>
                <xsl:if test="w:pPr/w:ind/@w:hanging and not(w:pPr/w:ind/@w:hanging = 0)">
                  <xsl:text>padding-left:</xsl:text>
                  <xsl:value-of select="w:pPr/w:ind/@w:hanging div 20"/>
                  <xsl:text>pt;</xsl:text>

                </xsl:if>
                <!--<xsl:if test="w:pPr/w:ind/@w:left and not(w:pPr/w:ind/@w:left = 0)">
                  <xsl:text>margin-leftZ:</xsl:text>
                  <xsl:value-of select="w:pPr/w:ind/@w:left div 20"/>        
                  <xsl:text>pt;</xsl:text>
                  
                </xsl:if> -->
                <xsl:choose>
                  <xsl:when test="w:pPr/w:ind">
                    <xsl:if test="w:pPr/w:ind/@w:left">
                      <xsl:text>margin-left:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                      <xsl:text>pt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:pPr/w:ind/@w:right">
                      <xsl:text>margin-right:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                      <xsl:text>pt;</xsl:text>

                    </xsl:if>
                    <xsl:if test="not(w:pPr/w:ind/@w:left and w:pPr/w:ind/@w:right)">
                      <xsl:call-template name="margin-left-right"/>
                    </xsl:if>
                  </xsl:when>
                </xsl:choose>
              </xsl:when>

              <xsl:otherwise>
                <xsl:call-template name="margin-left-right"/>
              </xsl:otherwise>
            </xsl:choose>

            <xsl:text>}</xsl:text>
          </xsl:for-each>
          <xsl:text disable-output-escaping="yes">a.action_link</xsl:text>
          <xsl:text disable-output-escaping="yes">{text-decoration: none;}</xsl:text>

          <!-- 03-May-17 added for list ) format -->
          <xsl:text disable-output-escaping="yes">ul.UL-UL {</xsl:text>
          <xsl:text disable-output-escaping="yes">counter-reset: list;</xsl:text>
          <xsl:text disable-output-escaping="yes">text-indent: -1.8em;</xsl:text>
          <xsl:text disable-output-escaping="yes">margin-left:0.15in;</xsl:text>
          <xsl:text disable-output-escaping="yes">font-size:10pt;</xsl:text>
          <xsl:text disable-output-escaping="yes">}</xsl:text>

          <!-- double underline -->
          <xsl:text disable-output-escaping="yes">span.DUnderline { text-decoration:underline;</xsl:text>
          <xsl:text disable-output-escaping="yes">border-bottom: 1px solid #000; }</xsl:text>

          <!-- double strike -->
          <xsl:text disable-output-escaping="yes">span.double-strike {</xsl:text>
          <xsl:text disable-output-escaping="yes">position: relative;</xsl:text>
          <xsl:text disable-output-escaping="yes">}</xsl:text>
          <xsl:text disable-output-escaping="yes">span.double-strike div.the-lines {</xsl:text>
          <xsl:text disable-output-escaping="yes">position: absolute;</xsl:text>
          <xsl:text disable-output-escaping="yes">top: 10px; /* Depends on the font size */</xsl:text>
          <xsl:text disable-output-escaping="yes">left: 0;</xsl:text>
          <xsl:text disable-output-escaping="yes">border-top: 3px double black;</xsl:text>
          <xsl:text disable-output-escaping="yes">width: 100%;</xsl:text>
          <xsl:text disable-output-escaping="yes">height: 100%;}</xsl:text>
          <!-- double underline -->
          <xsl:text disable-output-escaping="yes">span.DUnderline { text-decoration:underline;</xsl:text>
          <xsl:text disable-output-escaping="yes">border-bottom: 1px solid #000; }</xsl:text>
          <!-- double strike -->
          <xsl:text disable-output-escaping="yes">span.double-strike {</xsl:text>
          <xsl:text disable-output-escaping="yes">position: relative;</xsl:text>
          <xsl:text disable-output-escaping="yes">}</xsl:text>
          <xsl:text disable-output-escaping="yes">span.double-strike div.the-lines {</xsl:text>
          <xsl:text disable-output-escaping="yes">position: absolute;</xsl:text>
          <xsl:text disable-output-escaping="yes">top: 10px; /* Depends on the font size */</xsl:text>
          <xsl:text disable-output-escaping="yes">left: 0;</xsl:text>
          <xsl:text disable-output-escaping="yes">border-top: 3px double black;</xsl:text>
          <xsl:text disable-output-escaping="yes">width: 100%;</xsl:text>
          <xsl:text disable-output-escaping="yes">height: 100%;}</xsl:text>
          <!-- Added on 02-Sep-17, to remove default indents for OL and UL -->
          <xsl:text disable-output-escaping="yes">ul,ol{</xsl:text>
          <xsl:text disable-output-escaping="yes">padding-left:18px;</xsl:text>
          <xsl:text disable-output-escaping="yes">}</xsl:text>
          <!-- Added on 20-Sep-17, to preserve whitespace -->
          <xsl:text disable-output-escaping="yes">p, a, span, li { white-space: pre-wrap; }</xsl:text>
          <!-- Added on 20-Sep-17, to preserve whitespace -->
          <xsl:text disable-output-escaping="yes">body{</xsl:text>
          <xsl:text disable-output-escaping="yes">font-family: Arial;}</xsl:text>
          <!-- 16-Mar-18: To hide list numbers/bullets-->
          <xsl:text disable-output-escaping="yes">#RemoveListnumber {</xsl:text>
          <xsl:text disable-output-escaping="yes">list-style: none;</xsl:text>
          <xsl:text disable-output-escaping="yes">}</xsl:text>
          <!-- 03-May-17 END for list ) paranthesis -->
          <xsl:text disable-output-escaping="yes">--&gt;</xsl:text>
        </xsl:element>

        <!--<xsl:element name="meta">-->
        <!-- 14-11-15: commented to avoid PAGINA epub checker -->
        <xsl:element name="title">
          <!--<xsl:apply-templates select="w:document/w:body/child::w:p[w:pPr/w:pStyle/@w:val='ChapterTitle']/w:r
                |w:document/w:body/child::w:p[w:pPr/w:pStyle/@w:val='CT']/w:r"/> *****-->
          <xsl:apply-templates
            select="
              w:document/w:body/child::w:p[w:pPr/w:pStyle/@w:val = 'ChapterTitle']/w:r
              | w:document/w:body/child::w:p[w:pPr/w:pStyle/@w:val = 'CT']/w:r"
          />
        </xsl:element>
        <!--</xsl:element>-->
        <!-- END of META -->
      </xsl:element>

      <link src="./ckeditor.css"/>

      <xsl:element name="body">

        <xsl:element name="div">
          <xsl:attribute name="class" select="'WordSection1'"/>

          <xsl:apply-templates select="w:document"/>
        </xsl:element>

        <xsl:text disable-output-escaping="yes">&lt;hr align="left" size="1" width="33%"/&gt;</xsl:text>
        <!-- 30-mar-17 Footnotes -->
        <xsl:apply-templates select="//w:footnotes" mode="footnotes"/>
        <xsl:apply-templates select="//w:endnotes" mode="endnotes"/>
        <!-- 20-JAN-18, as Sindhu's requirement I've commented -->
        <!--<xsl:apply-templates select="//w:comments" mode="comments"/>-->

      </xsl:element>

    </xsl:element>
  </xsl:template>

  <xsl:template name="vertical-align">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
    <xsl:variable name="baseline" select="w:rPr/w:vertAlign/@w:val"/>
    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
      <xsl:choose>
        <xsl:when test="./w:rPr/w:vertAlign">

          <xsl:choose>
            <xsl:when test="./w:rPr/w:vertAlign/@w:val = 'subscript'">
              <xsl:text>vertical-align:sub;</xsl:text>
            </xsl:when>
            <xsl:when test="./w:rPr/w:vertAlign/@w:val = 'superscript'">
              <xsl:text>vertical-align:super;</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>vertical-align:baseline;</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="vertical-align"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>
  <xsl:template name="text-decoration">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>

    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
      <!--<xsl:if test="./@w:styleId = $basedOn">-->
      <xsl:choose>
        <xsl:when test="w:rPr/w:u">
          <xsl:choose>
            <xsl:when test="./w:rPr/w:u/@w:val = 'none'">
              <xsl:text>text-decoration:none;</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>text-decoration:underline;</xsl:text>
            </xsl:otherwise>
          </xsl:choose>

        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="text-decoration"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:if>-->
    </xsl:for-each>
  </xsl:template>
  <xsl:template name="font-style">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
    <!--<xsl:variable name="fontStyle" select="w:rPr/w:i/@w:val"/>-->
    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
      <!--      <xsl:if test="./@w:styleId = $basedOn">        -->
      <xsl:choose>
        <xsl:when test="w:rPr/w:i">


          <xsl:choose>
            <xsl:when test="./w:rPr/w:i/@w:val = '0'">
              <xsl:text>font-style:normal;</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>font-style:italic;</xsl:text>
            </xsl:otherwise>
          </xsl:choose>

        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="font-style"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:if>-->
    </xsl:for-each>
  </xsl:template>
  <xsl:template name="font-weight">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
      <xsl:choose>
        <xsl:when test="w:rPr/w:b">


          <xsl:choose>
            <xsl:when test="./w:rPr/w:b/@w:val = '0'">
              <xsl:if test="not(w:basedOn)">
                <xsl:text>font-weight:normal;</xsl:text>
              </xsl:if>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>font-weight:bold;</xsl:text>
            </xsl:otherwise>
          </xsl:choose>

        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="font-weight"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:if>-->
    </xsl:for-each>
  </xsl:template>
  <xsl:template name="color">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
    <xsl:variable name="color" select="w:rPr/w:color/@w:val"/>
    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
      <!--      <xsl:if test="./@w:styleId = $basedOn"> -->
      <xsl:variable name="color" select="w:rPr/w:color/@w:val"/>
      <xsl:choose>
        <xsl:when test="./w:rPr/w:color">

          <xsl:choose>
            <xsl:when test="$color = 'auto'">
              <!--<xsl:value-of select="'000000'"/>-->
            </xsl:when>
            <xsl:otherwise>
              <xsl:text disable-output-escaping="yes">color: #</xsl:text>
              <xsl:value-of select="$color"/>
              <!--<xsl:text disable-output-escaping="yes">color: #</xsl:text>
                <xsl:value-of select="$color"/>-->
              <xsl:text>;</xsl:text>
            </xsl:otherwise>
          </xsl:choose>

        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="color"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:if>-->
    </xsl:for-each>
  </xsl:template>
  <xsl:template name="text-transform">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
      <!--      <xsl:if test="./@w:styleId = $basedOn">-->
      <!--<xsl:variable name="textTrans" select="./w:rPr/w:caps/@w:val"/>-->
      <xsl:choose>
        <xsl:when test="./w:rPr/w:caps">

          <xsl:choose>
            <xsl:when test="./w:rPr/w:caps/@w:val = '0'">
              <xsl:text>text-transform:none;</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>text-transform:uppercase;</xsl:text>
            </xsl:otherwise>
          </xsl:choose>

        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="text-transform"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:if>-->
    </xsl:for-each>
  </xsl:template>
  <xsl:template name="font-variant">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
      <!--      <xsl:if test="./@w:styleId = $basedOn">-->
      <!--<xsl:variable name="textVarient" select="w:rPr/w:smallCaps/@w:val"/>-->
      <xsl:choose>
        <xsl:when test="./w:rPr/w:smallCaps">

          <xsl:choose>
            <xsl:when test="./w:rPr/w:smallCaps/@w:val = '0'">
              <xsl:text>font-variant:normal !important;</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>font-variant:small-caps !important;</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="font-variant"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:if>-->
    </xsl:for-each>
  </xsl:template>
  <xsl:template name="margin">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
    <xsl:variable name="bSapce" select="w:pPr/w:spacing/@w:before"/>
    <xsl:variable name="aSapce" select="w:pPr/w:spacing/@w:after"/>
    <xsl:variable name="lineSpace" select="w:pPr/w:spacing/@w:line"/>

    <!-- xsl:for-each select="//w:style/w:name[@w:val = $basedOn] -->
    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">

      <xsl:choose>
        <xsl:when test="w:pPr/w:spacing">
          <xsl:choose>
            <xsl:when test="not(w:pPr/w:spacing/@w:before)"> </xsl:when>
            <xsl:otherwise>
              <xsl:if test="string-length($bSapce) > 0">
                <xsl:text>margin-top:</xsl:text>
                <xsl:value-of select="$bSapce div 20"/>
                <xsl:text>pt;</xsl:text>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="not(w:pPr/w:spacing/@w:after)">
              <xsl:if test="string-length($bSapce) > 0">
                <xsl:text>margin-bottom:</xsl:text>
                <xsl:value-of select="$bSapce div 20"/>
                <xsl:text>pt;</xsl:text>
              </xsl:if>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="string-length($aSapce) > 0">
                <xsl:text>margin-bottom:</xsl:text>
                <xsl:value-of select="$aSapce div 20"/>
                <xsl:text>pt;</xsl:text>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>

        <xsl:otherwise>
          <xsl:call-template name="margin"/>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:choose>
        <xsl:when test="./w:pPr/w:ind">

          <xsl:if test="w:pPr/w:ind/@w:firstLine">
            <xsl:text>text-indent:</xsl:text>
            <xsl:value-of select="w:pPr/w:ind/@w:firstLine div 20"/>
            <xsl:text>pt;</xsl:text>

          </xsl:if>
          <xsl:if test="w:pPr/w:ind/@w:hanging">
            <!-- commented on 24-7-17, for hang align for Young feedback -->
            <!--<xsl:text>padding-left:</xsl:text>-->
            <xsl:text>text-indent:-</xsl:text>
            <xsl:value-of select="w:pPr/w:ind/@w:hanging div 20"/>
            <xsl:text>pt;</xsl:text>

          </xsl:if>
          <xsl:if test="w:pPr/w:ind/@w:left">
            <xsl:text>margin-left:</xsl:text>
            <xsl:value-of select="w:pPr/w:ind/@w:left div 20"/>
            <xsl:text>pt;</xsl:text>

          </xsl:if>
          <xsl:if test="not(w:pPr/w:ind/@w:firstLine | w:pPr/w:ind/@w:hanging)">

            <xsl:for-each select="//w:style/w:name[@w:val = $basedOn]">
              <xsl:choose>
                <xsl:when test="./w:pPr/w:ind/@w:firstLine">
                  <xsl:text>text-indent:</xsl:text>
                  <xsl:value-of select="w:pPr/w:ind/@w:firstLine div 20"/>
                  <xsl:text>pt;</xsl:text>

                </xsl:when>
                <xsl:when test="./w:pPr/w:ind/@w:hanging">
                  <!--<xsl:text>padding-left:</xsl:text>-->
                  <xsl:text>text-indent:-</xsl:text>
                  <xsl:value-of select="w:pPr/w:ind/@w:hanging div 20"/>
                  <xsl:text>pt;</xsl:text>

                </xsl:when>

                <xsl:when test="./w:basedOn">
                  <xsl:call-template name="margin"/>
                </xsl:when>
              </xsl:choose>
              <!--</xsl:if>-->
            </xsl:for-each>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="margin"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:if>-->
    </xsl:for-each>
  </xsl:template>
  <xsl:template name="margin-left-right">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
    <xsl:variable name="bSapce" select="w:pPr/w:spacing/@w:before"/>
    <xsl:variable name="aSapce" select="w:pPr/w:spacing/@w:after"/>
    <xsl:variable name="lineSpace" select="w:pPr/w:spacing/@w:line"/>

    <!-- xsl:for-each select="//w:style/w:name[@w:val = $basedOn] -->
    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">

      <xsl:choose>
        <xsl:when test="w:pPr/w:spacing">

          <xsl:choose>
            <xsl:when test="not(w:pPr/w:spacing/@w:after) and not(w:pPr/w:spacing/@w:after = 0)">
              <xsl:if test="not($bSapce = 0)">
                <xsl:if test="string-length($bSapce) > 0">
                  <xsl:text>margin-bottom:</xsl:text>
                  <xsl:value-of select="$bSapce div 20"/>
                  <xsl:text>pt;</xsl:text>
                </xsl:if>
              </xsl:if>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="not($aSapce = 0)">
                <xsl:if test="string-length($aSapce) > 0">
                  <xsl:text>margin-bottom:</xsl:text>
                  <xsl:value-of select="$aSapce div 20"/>
                  <xsl:text>pt;</xsl:text>
                </xsl:if>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="margin-left-right"/>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:choose>
        <xsl:when test="./w:pPr/w:ind">

          <xsl:if test="w:pPr/w:ind/@w:firstLine and not(w:pPr/w:ind/@w:firstLine = 0)">
            <xsl:text>text-indent:</xsl:text>
            <xsl:value-of select="w:pPr/w:ind/@w:firstLine div 20"/>
            <xsl:text>pt;</xsl:text>

          </xsl:if>
          <xsl:if test="w:pPr/w:ind/@w:hanging and not(w:pPr/w:ind/@w:hanging = 0)">
            <!-- commented on 24-7-17, for hang align for Young feedback -->
            <!--<xsl:text>padding-left:</xsl:text>-->
            <xsl:text>text-indent:-</xsl:text>
            <xsl:value-of select="w:pPr/w:ind/@w:hanging div 20"/>
            <xsl:text>pt;</xsl:text>

          </xsl:if>
          <xsl:if test="w:pPr/w:ind/@w:left and not(w:pPr/w:ind/@w:left = 0)">

            <xsl:text>margin-left:</xsl:text>
            <xsl:value-of select="w:pPr/w:ind/@w:left div 20"/>
            <xsl:text>pt;</xsl:text>

          </xsl:if>
          <xsl:if test="not(w:pPr/w:ind/@w:firstLine | w:pPr/w:ind/@w:hanging)">

            <xsl:for-each select="//w:style/w:name[@w:val = $basedOn]">
              <xsl:choose>
                <xsl:when test="./w:pPr/w:ind/@w:firstLine">
                  <xsl:text>text-indent:</xsl:text>
                  <xsl:value-of select="w:pPr/w:ind/@w:firstLine div 20"/>
                  <xsl:text>pt;</xsl:text>

                </xsl:when>
                <xsl:when test="./w:pPr/w:ind/@w:hanging">
                  <!--<xsl:text>padding-left:</xsl:text>-->
                  <xsl:text>text-indent:-</xsl:text>
                  <xsl:value-of select="w:pPr/w:ind/@w:hanging div 20"/>
                  <xsl:text>pt;</xsl:text>

                </xsl:when>

                <xsl:when test="./w:basedOn">
                  <xsl:call-template name="margin"/>
                </xsl:when>
              </xsl:choose>
              <!--</xsl:if>-->
            </xsl:for-each>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="margin"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:if>-->
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="margin26-july">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
    <xsl:variable name="bSapce" select="w:pPr/w:spacing/@w:before"/>
    <xsl:variable name="aSapce" select="w:pPr/w:spacing/@w:after"/>
    <xsl:variable name="lineSpace" select="w:pPr/w:spacing/@w:line"/>

    <xsl:for-each select="//w:style/w:name[@w:val = $basedOn]">
      <xsl:choose>
        <xsl:when test="w:pPr/w:spacing">
          <xsl:choose>
            <xsl:when test="not(w:pPr/w:spacing/@w:before)"> </xsl:when>
            <xsl:otherwise>
              <xsl:text>margin-top:</xsl:text>
              <!--  updated by hari                  -->
              <xsl:value-of select="$bSapce div 20"/>
              <!--  <xsl:value-of select="number($bSapce) div 20"/>-->
              <xsl:text>pt;</xsl:text>

            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="not(w:pPr/w:spacing/@w:after)">
              <xsl:if test="string-length($bSapce) > 0">
                <xsl:text>margin-bottom:</xsl:text>
                <xsl:value-of select="$bSapce div 20"/>
                <xsl:text>pt;</xsl:text>
              </xsl:if>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="string-length($aSapce) > 0">
                <xsl:text>margin-bottom:</xsl:text>
                <xsl:value-of select="$aSapce div 20"/>
                <xsl:text>pt;</xsl:text>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
          <xsl:choose>
            <xsl:when test="w:pPr/w:ind">
              <xsl:if test="w:pPr/w:ind/@w:left">

                <xsl:text>margin-left:</xsl:text>
                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                <xsl:text>pt;</xsl:text>

              </xsl:if>
              <xsl:if test="w:pPr/w:ind/@w:right">
                <xsl:text>margin-right:</xsl:text>
                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                <xsl:text>pt;</xsl:text>

              </xsl:if>
            </xsl:when>
            <!--<xsl:when test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right">                    
              <xsl:text>margin-left:'</xsl:text>
              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
              <xsl:text>pt';</xsl:text>
              <xsl:text>margin-right:'</xsl:text>
              <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
              <xsl:text>pt';</xsl:text>                    
            </xsl:when>
            <xsl:when test="child::w:pPr/w:ind/@w:left">                    
              <xsl:text>margin-left:'</xsl:text>
              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
              <xsl:text>pt';</xsl:text>               
            </xsl:when>
            <xsl:when test="child::w:pPr/w:ind/@w:right">
              <xsl:text>margin-right:'</xsl:text>
              <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
              <xsl:text>pt';</xsl:text>    
            </xsl:when>-->
          </xsl:choose>
        </xsl:when>

        <xsl:otherwise>
          <xsl:call-template name="margin"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:if>-->
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="font-family">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>

    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
      <!-- //w:style/w:name[@w:val = $basedOn] -->
      <xsl:choose>
        <xsl:when test="./w:rPr/w:rFonts">
          <xsl:if test="string-length(./w:rPr/w:rFonts/@w:ascii) > 0">
            <xsl:text>font-family:"</xsl:text>
            <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
            <xsl:text>","serif";</xsl:text>

          </xsl:if>
        </xsl:when>
        <!--Newly added on 29-Mar-18 -->
        <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:cs">
          <xsl:text>mso-fareast-font-family:"</xsl:text>
          <xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:cs"/>
          <xsl:text>";</xsl:text>
        </xsl:when>
        <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:hAnsi">
          <xsl:text>font-family:"</xsl:text>
          <xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:hAnsi"/>
          <xsl:text>";</xsl:text>
        </xsl:when>
        <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
          <xsl:text>font-family:"</xsl:text>
          <xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"/>
          <xsl:text>";</xsl:text>
        </xsl:when>
        <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
          <xsl:text>mso-fareast-font-family:"</xsl:text>
          <xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>
          <xsl:text>";</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="font-family"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:if>-->
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="font-size">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
    <xsl:variable name="currStyle" select="./w:name/@w:val"/>

    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
      <xsl:choose>
        <xsl:when test="./w:rPr/w:sz">
          <xsl:text>font-size:</xsl:text>
          <xsl:variable name="fontSize" select="number(w:rPr/w:sz/@w:val) div 2"/>
          <xsl:value-of select="$fontSize"/>
          <xsl:text>pt;</xsl:text>
        </xsl:when>
        <xsl:when test="./w:basedOn">

          <xsl:for-each select="//w:style">
            <!--<xsl:if test="./@w:styleId = $basedOn">-->
            <xsl:if test="@w:styleId = $basedOn">
              <xsl:choose>
                <!-- Font SIZE -->
                <xsl:when test="child::w:rPr/w:sz">
                  <xsl:text>font-size:</xsl:text>
                  <xsl:variable name="fontSize" select="number(./w:rPr/w:sz/@w:val) div 2"/>
                  <xsl:value-of select="$fontSize"/>
                  <xsl:text>pt;</xsl:text>
                </xsl:when>


                <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:sz">
                  <xsl:text>font-size:</xsl:text>
                  <xsl:variable name="fontSize"
                    select="number(//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:sz/@w:val) div 2"/>
                  <xsl:value-of select="$fontSize"/>
                  <xsl:text>pt;</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:call-template name="font-size"/>

                </xsl:otherwise>
              </xsl:choose>
            </xsl:if>
          </xsl:for-each>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="font-size"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="loop">
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="./w:basedOn/@w:val"/>
    <xsl:variable name="color" select="w:rPr/w:color/@w:val"/>

    <!--<xsl:variable name="fontFamily" select="w:rPr/w:rFonts/@w:ascii"/>-->
    <xsl:variable name="fontFamily" select="w:rPr/w:rFonts/@w:cd"/>
    <xsl:variable name="textVarient" select="w:rPr/w:smallCaps/@w:val"/>
    <xsl:variable name="textTrans" select="w:rPr/w:smallCaps/@w:val"/>
    <xsl:variable name="fontWeight" select="w:rPr/w:b/@w:val"/>
    <xsl:variable name="fontStyle" select="w:rPr/w:i/@w:val"/>
    <xsl:variable name="underline" select="w:rPr/w:u/@w:val"/>
    <xsl:variable name="baseline" select="w:rPr/w:vertAlign/@w:val"/>

    <xsl:for-each select="//w:style[@w:styleId = $basedOn]">
      <!--            <xsl:if test="./@w:styleId = $basedOn">-->
      <xsl:variable name="fontFamily" select="w:rPr/w:rFonts/@w:ascii"/>
      <xsl:choose>
        <xsl:when test="./w:rPr/w:sz">
          <xsl:text>font-size:</xsl:text>
          <xsl:variable name="fontSize" select="number(w:rPr/w:sz/@w:val) div 2"/>
          <xsl:value-of select="$fontSize"/>
          <xsl:text>pt;</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="loop"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--<xsl:if test="w:rPr/w:sz">
                    <xsl:text>font-size:</xsl:text>
                    <xsl:variable name="fontSize" select="number(w:rPr/w:sz/@w:val) div 2"/>
                    <xsl:value-of select="$fontSize"/>
                    <xsl:text>pt;</xsl:text>           
                  </xsl:if>-->
      <xsl:if test="w:rPr/w:color">
        <xsl:choose>
          <xsl:when test="$color = 'auto'">
            <!--<xsl:value-of select="'000000'"/>-->
          </xsl:when>
          <xsl:otherwise>
            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
            <xsl:value-of select="$color"/>
          </xsl:otherwise>
        </xsl:choose>
        <!--<xsl:value-of select="$color"/>-->
        <!--<xsl:text>color:#</xsl:text>
                <xsl:value-of select="w:rPr/w:color/@w:val"/>-->
        <xsl:text>;</xsl:text>

      </xsl:if>
      <xsl:choose>
        <xsl:when test="w:rPr/w:rFonts">
          <xsl:if test="string-length($fontFamily) > 0">
            <xsl:choose>
              <xsl:when test="w:rPr/w:rFonts/@w:eastAsia | w:rPr/w:rFonts/@w:cs">
                <xsl:text> mso-fareast-font-family:"</xsl:text>
                <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                <xsl:text>","serif";</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>font-family:"</xsl:text>
                <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                <xsl:text>";</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
        </xsl:when>
        <xsl:otherwise>
          <xsl:call-template name="loop"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--<xsl:if test="string-length($fontFamily) > 0">
                    <xsl:text>font-family:"</xsl:text>
                    <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                    <xsl:text>","serif";</xsl:text>           
                  </xsl:if>-->
      <xsl:if test="w:rPr/w:smallCaps">
        <xsl:choose>
          <xsl:when test="$textVarient = '0'">
            <xsl:text>font-variant:normal !important;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>font-variant:small-caps !important;</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

      </xsl:if>
      <xsl:if test="w:rPr/w:caps">
        <xsl:choose>
          <xsl:when test="$textTrans = '0'">
            <xsl:text>text-transform:none;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>text-transform:uppercase;</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

      </xsl:if>
      <xsl:if test="w:rPr/w:b">
        <xsl:choose>
          <xsl:when test="$fontWeight = '0'">
            <xsl:text>font-weight:normal;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>font-weight:bold;</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

      </xsl:if>
      <xsl:if test="w:rPr/w:i">
        <xsl:choose>
          <xsl:when test="$fontStyle = '0'">
            <xsl:text>font-style:normal;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>font-style:italic;</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

      </xsl:if>
      <xsl:if test="w:rPr/w:u">
        <xsl:choose>
          <xsl:when test="$underline = 'none'">
            <xsl:text>text-decoration:none;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>text-decoration:underline;</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

      </xsl:if>
      <xsl:if test="w:rPr/w:vertAlign">
        <xsl:choose>
          <xsl:when test="$baseline = 'subscript'">
            <xsl:text>vertical-align:sub;</xsl:text>
          </xsl:when>
          <xsl:when test="$baseline = 'superscript'">
            <xsl:text>vertical-align:super;</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>vertical-align:baseline;</xsl:text>
          </xsl:otherwise>
        </xsl:choose>

      </xsl:if>
      <xsl:if test="./w:basedOn">
        <xsl:call-template name="loop"/>
      </xsl:if>
      <!--</xsl:if>-->
      <!--</xsl:if>-->
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="w:document">
    <xsl:apply-templates/>
  </xsl:template>




  <!-- 16-Jan-17 To delete EMPTY Paragraphs and EMPTY content controls -->
  <!--<xsl:template match="w:p[not(child::w:r)] | w:p[not(child::w:r/w:t)]"/>-->
  <!--<xsl:template match="w:sdt[not(child::w:sdtContent/w:t|child::w:sdtContent/w:p|child::w:sdtContent/w:r|child::w:sdtContent/w:tbl|child::w:sdtContent/w:drawing|child::w:sdtContent/w:sdt)]"/>-->
  <!-- END -->

  <!-- 23-06-16 Content Controls -->

  <xsl:template match="w:sdt">
    <xsl:variable name="xxx" select="w:sdtPr/w:alias/@w:val"/>
    <xsl:variable name="ccName" select="w:sdtPr/w:tag/@w:val"/>
    <xsl:variable name="kkk" select="w:sdtPr/w:tag/@w:val"/>
    <xsl:variable name="figSeq">
      <xsl:if test="descendant::w:sdt[w:sdtPr/w:alias[@w:val = 'SeqNo']]">
        <xsl:value-of
          select="normalize-space(descendant::w:sdt[w:sdtPr/w:alias[@w:val = 'SeqNo']][1])"/>
      </xsl:if>
    </xsl:variable>
    <xsl:variable name="alias" select="child::w:sdtPr/w:alias/@w:val"/>
    <xsl:variable name="tag" select="child::w:sdtPr/w:tag/@w:val"/>
    <xsl:variable name="id" select="child::w:sdtPr/w:id/@w:val"/>
    <xsl:variable name="class" select="descendant::w:rStyle[1]/@w:val"/>
    <xsl:variable name="citText" select="ancestor::w:sdtContent[1][descendant::w:sdt/w:sdtPr/w:alias[@w:val='CiteTag']]/preceding-sibling::*[1][self::w:sdtPr[w:id/@w:val]]/child::w:alias[@w:val]/@w:val"/>
   
    <xsl:choose>
      <xsl:when test="matches($xxx, 'SeqNo')">
        <xsl:element name="span">
          <xsl:attribute name="style"
            select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
          <!--<xsl:attribute name="data-alias" select="$alias"/>-->
          <xsl:attribute name="data-alias" select="'SeqNo'"/>
          <!--<xsl:attribute name="class" select="'SeqNo'"/>-->
          <xsl:attribute name="class" select="$class"/>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:apply-templates select="descendant::w:t"/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="matches($xxx, 'TableRef')">
        <xsl:element name="a">
          <xsl:attribute name="style"
            select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
          <xsl:attribute name="data-alias" select="'TableRef'"/>
          <xsl:attribute name="href">
            <xsl:value-of select="concat($filename, '.xhtml#t')"/>
            <xsl:value-of
              select="normalize-space(translate($figSeq, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <xsl:attribute name="class" select="'citationtable'"/>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:element name="span">
            <xsl:attribute name="class" select="'TableCitation'"/>
            <!--<xsl:apply-templates select="descendant::w:t"/>-->
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="contains($xxx, 'FigureRef')">
        <xsl:variable name="figSeq">
          <xsl:value-of select="descendant::w:sdt[w:sdtPr/w:alias[@w:val = 'SeqNo']][1]"/>
        </xsl:variable>
        <xsl:element name="a">
          <xsl:attribute name="style"
            select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
          <xsl:attribute name="data-alias" select="'FigureRef'"/>
          <xsl:attribute name="href">
            <xsl:value-of select="concat($filename, '.xhtml#f')"/>
            <xsl:value-of
              select="normalize-space(translate($figSeq, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <xsl:attribute name="class" select="'citationfigure'"/>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:element name="span">
            <xsl:attribute name="class" select="'FigureCitation'"/>
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>
      </xsl:when>


      <xsl:when test="matches($xxx, 'FigureRefXXX')">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'contentcontrol'"/>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="matches($xxx, 'TableCaption')">
        <xsl:apply-templates/>
      </xsl:when>
      <xsl:when test="matches($xxx, 'FigureCaption')">

        <xsl:element name="div">
          <xsl:attribute name="style"
            select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
          <xsl:attribute name="data-alias" select="$alias"/>
          <xsl:attribute name="class" select="'captionfig'"/>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->

          <!--              <xsl:variable name="idval" select="child::w:sdtContent/w:p/w:r/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:t[1]"/>-->
          <!-- commented due to elsevier demo and used the below one line 14-nov-16 -->
          <!--<xsl:variable name="idval" select="child::w:sdtContent/w:p/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:r/w:t[1]"/>-->
          <xsl:variable name="idval"
            select="child::w:sdtContent/w:p/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:r/w:t[1]"/>

          <xsl:if test="string-length($figSeq) > 0">
            <xsl:attribute name="id">
              <xsl:text>f</xsl:text>
              <xsl:value-of select="translate($figSeq, '  ', '')"/>
              <!--<xsl:value-of select="$idval"/>-->
            </xsl:attribute>
          </xsl:if>
          <xsl:apply-templates/>
        </xsl:element>

      </xsl:when>
      <xsl:when test="matches(lower-case($xxx), 'box')">

        <xsl:element name="div">
          <xsl:attribute name="style"
            select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
          <xsl:attribute name="data-alias" select="$alias"/>
          <xsl:attribute name="class" select="'Box'"/>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <!--              <xsl:variable name="idval" select="child::w:sdtContent/w:p/w:r/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:t[1]"/>-->
          <!-- commented due to elsevier demo and used the below one line 14-nov-16 -->
          <!--<xsl:variable name="idval" select="child::w:sdtContent/w:p/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:r/w:t[1]"/>-->
          <xsl:variable name="idval"
            select="child::w:sdtContent/w:p/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:r/w:t[1]"/>

          <xsl:if test="string-length($figSeq) > 0">
            <xsl:attribute name="id">
              <xsl:text>f</xsl:text>
              <xsl:value-of select="translate($figSeq, '  ', '')"/>
              <!--<xsl:value-of select="$idval"/>-->
            </xsl:attribute>
          </xsl:if>
          <xsl:apply-templates/>
        </xsl:element>

      </xsl:when>
      <xsl:when test="matches($xxx, 'BOX')">

        <xsl:element name="div">
          <xsl:attribute name="style"
            select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
          <xsl:attribute name="data-alias" select="$alias"/>
          <xsl:attribute name="class" select="'Box'"/>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <!--              <xsl:variable name="idval" select="child::w:sdtContent/w:p/w:r/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:t[1]"/>-->
          <!-- commented due to elsevier demo and used the below one line 14-nov-16 -->
          <!--<xsl:variable name="idval" select="child::w:sdtContent/w:p/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:r/w:t[1]"/>-->
          <xsl:variable name="idval"
            select="child::w:sdtContent/w:p/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:r/w:t[1]"/>

          <xsl:if test="string-length($figSeq) > 0">
            <xsl:attribute name="id">
              <xsl:text>f</xsl:text>
              <xsl:value-of select="translate($figSeq, '  ', '')"/>
              <!--<xsl:value-of select="$idval"/>-->
            </xsl:attribute>
          </xsl:if>
          <xsl:apply-templates/>
        </xsl:element>

      </xsl:when>
      <xsl:when test="matches($xxx, 'CaseStudy')">
        <xsl:element name="div">
          <xsl:attribute name="style"
            select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
          <xsl:attribute name="data-alias" select="$alias"/>
          <xsl:attribute name="class" select="'CaseStudy'"/>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <!--              <xsl:variable name="idval" select="child::w:sdtContent/w:p/w:r/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:t[1]"/>-->
          <!-- commented due to elsevier demo and used the below one line 14-nov-16 -->
          <!--<xsl:variable name="idval" select="child::w:sdtContent/w:p/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:r/w:t[1]"/>-->
          <xsl:variable name="idval"
            select="child::w:sdtContent/w:p/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:r/w:t[1]"/>

          <xsl:if test="string-length($figSeq) > 0">
            <xsl:attribute name="id">
              <xsl:text>c</xsl:text>
              <xsl:value-of select="translate($figSeq, '  ', '')"/>
              <!--<xsl:value-of select="$idval"/>-->
            </xsl:attribute>
          </xsl:if>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <!-- numbered reference citations -->
      <xsl:when test="matches($xxx, 'BibCitation')">
        <xsl:element name="span">
          <xsl:attribute name="style"
            select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
          <xsl:attribute name="class" select="'citationRef'"/>
          <xsl:attribute name="data-alias" select="$alias"/>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <!-- unnumbered reference citations -->
      <xsl:when test="matches($xxx, 'CiteTag')">

        <xsl:element name="a">
          <xsl:attribute name="style"
            select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
          <xsl:attribute name="href">
            <xsl:value-of select="concat($filename, '.xhtml#Reference')"/>
            <xsl:value-of
              select="translate($ccName, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"
            />
          </xsl:attribute>
          <xsl:attribute name="data-alias" select="'CiteTag'"/>
          <xsl:attribute name="class" select="'citationRef'"/>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:element name="span">
            <xsl:attribute name="id" select="$ccName"/>
            <xsl:attribute name="class" select="$ccName"/>
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>

      </xsl:when>
      <xsl:when test="contains($xxx, 'RefGroup')">

        <xsl:element name="div">
          <xsl:attribute name="style"
            select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
          <xsl:attribute name="id" select="$xxx"/>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-alias" select="'RefGroup'"/>


          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:apply-templates/>

        </xsl:element>
      </xsl:when>
      <xsl:when test="contains($xxx, 'Reference')">

        <xsl:element name="div">
          <xsl:attribute name="style"
            select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
          <xsl:attribute name="id" select="$xxx"/>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
          <xsl:if test="child::w:sdtPr/w:tag">
            <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
          </xsl:if>
          <xsl:if test="child::w:sdtPr/w:dataBinding">
            <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
          </xsl:if>
          <!-- 10-Aug-17, Added for Mahi, in html2idml -->
          <xsl:element name="a">
            <xsl:attribute name="href">
              <xsl:value-of select="concat($filename, '.xhtml#BibRef')"/>
              <xsl:value-of
                select="translate($xxx, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"
              />
            </xsl:attribute>
            <xsl:attribute name="data-alias" select="'Reference'"/>
            <xsl:attribute name="class" select="'action_link'"/>
            <xsl:attribute name="style"
              select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
            <!-- 10-Aug-17, Added for Mahi, in html2idml -->
            <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
            <xsl:if test="child::w:sdtPr/w:tag">
              <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
            </xsl:if>
            <xsl:if test="child::w:sdtPr/w:dataBinding">
              <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
            </xsl:if>
            <!-- 10-Aug-17, Added for Mahi, in html2idml -->
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <xsl:when test="descendant::w:sdt[w:sdtPr/w:alias[@w:val = 'TableCaption']]">

            <xsl:element name="div">
              <xsl:attribute name="style"
                select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
              <xsl:attribute name="class" select="'captiontable'"/>
              <xsl:attribute name="data-alias" select="$alias"/>
              <xsl:attribute name="title">
                <xsl:value-of select="normalize-space(.)"/>
              </xsl:attribute>
              <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
              <!-- 10-Aug-17, Added for Mahi, in html2idml -->
              <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
              <xsl:if test="child::w:sdtPr/w:tag">
                <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
              </xsl:if>
              <xsl:if test="child::w:sdtPr/w:dataBinding">
                <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
              </xsl:if>
              <!-- 10-Aug-17, Added for Mahi, in html2idml -->
              <!--              <xsl:variable name="idval" select="child::w:sdtContent/w:p/w:r/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:t[1]"/>-->
              <!-- commented due to elsevier demo and used the below one line 14-nov-16 -->
              <xsl:variable name="idval"
                select="descendant::w:sdtContent/w:p/w:sdt[w:sdtPr/w:alias/@w:val = 'SeqNo']/w:sdtContent/w:r/w:t[1]"/>
              <xsl:if test="string-length($idval) &gt; 0">
                <xsl:attribute name="id">
                  <xsl:text>t</xsl:text>
                  <xsl:value-of select="translate($idval, '  ', '')"/>
                  <!--<xsl:value-of select="$idval"/>-->
                </xsl:attribute>
              </xsl:if>
              <xsl:apply-templates/>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <xsl:element name="span">
              <xsl:attribute name="style"
                select="'background: #eeeeee; border: 1px solid #cccccc;  padding: 2px 10px;'"/>
              <xsl:attribute name="class" select="$xxx"/>
              <xsl:attribute name="data-alias" select="'TableCaption'"/>
              <!-- 10-Aug-17, Added for Mahi, in html2idml -->
              <xsl:attribute name="data-id" select="child::w:sdtPr/w:id/@w:val"/>
              <xsl:if test="child::w:sdtPr/w:tag">
                <xsl:attribute name="data-tag" select="child::w:sdtPr/w:tag/@w:val"/>
              </xsl:if>
              <xsl:if test="child::w:sdtPr/w:dataBinding">
                <xsl:attribute name="data-xpath" select="child::w:sdtPr/w:dataBinding/@w:xpath"/>
              </xsl:if>
              <!-- 10-Aug-17, Added for Mahi, in html2idml -->
              <xsl:apply-templates/>
            </xsl:element>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- w:pict -->
  <xsl:template match="w:pict">
    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
    <xsl:variable name="paragraphStyleName">
      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
    </xsl:variable>

    <!-- 13-OCT-17: Suguna asked to give 'p' tag. So i commented this -->
    <!--<xsl:element name="div">      
      <xsl:attribute name="data-type" select="'textbox'"/>
      <xsl:attribute name="data-id" select="descendant-or-self::v:shape[1]/@id"/>
      <xsl:attribute name="data-style" select="descendant::v:textbox[1]/@style"/>
      <xsl:attribute name="style" select="'border:1px solid black;outline: 2px solid #CCC;'"/>
      
      <xsl:apply-templates select="descendant::v:shape/v:textbox/w:txbxContent/w:p | descendant::w:tbl"/>
      
    </xsl:element>-->

    <xsl:element name="div">
      <xsl:attribute name="data-type" select="'textbox'"/>
      <xsl:attribute name="data-id" select="descendant-or-self::v:shape[1]/@id"/>
      <xsl:attribute name="data-style" select="descendant::v:textbox[1]/@style"/>
      <xsl:attribute name="style" select="'border:1px solid black;outline: 2px solid #CCC;'"/>

      <!--<xsl:for-each select="descendant::w:p">-->
      <!--<xsl:element name="p">-->
      <!--<xsl:attribute name="class" select="$paragraphStyle"/>
          -->
      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
      <xsl:choose>
        <xsl:when
          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
          <xsl:attribute name="style">
            <xsl:text>mso-style-name:</xsl:text>
            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
            <xsl:text> !msorm;</xsl:text>

            <xsl:if test="child::w:pPr/w:shd">
              <xsl:text> background:#</xsl:text>
              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
              <xsl:text>;</xsl:text>
            </xsl:if>
            <!--****** new -->
            <xsl:if test="child::w:pPr/w:ind">
              <xsl:choose>
                <xsl:when
                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:if test="child::w:pPr/w:ind/@w:left">
                      <xsl:text>margin-left:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                      <xsl:text>pt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:ind/@w:right">
                      <xsl:text>margin-right:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                      <xsl:text>pt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                      <xsl:text>text-indent:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                      <xsl:text>pt;</xsl:text>
                    </xsl:if>
                    <!--<xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                  </xsl:attribute>
                </xsl:when>
                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:text>margin-left:</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                    <xsl:text>pt;</xsl:text>
                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                      <xsl:text>text-indent:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                      <xsl:text>pt;</xsl:text>
                    </xsl:if>
                    <!--<xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                  </xsl:attribute>
                </xsl:when>
                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:text>margin-right:</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                    <xsl:text>pt;</xsl:text>
                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                      <xsl:text>text-indent:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                      <xsl:text>pt;</xsl:text>
                    </xsl:if>
                    <!--<xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                  </xsl:attribute>
                </xsl:when>
              </xsl:choose>
            </xsl:if>
            <xsl:if test="child::w:pPr/w:jc">
              <xsl:attribute name="style">
                <xsl:text>text-align:</xsl:text>
                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                <xsl:text>;</xsl:text>
              </xsl:attribute>
            </xsl:if>

            <xsl:if test="contains($bulltype, '.%')">
              <xsl:attribute name="type">
                <xsl:value-of select="$indent"/>
              </xsl:attribute>
            </xsl:if>
            <!-- new end -->
          </xsl:attribute>
          <xsl:apply-templates
            select="descendant::v:shape/v:textbox/w:txbxContent/w:p | descendant::w:tbl | w:p"/>
        </xsl:when>
        <xsl:when test="child::w:sdt">
          <xsl:apply-templates/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:apply-templates
            select="descendant::v:shape/v:textbox/w:txbxContent/w:p | descendant::w:tbl | w:r"/>
        </xsl:otherwise>
      </xsl:choose>
      <!--</xsl:element>-->
      <!--</xsl:for-each>-->
    </xsl:element>

  </xsl:template>
  <!-- w:pict -->
  <xsl:template match="w:noBreakHyphen">
    <xsl:text disable-output-escaping="yes">&amp;#x2011;</xsl:text>
  </xsl:template>
  <xsl:template match="w:softHyphen">
    <xsl:text disable-output-escaping="yes">&amp;#xAD;</xsl:text>
  </xsl:template>

  <!--<xsl:template match="w:pict">
    
    <xsl:apply-templates select="descendant::v:shape/v:textbox/w:txbxContent/w:p | descendant::w:tbl"/>
  </xsl:template>-->
  <!-- end w:pict -->
  <!--textbox-->
  <!-- //v:textbox/w:txbxContent/w:p -->
  <xsl:template match="//v:textbox1/w:txbxContent/w:p">
    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
    <xsl:variable name="paragraphStyleName">
      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
    </xsl:variable>

    <xsl:choose>
      <xsl:when test="not(ancestor::w:p)">

        <xsl:element name="div">
          <xsl:attribute name="data-type" select="'textbox'"/>
          <xsl:attribute name="data-id" select="ancestor-or-self::v:shape[1]/@id"/>
          <xsl:attribute name="data-style" select="ancestor-or-self::v:textbox[1]/@style"/>
          <xsl:attribute name="style" select="'border:1px solid black;outline: 2px solid #CCC;'"/>

          <xsl:element name="p">
            <xsl:attribute name="class">
              <xsl:choose>
                <xsl:when test="string-length($paragraphStyle) > 0">
                  <xsl:value-of select="$paragraphStyle"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="'MsoNormal'"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:attribute>
            <xsl:attribute name="data-name" select="$paragraphStyleName"/>
            <!-- 7-May-19 -->
            <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
            <xsl:choose>
              <xsl:when
                test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                <xsl:attribute name="style">
                  <xsl:text>mso-style-name:</xsl:text>
                  <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                  <xsl:text> !msorm;</xsl:text>

                  <xsl:if test="child::w:pPr/w:shd">
                    <xsl:text> background:#</xsl:text>
                    <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                    <xsl:text>;</xsl:text>
                  </xsl:if>
                  <!--****** new -->
                  <xsl:if test="child::w:pPr/w:ind">
                    <xsl:choose>
                      <xsl:when
                        test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                        <xsl:attribute name="style">
                          <xsl:if test="child::w:pPr/w:ind/@w:left">
                            <xsl:text>margin-left:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="child::w:pPr/w:ind/@w:right">
                            <xsl:text>margin-right:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <!--<xsl:if test="child::w:pPr/w:jc">
                            <xsl:text>style=text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>   
                          </xsl:if>-->
                        </xsl:attribute>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                        <xsl:attribute name="style">
                          <xsl:text>margin-left:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                          <xsl:text>pt;</xsl:text>
                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <!--<xsl:if test="child::w:pPr/w:jc">
                            <xsl:text>style=text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>   
                          </xsl:if>-->
                        </xsl:attribute>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                        <xsl:attribute name="style">
                          <xsl:text>margin-right:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                          <xsl:text>pt;</xsl:text>
                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <!--<xsl:if test="child::w:pPr/w:jc">
                            <xsl:text>style=text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>   
                          </xsl:if>-->
                        </xsl:attribute>
                      </xsl:when>
                    </xsl:choose>
                  </xsl:if>
                  <xsl:if test="child::w:pPr/w:jc">
                    <xsl:attribute name="style">
                      <xsl:text>text-align:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                      <xsl:text>;</xsl:text>
                    </xsl:attribute>
                  </xsl:if>

                  <xsl:if test="contains($bulltype, '.%')">
                    <xsl:attribute name="type">
                      <xsl:value-of select="$indent"/>
                    </xsl:attribute>
                  </xsl:if>
                  <!-- new end -->
                </xsl:attribute>
                <xsl:apply-templates/>
              </xsl:when>
              <xsl:when test="child::w:sdt">
                <xsl:apply-templates/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:apply-templates/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>


        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <!-- 09-May-17: Suguna asked to give p tag -->
        <!--<xsl:apply-templates/>-->


        <xsl:element name="div">
          <xsl:attribute name="data-type" select="'textbox'"/>
          <xsl:attribute name="data-id" select="ancestor-or-self::v:shape[1]/@id"/>
          <xsl:attribute name="data-style" select="ancestor-or-self::v:textbox[1]/@style"/>
          <xsl:attribute name="style" select="'border:1px solid black;outline: 2px solid #CCC;'"/>

          <xsl:element name="p">
            <xsl:attribute name="class">
              <xsl:choose>
                <xsl:when test="string-length($paragraphStyle) > 0">
                  <xsl:value-of select="$paragraphStyle"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="'MsoNormal'"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:attribute>
            <xsl:attribute name="data-name" select="$paragraphStyleName"/>
            <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
            <xsl:choose>
              <xsl:when
                test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                <xsl:attribute name="style">
                  <xsl:text>mso-style-name:</xsl:text>
                  <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                  <xsl:text> !msorm;</xsl:text>

                  <xsl:if test="child::w:pPr/w:shd">
                    <xsl:text> background:#</xsl:text>
                    <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                    <xsl:text>;</xsl:text>
                  </xsl:if>
                  <!--****** new -->
                  <xsl:if test="child::w:pPr/w:ind">
                    <xsl:choose>
                      <xsl:when
                        test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                        <xsl:attribute name="style">
                          <xsl:if test="child::w:pPr/w:ind/@w:left">
                            <xsl:text>margin-left:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="child::w:pPr/w:ind/@w:right">
                            <xsl:text>margin-right:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <!--<xsl:if test="child::w:pPr/w:jc">
                            <xsl:text>style=text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>   
                          </xsl:if>-->
                        </xsl:attribute>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                        <xsl:attribute name="style">
                          <xsl:text>margin-left:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                          <xsl:text>pt;</xsl:text>
                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <!--<xsl:if test="child::w:pPr/w:jc">
                            <xsl:text>style=text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>   
                          </xsl:if>-->
                        </xsl:attribute>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                        <xsl:attribute name="style">
                          <xsl:text>margin-right:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                          <xsl:text>pt;</xsl:text>
                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <!--<xsl:if test="child::w:pPr/w:jc">
                            <xsl:text>style=text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>   
                          </xsl:if>-->
                        </xsl:attribute>
                      </xsl:when>
                    </xsl:choose>
                  </xsl:if>
                  <xsl:if test="child::w:pPr/w:jc">
                    <xsl:attribute name="style">
                      <xsl:text>text-align:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                      <xsl:text>;</xsl:text>
                    </xsl:attribute>
                  </xsl:if>

                  <xsl:if test="contains($bulltype, '.%')">
                    <xsl:attribute name="type">
                      <xsl:value-of select="$indent"/>
                    </xsl:attribute>
                  </xsl:if>
                  <!-- new end -->
                </xsl:attribute>
                <xsl:apply-templates/>
              </xsl:when>
              <xsl:when test="child::w:sdt">
                <xsl:apply-templates/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:apply-templates/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:element>

        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="//v:textbox2/w:txbxContent/w:pXXXX">
    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
    <xsl:variable name="paragraphStyleName">
      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="not(ancestor::w:p)">
        <xsl:element name="p">
          <xsl:attribute name="class">
            <xsl:choose>
              <xsl:when test="string-length($paragraphStyle) > 0">
                <xsl:value-of select="$paragraphStyle"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="'MsoNormal'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <xsl:attribute name="data-name" select="$paragraphStyleName"/>
          <!-- 7-May-19 -->
          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
          <xsl:choose>
            <xsl:when
              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
              <xsl:attribute name="style">
                <xsl:text>mso-style-name:</xsl:text>
                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                <xsl:text> !msorm;</xsl:text>

                <xsl:if test="child::w:pPr/w:shd">
                  <xsl:text> background:#</xsl:text>
                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                  <xsl:text>;</xsl:text>
                </xsl:if>
                <!--****** new -->
                <xsl:if test="child::w:pPr/w:ind">

                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-left:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                          <xsl:text>margin-right:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!--<xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-left:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!--<xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-right:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!--<xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                  </xsl:choose>
                </xsl:if>
                <xsl:if test="child::w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:text>text-align:</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                    <xsl:text>;</xsl:text>
                  </xsl:attribute>
                </xsl:if>

                <xsl:if test="contains($bulltype, '.%')">
                  <xsl:attribute name="type">
                    <xsl:value-of select="$indent"/>
                  </xsl:attribute>
                </xsl:if>
                <!-- new end -->
              </xsl:attribute>
              <xsl:apply-templates/>
            </xsl:when>
            <xsl:when test="child::w:sdt">
              <xsl:apply-templates/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:apply-templates/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:element>

      </xsl:when>
      <xsl:otherwise>

        <xsl:element name="p">
          <xsl:attribute name="class">
            <xsl:choose>
              <xsl:when test="string-length($paragraphStyle) > 0">
                <xsl:value-of select="$paragraphStyle"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="'MsoNormal'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <xsl:attribute name="data-name">
            <xsl:choose>
              <xsl:when test="string-length($paragraphStyleName) > 0">
                <xsl:value-of select="$paragraphStyleName"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="'MsoNormal'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <!-- 7-May-19 -->
          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
          <xsl:choose>
            <xsl:when
              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
              <xsl:attribute name="style">
                <xsl:text>mso-style-name:</xsl:text>
                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                <xsl:text> !msorm;</xsl:text>

                <xsl:if test="child::w:pPr/w:shd">
                  <xsl:text> background:#</xsl:text>
                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                  <xsl:text>;</xsl:text>
                </xsl:if>
                <!--****** new -->
                <xsl:if test="child::w:pPr/w:ind">
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-left:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                          <xsl:text>margin-right:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!--<xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-left:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!--<xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-right:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!--<xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                  </xsl:choose>
                </xsl:if>
                <xsl:if test="child::w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:text>text-align:</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                    <xsl:text>;</xsl:text>
                  </xsl:attribute>
                </xsl:if>

                <xsl:if test="contains($bulltype, '.%')">
                  <xsl:attribute name="type">
                    <xsl:value-of select="$indent"/>
                  </xsl:attribute>
                </xsl:if>
                <!-- new end -->
              </xsl:attribute>
              <xsl:apply-templates/>
            </xsl:when>
            <xsl:when test="child::w:sdt">
              <xsl:apply-templates/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:apply-templates/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:element>

      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="v:textbox3">
    <xsl:variable name="paragraphStyle" select="child::w:txbxContent/w:p/w:pPr/w:pStyle/@w:val"/>
    <xsl:variable name="paragraphStyleName">
      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
    </xsl:variable>
    <xsl:element name="div">
      <xsl:attribute name="class" select="'textbox'"/>
      <!-- 09-May-17: Suguna asked to give p tag -->
      <!--<xsl:apply-templates/>-->

      <xsl:element name="p">
        <xsl:attribute name="class">
          <xsl:choose>
            <xsl:when test="string-length($paragraphStyle) > 0">
              <xsl:value-of select="$paragraphStyle"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="'MsoNormal'"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:attribute>
        <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
        <xsl:choose>
          <xsl:when
            test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
            <xsl:attribute name="style">
              <xsl:text>mso-style-name:</xsl:text>
              <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
              <xsl:text> !msorm;</xsl:text>

              <xsl:if test="child::w:pPr/w:shd">
                <xsl:text> background:#</xsl:text>
                <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                <xsl:text>;</xsl:text>
              </xsl:if>
              <!--****** new -->
              <xsl:if test="child::w:pPr/w:ind">
                <xsl:choose>
                  <xsl:when
                    test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                    <xsl:attribute name="style">
                      <xsl:text>margin-left:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                      <xsl:text>pt;</xsl:text>
                      <xsl:if test="child::w:pPr/w:ind/@w:right">
                        <xsl:text>margin-right:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                        <xsl:text>pt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                        <xsl:text>text-indent:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                        <xsl:text>pt;</xsl:text>
                      </xsl:if>
                      <!--<xsl:if test="child::w:pPr/w:jc">
                        <xsl:text>style=text-align:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                        <xsl:text>;</xsl:text>   
                      </xsl:if>-->
                    </xsl:attribute>
                  </xsl:when>
                  <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                    <xsl:attribute name="style">
                      <xsl:text>margin-left:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                      <xsl:text>pt;</xsl:text>
                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                        <xsl:text>text-indent:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                        <xsl:text>pt;</xsl:text>
                      </xsl:if>
                      <!--<xsl:if test="child::w:pPr/w:jc">
                        <xsl:text>style=text-align:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                        <xsl:text>;</xsl:text>   
                      </xsl:if>-->
                    </xsl:attribute>
                  </xsl:when>
                  <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                    <xsl:attribute name="style">
                      <xsl:text>margin-right:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                      <xsl:text>pt;</xsl:text>
                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                        <xsl:text>text-indent:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                        <xsl:text>pt;</xsl:text>
                      </xsl:if>
                      <!--<xsl:if test="child::w:pPr/w:jc">
                        <xsl:text>style=text-align:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                        <xsl:text>;</xsl:text>   
                      </xsl:if>-->
                    </xsl:attribute>
                  </xsl:when>
                </xsl:choose>
              </xsl:if>
              <xsl:if test="child::w:pPr/w:jc">
                <xsl:attribute name="style">
                  <xsl:text>text-align:</xsl:text>
                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                  <xsl:text>;</xsl:text>
                </xsl:attribute>
              </xsl:if>

              <xsl:if test="contains($bulltype, '.%')">
                <xsl:attribute name="type">
                  <xsl:value-of select="$indent"/>
                </xsl:attribute>
              </xsl:if>
              <!-- new end -->
            </xsl:attribute>
            <xsl:apply-templates/>
          </xsl:when>
          <xsl:when test="child::w:sdt">
            <xsl:apply-templates/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:apply-templates/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:element>

    </xsl:element>

  </xsl:template>
  <!-- end of textbox -->

  <xsl:template match="//w:sdtContent/w:p">
    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
    <xsl:variable name="paragraphStyleName">
      <!-- 04-Apr-18: The below logic changed to resolve the speed issue to applu data-name-->
      <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>-->
      <xsl:value-of
        select="/w:document/w:styles/w:style[@w:styleId = $paragraphStyle][1]/w:name/@w:val"/>
    </xsl:variable>
    <xsl:variable name="color" select="child::w:pPr/w:rPr/w:color/@w:val"/>

    <xsl:choose>
      <xsl:when test="child::w:pPr/w:numPr">
        <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
        <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
        <xsl:variable name="two">
          <!--<xsl:if test="//w:num/@w:numId = $one">-->
          <xsl:value-of select="//w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
          <!--</xsl:if>-->
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">


            <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
            <xsl:variable name="three">
              <xsl:choose>
                <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                  <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                  <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                  <xsl:choose>
                    <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                      <xsl:value-of
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                      />
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                  <xsl:value-of
                    select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                  />
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
            <xsl:variable name="bulltype">
              <xsl:choose>
                <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                  <xsl:value-of
                    select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                  />
                </xsl:when>
                <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                  <xsl:value-of
                    select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                  />
                </xsl:when>
              </xsl:choose>
            </xsl:variable>


            <xsl:choose>
              <xsl:when test="$three = 'upperRoman'">
                <xsl:element name="ol">
                  <xsl:attribute name="type">
                    <xsl:value-of select="'I'"/>
                  </xsl:attribute>
                  <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                  <!--<xsl:attribute name="start">
                        <xsl:number count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]" level="any"/>
                      </xsl:attribute>-->
                  <xsl:variable name="restart">
                    <xsl:if
                      test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                      <xsl:value-of
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                      />
                    </xsl:if>
                  </xsl:variable>
                  <xsl:attribute name="start">
                    <!-- 03-JAN-19 -->
                    <xsl:variable name="start">
                      <xsl:number
                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                        level="any"/>
                    </xsl:variable>

                    <xsl:choose>
                      <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                      <xsl:when test="$start = ''">
                        <xsl:value-of select="$restart"/>
                      </xsl:when>
                      <!-- 29-Nov-18: If no value in $start ENDS-->
                      <xsl:when test="$start = 1">
                        <xsl:value-of select="$restart"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="$start"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:attribute name="start">
                        <xsl:variable name="start">
                          <xsl:number count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"/>
                        </xsl:variable>
                        
                        <xsl:choose>
                          <xsl:when test="$start = 1">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="($restart + $start)-1"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>-->
                  <!--</xsl:if>-->
                  <xsl:element name="li">
                    <xsl:attribute name="class">
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyle) > 0">
                          <xsl:value-of select="$paragraphStyle"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <xsl:attribute name="data-name">
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <!-- 7-May-19 -->
                    <xsl:apply-templates/>
                  </xsl:element>
                </xsl:element>
              </xsl:when>
              <xsl:when test="$three = 'lowerRoman'">
                <xsl:element name="ol">
                  <xsl:attribute name="type">
                    <xsl:value-of select="'i'"/>
                  </xsl:attribute>
                  <xsl:variable name="restart">
                    <xsl:if
                      test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                      <xsl:value-of
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                      />
                    </xsl:if>
                  </xsl:variable>
                  <xsl:attribute name="start">
                    <!-- 03-JAN-19 -->
                    <xsl:variable name="start">
                      <xsl:number
                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                        level="any"/>
                    </xsl:variable>

                    <xsl:choose>
                      <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                      <xsl:when test="$start = ''">
                        <xsl:value-of select="$restart"/>
                      </xsl:when>
                      <!-- 29-Nov-18: If no value in $start ENDS-->
                      <xsl:when test="$start = 1">
                        <xsl:value-of select="$restart"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="$start"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:attribute name="start">
                      <xsl:variable name="start">
                        <xsl:number count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"/>
                      </xsl:variable>
                      
                      <xsl:choose>
                        <xsl:when test="$start = 1">
                          <xsl:value-of select="$restart"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="($restart + $start)-1"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>-->
                  <xsl:element name="li">
                    <xsl:attribute name="class">
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyle) > 0">
                          <xsl:value-of select="$paragraphStyle"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <xsl:attribute name="data-name">
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <!-- 7-May-19 -->
                    <xsl:apply-templates/>
                  </xsl:element>
                </xsl:element>
              </xsl:when>
              <xsl:when test="$three = 'lowerLetter'">
                <xsl:element name="ol">
                  <xsl:attribute name="type">
                    <xsl:value-of select="'a'"/>
                  </xsl:attribute>
                  <xsl:variable name="restart">
                    <xsl:if
                      test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                      <xsl:value-of
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                      />
                    </xsl:if>
                  </xsl:variable>
                  <xsl:attribute name="start">
                    <!-- 03-JAN-19 -->
                    <xsl:variable name="start">
                      <xsl:number
                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                        level="any"/>
                    </xsl:variable>

                    <xsl:choose>
                      <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                      <xsl:when test="$start = ''">
                        <xsl:value-of select="$restart"/>
                      </xsl:when>
                      <!-- 29-Nov-18: If no value in $start ENDS-->
                      <xsl:when test="$start = 1">
                        <xsl:value-of select="$restart"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="$start"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:attribute name="start">
                      <xsl:variable name="start">
                        <xsl:number count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"/>
                      </xsl:variable>
                      
                      <xsl:choose>
                        <xsl:when test="$start = 1">
                          <xsl:value-of select="$restart"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="($restart + $start)-1"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>-->
                  <xsl:element name="li">
                    <xsl:attribute name="class" select="$paragraphStyle"/>
                    <xsl:attribute name="data-name">
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <!-- 7-May-19 -->
                    <xsl:apply-templates/>
                  </xsl:element>
                </xsl:element>
              </xsl:when>
              <xsl:when test="$three = 'upperLetter'">
                <xsl:element name="ol">
                  <xsl:attribute name="type">
                    <xsl:value-of select="'A'"/>
                  </xsl:attribute>
                  <xsl:variable name="restart">
                    <xsl:if
                      test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                      <xsl:value-of
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                      />
                    </xsl:if>
                  </xsl:variable>
                  <!--<xsl:attribute name="start">
                      <xsl:variable name="start">
                        <xsl:number count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"/>
                      </xsl:variable>
                      
                      <xsl:choose>
                        <xsl:when test="$start = 1">
                          <xsl:value-of select="$restart"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="($restart + $start)-1"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>-->
                  <xsl:attribute name="start">
                    <!-- 03-JAN-19 -->
                    <xsl:variable name="start">
                      <xsl:number
                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                        level="any"/>
                    </xsl:variable>

                    <xsl:choose>
                      <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                      <xsl:when test="$start = ''">
                        <xsl:value-of select="$restart"/>
                      </xsl:when>
                      <!-- 29-Nov-18: If no value in $start ENDS-->
                      <xsl:when test="$start = 1">
                        <xsl:value-of select="$restart"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="$start"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:element name="li">
                    <xsl:attribute name="class" select="$paragraphStyle"/>
                    <xsl:attribute name="data-name">
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <!-- 7-May-19 -->
                    <xsl:apply-templates/>
                  </xsl:element>
                </xsl:element>
              </xsl:when>
              <xsl:when test="$three = 'decimal'">
                <xsl:choose>
                  <xsl:when test="contains($bulltype, '.%')">

                    <xsl:element name="p">
                      <xsl:attribute name="class" select="$paragraphStyle"/>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:right">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>

                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                            <!-- 16-feb-18: to set override styles -->
                            <xsl:if test="child::w:pPr/w:rPr/w:b">
                              <xsl:choose>
                                <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                                  <xsl:text> font-weight:normal;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text> font-weight:bold;</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:rPr/w:i">
                              <xsl:choose>
                                <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                                  <xsl:text> font-style:normal;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text> font-style:italic;</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:rPr/w:caps">
                              <xsl:choose>
                                <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                                  <xsl:text> text-transform: none !important;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text> text-transform:uppercase;</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <!-- 16-feb-18: to set override styles -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:if test="contains($bulltype, '.%')">
                            <xsl:element name="span">
                              <xsl:call-template name="AutoNumbering">
                                <xsl:with-param name="numId"
                                  select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                <xsl:with-param name="numLevel"
                                  select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:call-template>
                              <xsl:variable name="numID">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                              </xsl:variable>
                              <xsl:variable name="ilvl">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:variable>
                              <xsl:number
                                count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                level="any"/>
                            </xsl:element>
                            <span style="padding-left:5px;"/>
                          </xsl:if>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="ol">
                      <xsl:variable name="x" select="translate($paragraphStyle, '%0123456789', '')"/>
                      <xsl:attribute name="class" select="$paragraphStyle"/>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <xsl:attribute name="type">
                        <xsl:value-of select="'1'"/>
                      </xsl:attribute>
                      <xsl:variable name="restart">
                        <xsl:if
                          test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                          />
                        </xsl:if>
                      </xsl:variable>
                      <!--<xsl:attribute name="start">
                          <xsl:variable name="start">
                            <xsl:number count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"/>
                          </xsl:variable>
                          
                          <xsl:choose>
                            <xsl:when test="$start = 1">
                              <xsl:value-of select="$restart"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="($restart + $start)-1"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>-->
                      <xsl:attribute name="start">
                        <!-- 03-JAN-19 -->
                        <xsl:variable name="start">
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:variable>

                        <xsl:choose>
                          <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                          <xsl:when test="$start = ''">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <!-- 29-Nov-18: If no value in $start ENDS-->
                          <xsl:when test="$start = 1">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$start"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>

                      <xsl:if test="child::w:pPr/w:ind">
                        <xsl:attribute name="indent">
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                          <xsl:text>pt</xsl:text>
                        </xsl:attribute>
                      </xsl:if>
                      <xsl:element name="li">
                        <xsl:attribute name="class" select="$paragraphStyle"/>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:element name="span">
                            <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                            <xsl:call-template name="AutoNumbering">
                              <xsl:with-param name="numId"
                                select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                              <xsl:with-param name="numLevel"
                                select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:call-template>
                            <xsl:variable name="numID">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                            </xsl:variable>
                            <xsl:variable name="ilvl">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:variable>
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:element>
                        </xsl:if>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="$three = 'bullet'">
                <xsl:element name="ul">
                  <xsl:attribute name="style">
                    <xsl:choose>
                      <xsl:when test="$bulltype = '•'">
                        <xsl:value-of select="'list-style-type: disc'"/>
                      </xsl:when>
                      <xsl:when test="$bulltype = 'o'">
                        <xsl:value-of select="'list-style-type: circle'"/>
                      </xsl:when>
                      <xsl:when test="$bulltype = ''">
                        <xsl:value-of select="'list-style-type: square'"/>
                      </xsl:when>
                      <xsl:when test="$bulltype = ''">
                        <xsl:value-of select="'list-style-type: none'"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="$bulltype"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:if test="child::w:pPr/w:ind">
                    <xsl:attribute name="indent">
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                      <xsl:text>pt</xsl:text>
                    </xsl:attribute>
                  </xsl:if>
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->


                  <xsl:choose>
                    <xsl:when test="$bulltype = '•'">
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->

                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <xsl:if test="child::w:bookmarkXXXStart">
                          <xsl:for-each select="child::w:bookmarkStart">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                            <xsl:value-of select="@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:apply-templates/>
                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <xsl:if test="child::w:bookmarkXXXEnd">
                          <xsl:for-each select="child::w:bookmarkEnd">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <xsl:value-of
                              select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:if test="contains(@w:name, 'BM')">
                              <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                            </xsl:if>
                            <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$bulltype = 'o'">
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->

                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <xsl:if test="child::w:bookmarkXXXStart">
                          <xsl:for-each select="child::w:bookmarkStart">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                            <xsl:value-of select="@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:apply-templates/>
                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <xsl:if test="child::w:bookmarkXXXEnd">
                          <xsl:for-each select="child::w:bookmarkEnd">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <xsl:value-of
                              select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:if test="contains(@w:name, 'BM')">
                              <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                            </xsl:if>
                            <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$bulltype = ''">
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->

                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <xsl:if test="child::w:bookmarkXXXStart">
                          <xsl:for-each select="child::w:bookmarkStart">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                            <xsl:value-of select="@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:apply-templates/>
                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <xsl:if test="child::w:bookmarkXXXEnd">
                          <xsl:for-each select="child::w:bookmarkEnd">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <xsl:value-of
                              select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:if test="contains(@w:name, 'BM')">
                              <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                            </xsl:if>
                            <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:element name="li">
                        <!--<xsl:element name="p">-->
                        <!--<xsl:attribute name="class" select="'MsoNormal'"/>-->
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->

                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <xsl:if test="child::w:bookmarkXXXStart">
                          <xsl:for-each select="child::w:bookmarkStart">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                            <xsl:value-of select="@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:apply-templates/>
                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <xsl:if test="child::w:bookmarXXXkEnd">
                          <xsl:for-each select="child::w:bookmarkEnd">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <xsl:value-of
                              select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:if test="contains(@w:name, 'BM')">
                              <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                            </xsl:if>
                            <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:when>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>

            <xsl:element name="p">
              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">
                <xsl:if test="child::w:pPr/w:ind">
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-left:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                          <xsl:text>margin-right:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-left:'</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                        <xsl:text>pt';</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:'</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                          <xsl:text>pt';</xsl:text>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-right:'</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                        <xsl:text>pt';</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:'</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                          <xsl:text>pt';</xsl:text>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                      </xsl:attribute>
                    </xsl:when>
                  </xsl:choose>
                </xsl:if>
                <xsl:if test="child::w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:text>text-align:</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                    <xsl:text>;</xsl:text>
                  </xsl:attribute>
                </xsl:if>

                <xsl:if test="contains($bulltype, '.%')">
                  <xsl:attribute name="type">
                    <xsl:value-of select="$indent"/>
                  </xsl:attribute>
                </xsl:if>
              </xsl:if>
              <xsl:attribute name="class">
                <xsl:choose>
                  <xsl:when test="child::w:pPr/w:pStyle">
                    <xsl:value-of select="child::w:pPr/w:pStyle/@w:val"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoNormal'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:attribute name="data-name">
                <xsl:choose>
                  <xsl:when test="string-length($paragraphStyleName) > 0">
                    <xsl:value-of select="$paragraphStyleName"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoNormal'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <!-- 7-May-19 -->
              <xsl:if test="child::w:pPr/w:rPr/w:color">
                <xsl:choose>
                  <xsl:when test="$color = 'auto'">
                    <!--<xsl:value-of select="'000000'"/>-->
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                    <xsl:value-of select="$color"/>
                    <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:if>
              <xsl:choose>
                <xsl:when test="child::w:pPr/w:pPrChange">
                  <xsl:attribute name="style">
                    <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                  </xsl:attribute>
                  <xsl:apply-templates/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:apply-templates/>
                </xsl:otherwise>
              </xsl:choose>
              <!--<xsl:apply-templates/>-->
              <xsl:if test="w:pPr/w:rPr/w:color">
                <xsl:choose>
                  <xsl:when test="$color = 'auto'">
                    <!--<xsl:value-of select="'000000'"/>-->
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:if>
            </xsl:element>

          </xsl:otherwise>
        </xsl:choose>




      </xsl:when>
      <xsl:otherwise>

        <xsl:element name="p">
          <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">
            <xsl:if test="child::w:pPr/w:ind">
              <xsl:choose>
                <xsl:when
                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:text>margin-left:'</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                    <xsl:text>pt';</xsl:text>
                    <xsl:if test="child::w:pPr/w:ind/@w:right">
                      <xsl:text>margin-right:'</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                      <xsl:text>pt';</xsl:text>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                      <xsl:text>text-indent:'</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                      <xsl:text>pt';</xsl:text>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:jc">
                      <xsl:text>text-align:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                  </xsl:attribute>
                </xsl:when>
                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:text>margin-left:'</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                    <xsl:text>pt';</xsl:text>
                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                      <xsl:text>text-indent:'</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                      <xsl:text>pt';</xsl:text>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:jc">
                      <xsl:text>text-align:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                  </xsl:attribute>
                </xsl:when>
                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:text>margin-right:'</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                    <xsl:text>pt';</xsl:text>
                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                      <xsl:text>text-indent:'</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                      <xsl:text>pt';</xsl:text>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:jc">
                      <xsl:text>text-align:</xsl:text>
                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                  </xsl:attribute>
                </xsl:when>
              </xsl:choose>
            </xsl:if>
            <xsl:if test="child::w:pPr/w:jc">
              <xsl:attribute name="style">
                <xsl:text>text-align:</xsl:text>
                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                <xsl:text>;</xsl:text>
              </xsl:attribute>
            </xsl:if>

            <xsl:if test="contains($bulltype, '.%')">
              <xsl:attribute name="type">
                <xsl:value-of select="$indent"/>
              </xsl:attribute>
            </xsl:if>
          </xsl:if>
          <xsl:attribute name="class">
            <xsl:choose>
              <xsl:when test="child::w:pPr/w:pStyle">
                <xsl:value-of select="child::w:pPr/w:pStyle/@w:val"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="'MsoNormal'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <xsl:attribute name="data-name">
            <xsl:choose>
              <xsl:when test="string-length($paragraphStyleName) > 0">
                <xsl:value-of select="$paragraphStyleName"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="'MsoNormal'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <!-- 7-May-19 -->
          <xsl:if test="child::w:pPr/w:rPr/w:color">
            <xsl:choose>
              <xsl:when test="$color = 'auto'">
                <!--<xsl:value-of select="'000000'"/>-->
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                <xsl:value-of select="$color"/>
                <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
          <xsl:choose>
            <xsl:when test="child::w:pPr/w:pPrChange">
              <xsl:attribute name="style">
                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
              </xsl:attribute>
              <xsl:apply-templates/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:apply-templates/>
            </xsl:otherwise>
          </xsl:choose>
          <!--<xsl:apply-templates/>-->
          <xsl:if test="w:pPr/w:rPr/w:color">
            <xsl:choose>
              <xsl:when test="$color = 'auto'">
                <!--<xsl:value-of select="'000000'"/>-->
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
        </xsl:element>

      </xsl:otherwise>
    </xsl:choose>
    <!--<xsl:element name="p">
    <xsl:apply-templates/>
    </xsl:element>-->
  </xsl:template>

  <xsl:template match="//wp:posOffset"/>

  <xsl:template match="w:p">
    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
    <xsl:variable name="paragraphStyleName">
      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
    </xsl:variable>
    <xsl:variable name="charStyle" select="w:rPr/w:rStyle/@w:val"/>
    <xsl:variable name="color" select="w:rPr/w:color/@w:val"/>
    <xsl:variable name="bold" select="w:rPr/w:b"/>
    <xsl:variable name="numberFormat"
      select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val"/>
    <xsl:variable name="listStyle">
      <xsl:for-each select="//w:numbering/w:abstractNum/w:lvl/w:pStyle[@w:val] = $paragraphStyle">
        <xsl:value-of select="$paragraphStyle"/>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="listStyleBull">
      <xsl:variable name="x"
        select="w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:lvlText/@w:val"/>

      <xsl:value-of
        select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:lvlText/@w:val"
      />
    </xsl:variable>
    <xsl:variable name="listStyleX">
      <xsl:value-of
        select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:lvlText/@w:val"
      />
    </xsl:variable>

    <xsl:variable name="Content" select="self::w:p/w:r"/>
    <!--<xsl:variable name="listStyle">
      <xsl:for-each select="//w:styles/w:style[@w:styleId] = $paragraphStyle">
        <xsl:value-of select="$paragraphStyle"/>             
      </xsl:for-each>
    </xsl:variable>-->
    <!-- Word list for NORMAL styles -->

    <xsl:choose>
      <!-- 19-oct-18: If list changed to number to TEXT -->
      <xsl:when test="w:pPr/w:numPr/w:ilvl[@w:val = '0'] and w:pPr/w:numPr/w:numId[@w:val = '0']">
        <xsl:element name="p">
          <xsl:attribute name="class">
            <xsl:choose>
              <xsl:when test="string-length($paragraphStyle) > 0">
                <xsl:value-of select="$paragraphStyle"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="'MsoNormal'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <xsl:attribute name="data-name">
            <xsl:choose>
              <xsl:when test="string-length($paragraphStyleName) > 0">
                <xsl:value-of select="$paragraphStyleName"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="'MsoNormal'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <!-- 7-May-19 -->
          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
          <xsl:choose>
            <xsl:when
              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
              <xsl:attribute name="style">
                <xsl:text>mso-style-name:</xsl:text>
                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                <xsl:text> !msorm;</xsl:text>

                <xsl:if test="child::w:pPr/w:shd">
                  <xsl:text> background:#</xsl:text>
                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                  <xsl:text>;</xsl:text>
                </xsl:if>
                <!--****** new -->
                <xsl:if test="child::w:pPr/w:ind">
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-left:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:text>margin-right:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-left:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-right:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                  </xsl:choose>
                </xsl:if>
                <xsl:if test="child::w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:text>text-align:</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                    <xsl:text>;</xsl:text>
                  </xsl:attribute>
                </xsl:if>

                <xsl:if test="contains($bulltype, '.%')">
                  <xsl:attribute name="type">
                    <xsl:value-of select="$indent"/>
                  </xsl:attribute>
                </xsl:if>
                <!-- new end -->
              </xsl:attribute>
              <xsl:apply-templates/>
            </xsl:when>
            <xsl:when test="child::w:sdt">
              <xsl:apply-templates/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:apply-templates/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:element>
      </xsl:when>
      <!-- 19-oct-18: If list changed to number to TEXT ends above-->
      <!-- 28-04-17: NEW LIST LOGIC based on Review docx -->
      <xsl:when
        test="//w:stylesXXXX/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:outlineLvl and not(child::w:pPr/w:numPr[w:numId/@w:val = '0'])">
        <xsl:variable name="listLevel">
          <xsl:value-of
            select="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:outlineLvl/@w:val"/>
        </xsl:variable>
        <xsl:variable name="Content" select="self::w:p/w:r"/>
        <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
        <xsl:variable name="paragraphStyleName">
          <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
        </xsl:variable>
        <xsl:variable name="type">
          <xsl:variable name="pSN" select="self::w:p/w:pPr/w:pStyle/@w:val"/>
          <xsl:choose>
            <xsl:when test="contains(lower-case($pSN), 'first')">
              <xsl:value-of select="replace($pSN, '([Ff])irst$', '')"/>
            </xsl:when>
            <xsl:when test="contains(lower-case($pSN), 'last')">
              <xsl:value-of select="replace($pSN, '([Ll])ast$', '')"/>
            </xsl:when>
            <xsl:when test="contains(lower-case($pSN), 'start')">
              <xsl:value-of select="replace($pSN, '([Ss])tart$', '')"/>
            </xsl:when>
            <xsl:when test="contains(lower-case($pSN), 'blt')">
              <xsl:value-of select="'BL'"/>
            </xsl:when>
            <xsl:when test="contains(lower-case($pSN), 'blb')">
              <xsl:value-of select="'BL'"/>
            </xsl:when>
            <xsl:otherwise>
              <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>-->
              <xsl:value-of select="self::w:p/w:pPr/w:pStyle/@w:val"/>
            </xsl:otherwise>
          </xsl:choose>
          <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>-->
        </xsl:variable>

        <xsl:variable name="numberFormat">
          <!--  select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val" -->
          <xsl:choose>
            <xsl:when test="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]">
              <xsl:value-of
                select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val"
              />
            </xsl:when>

            <xsl:when test="//w:style[@w:styleId = $paragraphStyle]">
              <xsl:choose>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId">
                  <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                  <xsl:variable name="numID"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="//w:num[@w:numId = $numID]">
                      <xsl:variable name="abstractnumID"
                        select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                      <!-- Go to abstractID and get the numformat -->
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:when>

                  </xsl:choose>
                </xsl:when>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:basedOn">
                  <xsl:variable name="basedOn"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:basedOn/@w:val"/>
                  <!-- goto baseon style name and get value -->
                  <xsl:choose>
                    <xsl:when test="//w:style[@w:styleId = $basedOn]">
                      <xsl:choose>
                        <xsl:when test="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId">
                          <xsl:variable name="numID"
                            select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>

                          <!--<xsl:value-of select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                          <!-- get the numID and goto abstractnum id in numbering.xml -->
                          <xsl:choose>
                            <xsl:when test="//w:num[@w:numId = $numID]">
                              <xsl:variable name="abstractnumID"
                                select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                              <!-- Go to abstractID and get the numformat -->
                              <xsl:choose>
                                <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                                  <xsl:value-of
                                    select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:numFmt/@w:val"
                                  />
                                </xsl:when>
                              </xsl:choose>
                            </xsl:when>

                          </xsl:choose>


                        </xsl:when>
                        <xsl:otherwise>
                          <!--<xsl:call-template name="fontVariant"/>-->
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise> </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
              </xsl:choose>
            </xsl:when>

          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="numberType">
          <!--  select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val" -->
          <xsl:choose>
            <xsl:when test="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]">
              <xsl:value-of
                select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:lvlText/@w:val"
              />
            </xsl:when>

            <xsl:when test="//w:style[@w:styleId = $paragraphStyle]">
              <xsl:choose>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId">
                  <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                  <xsl:variable name="numID"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="//w:num[@w:numId = $numID]">
                      <xsl:variable name="abstractnumID"
                        select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                      <!-- Go to abstractID and get the numformat -->
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:lvlText/@w:val"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:when>

                  </xsl:choose>
                </xsl:when>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:basedOn">
                  <xsl:variable name="basedOn"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:basedOn/@w:val"/>
                  <!-- goto baseon style name and get value -->
                  <xsl:choose>
                    <xsl:when test="//w:style[@w:styleId = $basedOn]">
                      <xsl:choose>
                        <xsl:when test="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId">
                          <xsl:variable name="numID"
                            select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>

                          <!--<xsl:value-of select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                          <!-- get the numID and goto abstractnum id in numbering.xml -->
                          <xsl:choose>
                            <xsl:when test="//w:num[@w:numId = $numID]">
                              <xsl:variable name="abstractnumID"
                                select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                              <!-- Go to abstractID and get the numformat -->
                              <xsl:choose>
                                <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                                  <xsl:value-of
                                    select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:lvlText/@w:val"
                                  />
                                </xsl:when>
                              </xsl:choose>
                            </xsl:when>

                          </xsl:choose>


                        </xsl:when>
                        <xsl:otherwise>
                          <!--<xsl:call-template name="fontVariant"/>-->
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise> </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
              </xsl:choose>
            </xsl:when>

          </xsl:choose>
        </xsl:variable>
        <!-- 26-July-17: Added for para frame POP -->

        <!--<xsl:if test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] 
          and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]) and not(preceding-sibling::w:p/w:pPr/w:pBdr)"> 
          
          <xsl:text disable-output-escaping="yes">&lt;div style='border:solid; windowtext:1.0pt;padding:</xsl:text>
          <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space,'pt ')"/>
          <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space,'pt ')"/>
          <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space,'pt ')"/>
          <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space,'pt')"/>
          <xsl:text disable-output-escaping="yes">'&gt;</xsl:text>
          
        </xsl:if>-->
        <!-- 26-July-17: Added for para frame END POP-->
        <xsl:choose>
          <xsl:when test="$listLevel = '0'">

            <xsl:choose>
              <!-- Checking if  outlineLvl also has w:numPr-->
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <!-- Checking if  numid is matching in Numbering.xml -->
                <!--<xsl:choose>
                  <xsl:when test=""></xsl:when>
                </xsl:choose>-->
                <one>
                  <xsl:attribute name="class" select="$type"/>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <!--<xsl:attribute name="numberType" select="$numberType"/>-->
                  <xsl:attribute name="numberType">
                    <xsl:choose>
                      <xsl:when test="$numberType = ''">
                        <xsl:value-of select="'null'"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="$numberType"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:variable name="paragraphStyleCheck">
                          <xsl:choose>
                            <xsl:when test="contains($paragraphStyle, 'first^')">
                              <xsl:value-of select="substring-before($paragraphStyle, 'first')"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:variable>
                        <xsl:choose>
                          <xsl:when
                            test="preceding::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyleCheck]] and preceding::w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']">

                            <xsl:variable name="countNum">
                              <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                                from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                                level="any"/>
                            </xsl:variable>
                            <xsl:value-of select="number($countNum) + 1"/>
                          </xsl:when>
                          <xsl:otherwise>

                            <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                              from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                              level="any"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p/w:pPr[w:pStyle/@w:val= $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']" level="any"/>-->
                      </xsl:when>
                      <!--<xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>-->
                      <xsl:otherwise>
                        <xsl:choose>
                          <xsl:when
                            test="preceding::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]] and preceding::w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']">
                            <xsl:variable name="countNum">
                              <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                                from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                                level="any"/>
                            </xsl:variable>
                            <xsl:value-of select="number($countNum) + 1"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                              from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                              level="any"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p/w:pPr[w:pStyle/@w:val= $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']" level="any"/>
                        </xsl:variable>                        
                        <xsl:value-of select="number($countNum) + 1"/>-->
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </one>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>

          <xsl:when test="$listLevel = '1'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <two>
                  <xsl:attribute name="class" select="$type"/>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>

                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </two>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '2'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <three>
                  <xsl:attribute name="class" select="$type"/>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </three>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '3'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <four>
                  <xsl:attribute name="class" select="$type"/>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </four>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '4'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <five>
                  <xsl:attribute name="class" select="$type"/>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </five>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '5'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <six>
                  <xsl:attribute name="class" select="$type"/>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </six>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '6'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <seven>
                  <xsl:attribute name="class" select="$type"/>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </seven>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '7'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <eight>
                  <xsl:attribute name="class" select="$type"/>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </eight>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '8'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <nine>
                  <xsl:attribute name="class" select="$type"/>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </nine>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '9'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <ten>
                  <xsl:attribute name="class" select="$type"/>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </ten>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>
                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '10'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <eleven>
                  <xsl:attribute name="class" select="$type"/>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </eleven>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>
                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <!-- Checking for dummy paragraphs -->
            <!-- 26-July-17: Added for para frame @@@@ POP-->
            <!--<xsl:if test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] 
              and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]) and not(preceding-sibling::w:p/w:pPr/w:pBdr)">                  
              
              <xsl:text disable-output-escaping="yes">&lt;div style='border:solid; windowtext:1.0pt;padding:</xsl:text>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space,'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space,'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space,'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space,'pt')"/>
              <xsl:text disable-output-escaping="yes">'&gt;</xsl:text>
            </xsl:if>-->
            <!-- 26-July-17: Added for para frame END POP-->
            <xsl:element name="p">
              <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
              <xsl:attribute name="class">
                <xsl:choose>
                  <xsl:when test="string-length($paragraphStyle) > 0">
                    <xsl:value-of select="$paragraphStyle"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoNormal'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:attribute name="data-name">
                <xsl:choose>
                  <xsl:when test="string-length($paragraphStyleName) > 0">
                    <xsl:value-of select="$paragraphStyleName"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoNormal'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <!-- 7-May-19 -->
              <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
              <xsl:choose>
                <xsl:when
                  test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                  <xsl:attribute name="style">
                    <xsl:text>mso-style-name:</xsl:text>
                    <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                    <xsl:text> !msorm;</xsl:text>

                    <xsl:if test="child::w:pPr/w:shd">
                      <xsl:text> background:#</xsl:text>
                      <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <!--****** new -->
                    <xsl:if test="child::w:pPr/w:ind">
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-left:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                            <xsl:text>pt;</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:right">
                              <xsl:text>margin-right:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-left:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                            <xsl:text>pt;</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                          </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-right:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                            <xsl:text>pt;</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                          </xsl:attribute>
                        </xsl:when>
                      </xsl:choose>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>text-align:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                        <xsl:text>;</xsl:text>
                      </xsl:attribute>
                    </xsl:if>
                    <xsl:if test="w:pPr/w:rPr/w:color">
                      <xsl:choose>
                        <xsl:when test="$color = 'auto'">
                          <!-- <xsl:value-of select="'000000'"/>-->
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                          <xsl:choose>
                            <xsl:when test="$color = 'auto'">
                              <xsl:value-of select="'000000'"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="$color"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                      <!--<xsl:value-of select="w:pPr/w:rPr/w:color/@w:val"/>-->

                    </xsl:if>
                    <xsl:if test="contains($bulltype, '.%')">
                      <xsl:attribute name="type">
                        <xsl:value-of select="$indent"/>
                      </xsl:attribute>
                    </xsl:if>
                    <!-- new end -->
                  </xsl:attribute>
                  <xsl:apply-templates/>
                </xsl:when>
                <xsl:when test="child::w:sdt">
                  <xsl:apply-templates/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:apply-templates/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:element>

            <!-- 26-July-17: Added for para frame -->

            <!--<xsl:if test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]))">
              
              <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
              
            </xsl:if>-->
            <!-- 26-July-17: Added for para frame END-->
          </xsl:otherwise>
        </xsl:choose>
        <!-- 26-July-17: Added for para frame -->
        <!-- xsl:if test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]) or not(following-sibling::*[1][self::w:p/w:pPr/w:pBdr])) -->
        <!--<xsl:if test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] 
          and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']])) and not(following-sibling::w:p/w:pPr/w:pBdr)">                      
          <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
          
        </xsl:if>-->
        <!-- 26-July-17: Added for para frame END-->
      </xsl:when>
      <!-- END for 28-04-17: NEW LIST LOGIC based on Review docx  -->

      <!-- 28-04-17: NEW LIST LOGIC based on Review docx -->
      <xsl:when
        test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:outlineLvl and not(child::w:pPr/w:numPr[w:numId/@w:val = '0'])">
        <xsl:variable name="listLevel">
          <xsl:value-of
            select="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:outlineLvl/@w:val"/>
        </xsl:variable>
        <xsl:variable name="Content" select="self::w:p/w:r"/>
        <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
        <xsl:variable name="paragraphStyleName">
          <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
        </xsl:variable>
        <xsl:variable name="type">
          <xsl:variable name="pSN" select="self::w:p/w:pPr/w:pStyle/@w:val"/>
          <xsl:choose>
            <xsl:when test="contains(lower-case($pSN), 'first')">
              <xsl:value-of select="replace($pSN, '([Ff])irst$', '')"/>
            </xsl:when>
            <xsl:when test="contains(lower-case($pSN), 'last')">
              <xsl:value-of select="replace($pSN, '([Ll])ast$', '')"/>
            </xsl:when>
            <xsl:when test="contains(lower-case($pSN), 'start')">
              <xsl:value-of select="replace($pSN, '([Ss])tart$', '')"/>
            </xsl:when>
            <xsl:otherwise>
              <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>-->
              <xsl:value-of select="self::w:p/w:pPr/w:pStyle/@w:val"/>
            </xsl:otherwise>
          </xsl:choose>
          <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>-->
        </xsl:variable>

        <xsl:variable name="numberFormat">
          <!--  select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val" -->
          <xsl:choose>
            <xsl:when test="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]">
              <xsl:value-of
                select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val"
              />
            </xsl:when>

            <xsl:when test="//w:style[@w:styleId = $paragraphStyle]">
              <xsl:choose>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId">
                  <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                  <xsl:variable name="numID"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="//w:num[@w:numId = $numID]">
                      <xsl:variable name="abstractnumID"
                        select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                      <!-- Go to abstractID and get the numformat -->
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:when>

                  </xsl:choose>
                </xsl:when>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:basedOn">
                  <xsl:variable name="basedOn"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:basedOn/@w:val"/>
                  <!-- goto baseon style name and get value -->
                  <xsl:choose>
                    <xsl:when test="//w:style[@w:styleId = $basedOn]">
                      <xsl:choose>
                        <xsl:when test="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId">
                          <xsl:variable name="numID"
                            select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>

                          <!--<xsl:value-of select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                          <!-- get the numID and goto abstractnum id in numbering.xml -->
                          <xsl:choose>
                            <xsl:when test="//w:num[@w:numId = $numID]">
                              <xsl:variable name="abstractnumID"
                                select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                              <!-- Go to abstractID and get the numformat -->
                              <xsl:choose>
                                <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                                  <xsl:value-of
                                    select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:numFmt/@w:val"
                                  />
                                </xsl:when>
                              </xsl:choose>
                            </xsl:when>

                          </xsl:choose>


                        </xsl:when>
                        <xsl:otherwise>
                          <!--<xsl:call-template name="fontVariant"/>-->
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise> </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
              </xsl:choose>
            </xsl:when>

          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="numberType">
          <!--  select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val" -->
          <xsl:choose>
            <xsl:when test="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]">
              <xsl:value-of
                select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:lvlText/@w:val"
              />
            </xsl:when>

            <xsl:when test="//w:style[@w:styleId = $paragraphStyle]">
              <xsl:choose>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId">
                  <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                  <xsl:variable name="numID"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="//w:num[@w:numId = $numID]">
                      <xsl:variable name="abstractnumID"
                        select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                      <!-- Go to abstractID and get the numformat -->
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:lvlText/@w:val"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:when>

                  </xsl:choose>
                </xsl:when>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:basedOn">
                  <xsl:variable name="basedOn"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:basedOn/@w:val"/>
                  <!-- goto baseon style name and get value -->
                  <xsl:choose>
                    <xsl:when test="//w:style[@w:styleId = $basedOn]">
                      <xsl:choose>
                        <xsl:when test="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId">
                          <xsl:variable name="numID"
                            select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>

                          <!--<xsl:value-of select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                          <!-- get the numID and goto abstractnum id in numbering.xml -->
                          <xsl:choose>
                            <xsl:when test="//w:num[@w:numId = $numID]">
                              <xsl:variable name="abstractnumID"
                                select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                              <!-- Go to abstractID and get the numformat -->
                              <xsl:choose>
                                <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                                  <xsl:value-of
                                    select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:lvlText/@w:val"
                                  />
                                </xsl:when>
                              </xsl:choose>
                            </xsl:when>

                          </xsl:choose>


                        </xsl:when>
                        <xsl:otherwise>
                          <!--<xsl:call-template name="fontVariant"/>-->
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise> </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
              </xsl:choose>
            </xsl:when>

          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
        <xsl:variable name="ilvlCount">
          <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
          <xsl:choose>
            <xsl:when test="$a = 0">
              <xsl:value-of select="'1'"/>
            </xsl:when>
            <xsl:when test="$a = 1">
              <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
            </xsl:when>
            <xsl:when test="$a = 2">
              <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
            </xsl:when>
            <xsl:when test="$a = 3">
              <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
            </xsl:when>
            <xsl:when test="$a = 4">
              <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
            </xsl:when>
          </xsl:choose>
        </xsl:variable>

        <xsl:variable name="two">
          <xsl:if test="//w:numbering/w:num/@w:numId = $one">
            <xsl:value-of select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="numhead"
          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>
        <xsl:variable name="listStyle2" select="lower-case($listStyle)"/>
        <xsl:variable name="bulltype"
          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>
        <xsl:variable name="bulltypeFont"
          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
        <xsl:choose>
          <xsl:when test="$listLevel = '0'">
            <xsl:choose>
              <xsl:when test="contains($bulltype, ' ')">
                <xsl:text>&#x000A;</xsl:text>
                <xsl:element name="p">
                  <xsl:attribute name="class" select="$paragraphStyle"/>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">
                    <xsl:if test="child::w:pPr/w:ind">
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-left:'</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                            <xsl:text>pt';</xsl:text>
                            <xsl:text>margin-right:'</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                            <xsl:text>pt';</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:'</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt';</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-left:'</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                            <xsl:text>pt';</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:'</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt';</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-right:'</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                            <xsl:text>pt';</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:'</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt';</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:attribute>
                        </xsl:when>
                      </xsl:choose>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>text-align:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                        <xsl:text>;</xsl:text>
                      </xsl:attribute>
                    </xsl:if>

                    <xsl:if test="contains($bulltype, '.%')">
                      <xsl:attribute name="type">
                        <xsl:value-of select="$indent"/>
                      </xsl:attribute>
                    </xsl:if>
                  </xsl:if>
                  <!--<xsl:attribute name="class" select="'span'"/>-->
                  <xsl:if test="contains($bulltype, '.%')">
                    <xsl:element name="span">
                      <xsl:call-template name="AutoNumbering">
                        <xsl:with-param name="numId" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                        <xsl:with-param name="numLevel" select="child::w:pPr/w:numPr/w:ilvl/@w:val"
                        />
                      </xsl:call-template>
                      <xsl:variable name="numID">
                        <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                      </xsl:variable>
                      <xsl:variable name="ilvl">
                        <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                      </xsl:variable>
                      <xsl:number
                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                        level="any"/>
                    </xsl:element>
                    <span style="padding-left:5px;"/>
                  </xsl:if>
                  <xsl:apply-templates/>
                </xsl:element>
              </xsl:when>
              <!-- Checking if  outlineLvl also has w:numPr-->
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">


                <one>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <!-- 10-MAY-19  -->
                        <xsl:message><xsl:value-of select="$countNum"/>:<xsl:value-of
                            select="$countNum2"/></xsl:message>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </one>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="start">
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            />
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:jc">
                                          <xsl:text>text-align:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                          <xsl:text>;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>

                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '1'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <two>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </two>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:jc">
                                          <xsl:text>text-align:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                          <xsl:text>;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '2'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <three>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </three>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:jc">
                                          <xsl:text>text-align:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                          <xsl:text>;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '3'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <four>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </four>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:jc">
                                          <xsl:text>text-align:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                          <xsl:text>;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '4'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <five>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </five>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:jc">
                                          <xsl:text>text-align:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                          <xsl:text>;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '5'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <six>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </six>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:jc">
                                          <xsl:text>text-align:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                          <xsl:text>;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '6'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <seven>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </seven>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:jc">
                                          <xsl:text>text-align:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                          <xsl:text>;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->

                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '7'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <eight>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </eight>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:jc">
                                          <xsl:text>text-align:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                          <xsl:text>;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '8'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <nine>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </nine>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:jc">
                                          <xsl:text>text-align:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                          <xsl:text>;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>

                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '9'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <ten>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </ten>
              </xsl:when>
              <xsl:otherwise>

                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '10'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <eleven>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </eleven>
              </xsl:when>
              <xsl:otherwise>

                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>

        </xsl:choose>
      </xsl:when>
      <!-- END for 28-04-17: NEW LIST LOGIC based on Review docx  -->
      <!-- 27-08-18: LIST in styles -->
      <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
        <xsl:variable name="listLevel">
          <xsl:value-of
            select="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:lvl/@w:val"/>
        </xsl:variable>
        <xsl:variable name="Content" select="self::w:p/w:r"/>
        <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
        <xsl:variable name="paragraphStyleName">
          <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
        </xsl:variable>
        <xsl:variable name="type">
          <xsl:variable name="pSN" select="self::w:p/w:pPr/w:pStyle/@w:val"/>
          <xsl:choose>
            <xsl:when test="contains(lower-case($pSN), 'first')">
              <xsl:value-of select="replace($pSN, '([Ff])irst$', '')"/>
            </xsl:when>
            <xsl:when test="contains(lower-case($pSN), 'last')">
              <xsl:value-of select="replace($pSN, '([Ll])ast$', '')"/>
            </xsl:when>
            <xsl:when test="contains(lower-case($pSN), 'start')">
              <xsl:value-of select="replace($pSN, '([Ss])tart$', '')"/>
            </xsl:when>
            <xsl:otherwise>
              <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>-->
              <xsl:value-of select="self::w:p/w:pPr/w:pStyle/@w:val"/>
            </xsl:otherwise>
          </xsl:choose>
          <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>-->
        </xsl:variable>

        <xsl:variable name="numberFormat">
          <!--  select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val" -->
          <xsl:choose>
            <xsl:when test="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]">
              <xsl:value-of
                select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val"
              />
            </xsl:when>

            <xsl:when test="//w:style[@w:styleId = $paragraphStyle]">
              <xsl:choose>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId">
                  <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                  <xsl:variable name="numID"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="//w:num[@w:numId = $numID]">
                      <xsl:variable name="abstractnumID"
                        select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                      <!-- Go to abstractID and get the numformat -->
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:when>

                  </xsl:choose>
                </xsl:when>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:basedOn">
                  <xsl:variable name="basedOn"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:basedOn/@w:val"/>
                  <!-- goto baseon style name and get value -->
                  <xsl:choose>
                    <xsl:when test="//w:style[@w:styleId = $basedOn]">
                      <xsl:choose>
                        <xsl:when test="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId">
                          <xsl:variable name="numID"
                            select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>

                          <!--<xsl:value-of select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                          <!-- get the numID and goto abstractnum id in numbering.xml -->
                          <xsl:choose>
                            <xsl:when test="//w:num[@w:numId = $numID]">
                              <xsl:variable name="abstractnumID"
                                select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                              <!-- Go to abstractID and get the numformat -->
                              <xsl:choose>
                                <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                                  <xsl:value-of
                                    select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:numFmt/@w:val"
                                  />
                                </xsl:when>
                              </xsl:choose>
                            </xsl:when>

                          </xsl:choose>


                        </xsl:when>
                        <xsl:otherwise>
                          <!--<xsl:call-template name="fontVariant"/>-->
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise> </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
              </xsl:choose>
            </xsl:when>

          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="numberType">
          <!--  select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val" -->
          <xsl:choose>
            <xsl:when test="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]">
              <xsl:value-of
                select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:lvlText/@w:val"
              />
            </xsl:when>

            <xsl:when test="//w:style[@w:styleId = $paragraphStyle]">
              <xsl:choose>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId">
                  <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                  <xsl:variable name="numID"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr/w:numId/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="//w:num[@w:numId = $numID]">
                      <xsl:variable name="abstractnumID"
                        select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                      <!-- Go to abstractID and get the numformat -->
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:lvlText/@w:val"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:when>

                  </xsl:choose>
                </xsl:when>
                <xsl:when test="//w:style[@w:styleId = $paragraphStyle]/w:basedOn">
                  <xsl:variable name="basedOn"
                    select="//w:style[@w:styleId = $paragraphStyle]/w:basedOn/@w:val"/>
                  <!-- goto baseon style name and get value -->
                  <xsl:choose>
                    <xsl:when test="//w:style[@w:styleId = $basedOn]">
                      <xsl:choose>
                        <xsl:when test="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId">
                          <xsl:variable name="numID"
                            select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>

                          <!--<xsl:value-of select="//w:style[@w:styleId = $basedOn]/w:pPr/w:numPr/w:numId/@w:val"/>-->
                          <!-- get the numID and goto abstractnum id in numbering.xml -->
                          <xsl:choose>
                            <xsl:when test="//w:num[@w:numId = $numID]">
                              <xsl:variable name="abstractnumID"
                                select="//w:num[@w:numId = $numID]/w:abstractNumId/@w:val"/>
                              <!-- Go to abstractID and get the numformat -->
                              <xsl:choose>
                                <xsl:when test="//w:abstractNum[@w:abstractNumId = $abstractnumID]">
                                  <xsl:value-of
                                    select="//w:abstractNum[@w:abstractNumId = $abstractnumID]/w:lvl[1]/w:lvlText/@w:val"
                                  />
                                </xsl:when>
                              </xsl:choose>
                            </xsl:when>

                          </xsl:choose>


                        </xsl:when>
                        <xsl:otherwise>
                          <!--<xsl:call-template name="fontVariant"/>-->
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise> </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
              </xsl:choose>
            </xsl:when>

          </xsl:choose>
        </xsl:variable>

        <xsl:choose>

          <xsl:when
            test="$listLevel = '0' or not(//w:style[@w:styleId = $paragraphStyleName]/w:pPr/w:numPr/w:lvl)">
            <xsl:choose>
              <!-- Checking if  outlineLvl also has w:numPr-->
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <one>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </one>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="start">
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            />
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->

                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '1'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <two>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </two>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '2'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <three>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </three>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '3'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <four>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </four>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$bulltype"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <!-- 15-JUNE-18: to get the bookmark start -->

                                <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                                <!-- 15-JUNE-18: to get the bookmark end -->

                                <!-- to get the bookmark end ENDS-->
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '4'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <five>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </five>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <!--<xsl:when test="$bulltype = ''">
                                  <xsl:value-of select="$bulltype"/>  
                                </xsl:when>-->
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="$bulltype != ''">
                                    <xsl:value-of select="$bulltype"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'list-style-type: none'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                                <!--<xsl:value-of select="'list-style-type: none'"/>  -->
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '5'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <six>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </six>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <!--<xsl:when test="$bulltype = ''">
                                  <xsl:value-of select="$bulltype"/>  
                                </xsl:when>-->
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="$bulltype != ''">
                                    <xsl:value-of select="$bulltype"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'list-style-type: none'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                                <!--<xsl:value-of select="'list-style-type: none'"/>  -->
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '6'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <seven>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </seven>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <!--<xsl:when test="$bulltype = ''">
                                  <xsl:value-of select="$bulltype"/>  
                                </xsl:when>-->
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="$bulltype != ''">
                                    <xsl:value-of select="$bulltype"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'list-style-type: none'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                                <!--<xsl:value-of select="'list-style-type: none'"/>  -->
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '7'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <eight>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </eight>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <!--<xsl:when test="$bulltype = ''">
                                  <xsl:value-of select="$bulltype"/>  
                                </xsl:when>-->
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="$bulltype != ''">
                                    <xsl:value-of select="$bulltype"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'list-style-type: none'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                                <!--<xsl:value-of select="'list-style-type: none'"/>  -->
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '8'">
            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <nine>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </nine>
              </xsl:when>
              <xsl:when test="child::w:pPr/w:numPr">
                <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
                <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:variable name="ilvlCount">
                  <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                  <xsl:choose>
                    <xsl:when test="$a = 0">
                      <xsl:value-of select="'1'"/>
                    </xsl:when>
                    <xsl:when test="$a = 1">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 2">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 3">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                    </xsl:when>
                    <xsl:when test="$a = 4">
                      <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                    </xsl:when>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="two">
                  <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                    <xsl:value-of
                      select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
                  </xsl:if>
                </xsl:variable>
                <xsl:variable name="numhead"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>


                <xsl:choose>
                  <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                    <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <xsl:variable name="three">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                          <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                          <xsl:choose>
                            <xsl:when
                              test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                              />
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                    <xsl:variable name="bulltype">
                      <xsl:choose>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                          <xsl:value-of
                            select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                          />
                        </xsl:when>
                      </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="bulltypeFont"
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                    <xsl:variable name="paragraphStyleName">
                      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$three = 'upperRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'I'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-I</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerRoman'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'i'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-i</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'lowerLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'a'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-a</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:1px;"&gt;&lt;/span&gt;</xsl:text>-->
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                        <!--</xsl:element>-->
                      </xsl:when>
                      <xsl:when test="$three = 'upperLetter'">
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'A'"/>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen-A</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:element>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$three = 'decimal'">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '.%')">
                            <xsl:element name="p">
                              <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                                <xsl:if test="child::w:pPr/w:ind">

                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:'</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt';</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:'</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt';</xsl:text>
                                        </xsl:if>
                                        <!--<xsl:if test="child::w:pPr/w:jc">
                                              <xsl:text>style=text-align:</xsl:text>
                                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                              <xsl:text>;</xsl:text>   
                                            </xsl:if>-->
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>

                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                              </xsl:if>

                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->
                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="prevCounts">
                                    <xsl:value-of>
                                      <xsl:number
                                        count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                        level="any"/>
                                    </xsl:value-of>
                                  </xsl:variable>
                                  <xsl:value-of select="$indent + 1"/>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:text>.</xsl:text>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                                <span style="padding-left:5px;"/>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="ol">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when
                                    test="contains($bulltype, '(') and contains($bulltype, ')')">
                                    <xsl:text>opencloseParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '(')">
                                    <xsl:text>openParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ')')">
                                    <xsl:text>closeParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, '[')">
                                    <xsl:text>openSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="contains($bulltype, ']')">
                                    <xsl:text>closeSParen</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:choose>
                                      <xsl:when test="string-length($paragraphStyleName) > 0">
                                        <xsl:value-of select="$paragraphStyleName"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'MsoNormal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:if test="child::w:pPr/w:ind">
                                <xsl:attribute name="indent">
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:attribute>
                              </xsl:if>
                              <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                              <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                              <xsl:attribute name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                />
                              </xsl:attribute>
                              <!--</xsl:if>-->

                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:element name="span">
                                    <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                    <xsl:call-template name="AutoNumbering">
                                      <xsl:with-param name="numId"
                                        select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                      <xsl:with-param name="numLevel"
                                        select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:call-template>
                                    <xsl:variable name="numID">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"
                                      />
                                    </xsl:variable>
                                    <xsl:variable name="ilvl">
                                      <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                    </xsl:variable>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:element>
                                </xsl:if>
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:when test="$three = 'bullet'">
                        <xsl:element name="ul">
                          <xsl:attribute name="style">
                            <xsl:choose>
                              <xsl:when test="$bulltype = '•'">
                                <xsl:value-of select="'list-style-type: disc'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = 'o'">
                                <xsl:value-of select="'list-style-type: circle'"/>
                              </xsl:when>
                              <xsl:when test="$bulltype = ''">
                                <xsl:value-of select="'list-style-type: square'"/>
                              </xsl:when>
                              <!--<xsl:when test="$bulltype = ''">
                                  <xsl:value-of select="$bulltype"/>  
                                </xsl:when>-->
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="$bulltype != ''">
                                    <xsl:value-of select="$bulltype"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'list-style-type: none'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                                <!--<xsl:value-of select="'list-style-type: none'"/>  -->
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="li">
                                <xsl:attribute name="class">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyle) > 0">
                                      <xsl:value-of select="$paragraphStyle"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <xsl:attribute name="data-name">
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'MsoNormal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:attribute>
                                <!-- 7-May-19 -->
                                <xsl:apply-templates/>
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="p">
                          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                              <xsl:attribute name="style">
                                <xsl:text>mso-style-name:</xsl:text>
                                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                <xsl:text> !msorm;</xsl:text>
                                <xsl:if test="child::w:pPr/w:shd">
                                  <xsl:text> background:#</xsl:text>
                                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                                <!--****** new -->
                                <xsl:if test="child::w:pPr/w:ind">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:right">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                      <xsl:attribute name="style">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                          <xsl:text>text-indent:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                        </xsl:if>
                                      </xsl:attribute>
                                    </xsl:when>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:attribute>
                                </xsl:if>
                                <xsl:if test="w:pPr/w:rPr/w:color">
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <!-- <xsl:value-of select="'000000'"/>-->
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <xsl:when test="$color = 'auto'">
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:attribute>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:attribute name="style">
                                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                            <xsl:value-of select="$color"/>
                                          </xsl:attribute>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:if>
                                <xsl:if test="contains($bulltype, '.%')">
                                  <xsl:attribute name="type">
                                    <xsl:value-of select="$indent"/>
                                  </xsl:attribute>
                                </xsl:if>
                                <!-- new end -->
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:when test="child::w:sdt">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:apply-templates/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="'000000'"/>
                                      </xsl:attribute>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:attribute name="style">
                                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                        <xsl:value-of select="$color"/>
                                      </xsl:attribute>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>

                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '9'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <ten>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </ten>
              </xsl:when>
              <xsl:otherwise>

                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$listLevel = '10'">

            <xsl:choose>
              <xsl:when test="//w:styles/w:style[@w:styleId = $paragraphStyle]/w:pPr/w:numPr">
                <eleven>
                  <xsl:attribute name="listtype" select="$type"/>
                  <xsl:attribute name="numberFormat" select="$numberFormat"/>
                  <xsl:attribute name="numberType" select="$numberType"/>
                  <xsl:attribute name="start">
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="countNum">
                          <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                            from="w:p/w:pPr[w:pStyle/@w:val = $paragraphStyle]/w:numPr/w:ilvl[@w:val = '0']"
                            level="any"/>
                        </xsl:variable>
                        <xsl:variable name="countNum2" select="number($countNum) + 1"/>
                        <xsl:value-of select="$countNum2"/>
                        <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!--<xsl:apply-templates select="$Content"/>-->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:shd">
                      <xsl:element name="span">
                        <xsl:attribute name="style">
                          <xsl:text>background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:apply-templates/>-->
                </eleven>
              </xsl:when>
              <xsl:otherwise>

                <xsl:element name="p">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <!--<xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>   
                                </xsl:if>-->
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>

        </xsl:choose>
      </xsl:when>
      <!-- 27-08-18: LIST in styles -->
      <xsl:when test="child::w:sdt">
        <xsl:choose>
          <!-- 13-sep-16 i've added XXXXXXX due to feedback by Prsanth on mail hu 10/13/2016 12:01 PM-->
          <!-- due to  w:pPr/w:numPr/w:numId/@w:val value is not available in document.xml-->
          <!-- 01-nov-16: Uncommented due to feedback by Prasanthn, regarding list missing. See mail Tue 11/1/2016 11:58 AM -->
          <xsl:when test="child::w:pPr/w:numPr">
            <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
            <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
            <xsl:variable name="two">
              <!--<xsl:if test="//w:num/@w:numId = $one">-->
              <xsl:value-of select="//w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
              <!--</xsl:if>-->
            </xsl:variable>




            <xsl:if test="//w:abstractNum/@w:abstractNumId = $two">
              <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
              <xsl:variable name="three">
                <xsl:choose>
                  <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                    <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                    <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                    <xsl:choose>
                      <xsl:when
                        test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                        <xsl:value-of
                          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                        />
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of
                          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                        />
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                    <xsl:value-of
                      select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                    />
                  </xsl:when>
                </xsl:choose>
              </xsl:variable>
              <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
              <xsl:variable name="bulltype">
                <xsl:choose>
                  <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
                    <xsl:value-of
                      select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                    />
                  </xsl:when>
                  <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
                    <xsl:value-of
                      select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"
                    />
                  </xsl:when>
                </xsl:choose>
              </xsl:variable>
              <xsl:choose>
                <xsl:when test="$three = 'upperRoman'">
                  <xsl:element name="ol">
                    <xsl:attribute name="type">
                      <xsl:value-of select="'I'"/>
                    </xsl:attribute>
                    <xsl:element name="li">
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:element>
                </xsl:when>
                <xsl:when test="$three = 'lowerRoman'">
                  <xsl:element name="ol">
                    <xsl:attribute name="type">
                      <xsl:value-of select="'i'"/>
                    </xsl:attribute>
                    <xsl:element name="li">
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:element>
                </xsl:when>
                <xsl:when test="$three = 'lowerLetter'">
                  <xsl:element name="ol">
                    <xsl:attribute name="type">
                      <xsl:value-of select="'a'"/>
                    </xsl:attribute>
                    <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                      <xsl:text disable-output-escaping="yes">" start="</xsl:text>
                      <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                      <xsl:text disable-output-escaping="yes">"</xsl:text>
                    </xsl:if>
                    <xsl:element name="li">
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:element>
                </xsl:when>
                <xsl:when test="$three = 'upperLetter'">
                  <xsl:element name="ol">
                    <xsl:attribute name="type">
                      <xsl:value-of select="'A'"/>
                    </xsl:attribute>
                    <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                      <xsl:attribute name="start">
                        <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                      </xsl:attribute>
                    </xsl:if>
                    <xsl:element name="li">
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:element>
                </xsl:when>
                <xsl:when test="$three = 'decimal'">
                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '.%')">
                      <xsl:element name="p">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:choose>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-left:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt';</xsl:text>
                                  <xsl:text>margin-right:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt';</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:'</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt';</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-left:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt';</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:'</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt';</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-right:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt';</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:'</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt';</xsl:text>
                                  </xsl:if>
                                  <!-- <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>style=text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>   
                                  </xsl:if>-->
                                </xsl:attribute>
                              </xsl:when>
                            </xsl:choose>
                          </xsl:if>
                          <xsl:if test="child::w:pPr/w:jc">
                            <xsl:attribute name="style">
                              <xsl:text>text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:attribute>
                          </xsl:if>

                          <xsl:if test="contains($bulltype, '.%')">
                            <xsl:attribute name="type">
                              <xsl:value-of select="$indent"/>
                            </xsl:attribute>
                          </xsl:if>
                        </xsl:if>
                        <!--<xsl:attribute name="class" select="'span'"/>-->
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:element name="span">
                            <xsl:call-template name="AutoNumbering">
                              <xsl:with-param name="numId"
                                select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                              <xsl:with-param name="numLevel"
                                select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:call-template>
                            <xsl:variable name="numID">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                            </xsl:variable>
                            <xsl:variable name="ilvl">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:variable>
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:element>
                          <span style="padding-left:5px;"/>
                        </xsl:if>
                        <xsl:apply-templates/>
                      </xsl:element>

                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:element name="ol">
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:attribute name="indent">
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                            <xsl:text>pt</xsl:text>
                          </xsl:attribute>
                        </xsl:if>
                        <xsl:element name="li">
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <xsl:if test="contains($bulltype, '.%')">
                            <xsl:element name="span">
                              <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                              <xsl:call-template name="AutoNumbering">
                                <xsl:with-param name="numId"
                                  select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                <xsl:with-param name="numLevel"
                                  select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:call-template>
                              <xsl:variable name="numID">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                              </xsl:variable>
                              <xsl:variable name="ilvl">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:variable>
                              <xsl:number
                                count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                level="any"/>
                            </xsl:element>
                          </xsl:if>
                          <xsl:apply-templates/>
                        </xsl:element>
                      </xsl:element>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:when test="$three = 'bullet'">
                  <xsl:element name="ul">
                    <xsl:attribute name="style">
                      <xsl:choose>
                        <xsl:when test="$bulltype = '•'">
                          <xsl:value-of select="'list-style-type: disc'"/>
                        </xsl:when>
                        <xsl:when test="$bulltype = 'o'">
                          <xsl:value-of select="'list-style-type: circle'"/>
                        </xsl:when>
                        <xsl:when test="$bulltype = ''">
                          <xsl:value-of select="'list-style-type: square'"/>
                        </xsl:when>
                        <!--<xsl:when test="$bulltype = ''">
                                  <xsl:value-of select="$bulltype"/>  
                                </xsl:when>-->
                        <xsl:otherwise>
                          <xsl:choose>
                            <xsl:when test="$bulltype != ''">
                              <xsl:value-of select="$bulltype"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'list-style-type: none'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!--<xsl:value-of select="'list-style-type: none'"/>  -->
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <xsl:attribute name="class">
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyle) > 0">
                          <xsl:value-of select="$paragraphStyle"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <xsl:attribute name="data-name">
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <!-- 7-May-19 -->
                    <xsl:choose>
                      <xsl:when test="$bulltype = '•'">
                        <xsl:element name="li">
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <xsl:apply-templates/>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$bulltype = 'o'">
                        <xsl:element name="li">
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <xsl:apply-templates/>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="$bulltype = ''">
                        <xsl:element name="li">
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <xsl:apply-templates/>
                        </xsl:element>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="li">
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <xsl:apply-templates/>
                        </xsl:element>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:element>
                </xsl:when>
              </xsl:choose>
            </xsl:if>
          </xsl:when>
          <xsl:otherwise>
            <xsl:element name="p">
              <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
              <xsl:attribute name="class">
                <xsl:choose>
                  <xsl:when test="string-length($paragraphStyle) > 0">
                    <xsl:value-of select="$paragraphStyle"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoNormal'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:attribute name="data-name">
                <xsl:choose>
                  <xsl:when test="string-length($paragraphStyleName) > 0">
                    <xsl:value-of select="$paragraphStyleName"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoNormal'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <!-- 7-May-19 -->
              <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
              <xsl:choose>
                <xsl:when
                  test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                  <xsl:attribute name="style">
                    <xsl:text>mso-style-name:</xsl:text>
                    <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                    <xsl:text> !msorm;</xsl:text>
                    <xsl:if test="child::w:pPr/w:shd">
                      <xsl:text> background:#</xsl:text>
                      <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <!--****** new -->
                    <xsl:if test="child::w:pPr/w:ind">
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-left:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                            <xsl:text>pt;</xsl:text>
                            <xsl:text>margin-right:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                            <xsl:text>pt;</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                          </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-left:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                            <xsl:text>pt;</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                          </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-right:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                            <xsl:text>pt;</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <!--<xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>   
                            </xsl:if>-->
                          </xsl:attribute>
                        </xsl:when>
                      </xsl:choose>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>text-align:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                        <xsl:text>;</xsl:text>
                      </xsl:attribute>
                    </xsl:if>
                    <xsl:if test="w:pPr/w:rPr/w:color">
                      <xsl:choose>
                        <xsl:when test="$color = 'auto'">
                          <!-- <xsl:value-of select="'000000'"/>-->
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                          <xsl:choose>
                            <xsl:when test="$color = 'auto'">
                              <xsl:value-of select="'000000'"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="$color"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                      <!--<xsl:value-of select="w:pPr/w:rPr/w:color/@w:val"/>-->

                      <!--<xsl:choose>
                    <xsl:when test="w:rPr/w:sz | w:rPr/w:rFonts | w:rPr/w:position">
                      <xsl:text disable-output-escaping="yes"> </xsl:text>  
                    </xsl:when> 
                    <xsl:otherwise>
                      <xsl:text disable-output-escaping="yes"> style="</xsl:text> 
                    </xsl:otherwise>
                  </xsl:choose>
                  <!-\-<xsl:text disable-output-escaping="yes"> style="'</xsl:text>  -\->
                  <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                  <xsl:value-of select="$color"/>
                  <xsl:text></xsl:text>  -->

                    </xsl:if>
                    <xsl:if test="contains($bulltype, '.%')">
                      <xsl:attribute name="type">
                        <xsl:value-of select="$indent"/>
                      </xsl:attribute>
                    </xsl:if>
                    <!-- new end -->
                  </xsl:attribute>
                  <xsl:apply-templates/>
                </xsl:when>
                <xsl:when test="child::w:sdt">
                  <xsl:apply-templates/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:apply-templates/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:element>

          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="w:r/w:drawing">
        <xsl:element name="p">
          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
          <xsl:attribute name="class" select="'MsoNormal'"/>
          <xsl:attribute name="data-name" select="'MsoNormal'"/>

          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
          <xsl:choose>
            <xsl:when
              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
              <xsl:attribute name="style">
                <xsl:text>mso-style-name:</xsl:text>
                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                <xsl:text> !msorm;</xsl:text>

                <xsl:if test="child::w:pPr/w:shd">
                  <xsl:text> background:#</xsl:text>
                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                  <xsl:text>;</xsl:text>
                </xsl:if>
                <!--****** new -->
                <xsl:if test="child::w:pPr/w:ind">

                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-left:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:text>margin-right:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!-- <xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-left:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!-- <xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>margin-right:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                        <xsl:text>pt;</xsl:text>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <!-- <xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>   
                        </xsl:if>-->
                      </xsl:attribute>
                    </xsl:when>
                  </xsl:choose>
                </xsl:if>
                <xsl:if test="child::w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:text>text-align:</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                    <xsl:text>;</xsl:text>
                  </xsl:attribute>
                </xsl:if>
                <xsl:if test="w:pPr/w:rPr/w:color">
                  <xsl:choose>
                    <xsl:when test="$color = 'auto'">
                      <!-- <xsl:value-of select="'000000'"/>-->
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                      <xsl:choose>
                        <xsl:when test="$color = 'auto'">
                          <xsl:value-of select="'000000'"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="$color"/>
                        </xsl:otherwise>
                      </xsl:choose>
                      <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>

                </xsl:if>
                <xsl:if test="contains($bulltype, '.%')">
                  <xsl:attribute name="type">
                    <xsl:value-of select="$indent"/>
                  </xsl:attribute>
                </xsl:if>
                <!-- new end -->
              </xsl:attribute>
              <xsl:apply-templates/>
            </xsl:when>
            <xsl:when test="child::w:sdt">
              <xsl:apply-templates/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:apply-templates/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:element>

      </xsl:when>
      <xsl:when test="w:pPr/w:pStyle">
        <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
        <xsl:variable name="paragraphStyleName">
          <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
        </xsl:variable>
        <xsl:variable name="numberFormat"
          select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyleName]/w:numFmt/@w:val"/>
        <xsl:variable name="listStyle">
          <xsl:for-each
            select="//w:numbering/w:abstractNum/w:lvl/w:pStyle[@w:val = $paragraphStyleName]">
            <xsl:value-of select="$paragraphStyle"/>
          </xsl:for-each>
        </xsl:variable>
        <xsl:variable name="listStyleBull">
          <xsl:variable name="x"
            select="w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyleName]/w:lvlText/@w:val"/>

          <xsl:value-of
            select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:lvlText/@w:val"
          />
        </xsl:variable>
        <xsl:variable name="listStyleX">
          <xsl:value-of
            select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyleName]/w:lvlText/@w:val"
          />
        </xsl:variable>
        <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
        <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
        <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
        <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
        <xsl:variable name="ilvlCount">
          <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
          <xsl:choose>
            <xsl:when test="$a = 0">
              <xsl:value-of select="'1'"/>
            </xsl:when>
            <xsl:when test="$a = 1">
              <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
            </xsl:when>
            <xsl:when test="$a = 2">
              <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
            </xsl:when>
            <xsl:when test="$a = 3">
              <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
            </xsl:when>
            <xsl:when test="$a = 4">
              <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
            </xsl:when>
          </xsl:choose>
        </xsl:variable>
        <xsl:variable name="two">
          <xsl:if test="//w:numbering/w:num/@w:numId = $one">
            <xsl:value-of select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
          </xsl:if>
        </xsl:variable>
        <xsl:variable name="numhead"
          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>
        <xsl:variable name="listStyle2" select="lower-case($listStyle)"/>
        <xsl:variable name="bulltype"
          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>
        <xsl:variable name="bulltypeFont"
          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>

        <xsl:choose>
          <xsl:when test="child::w:pPr/w:numPr">
            <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
            <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
            <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
            <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
            <xsl:variable name="ilvlCount">
              <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
              <xsl:choose>
                <xsl:when test="$a = 0">
                  <xsl:value-of select="'1'"/>
                </xsl:when>
                <xsl:when test="$a = 1">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                </xsl:when>
                <xsl:when test="$a = 2">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                </xsl:when>
                <xsl:when test="$a = 3">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                </xsl:when>
                <xsl:when test="$a = 4">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="two">
              <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                <xsl:value-of select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
              </xsl:if>
            </xsl:variable>
            <xsl:variable name="numhead"
              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>

            <!-- 26-July-17: Added for para frame POP -->

            <xsl:if
              test="
                w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')]
                and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']])">

              <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
              <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>

            </xsl:if>
            <!-- 26-July-17: Added for para frame END POP-->
            <xsl:choose>
              <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                <!-- 28-Dec-18: If no ilvl in document.xml, i take the first w:lvl in numbering.xml -->

                <xsl:variable name="three">
                  <xsl:choose>
                    <xsl:when test="$ilvl != ''">
                      <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                      <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                      <xsl:choose>
                        <xsl:when
                          test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                          />
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                <xsl:variable name="bulltype">
                  <xsl:choose>
                    <xsl:when test="$ilvl != ''">
                      <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                      <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                      <xsl:choose>
                        <xsl:when
                          test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"
                          />
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:lvlText/@w:val"
                          />
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:lvlText/@w:val"
                      />
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <xsl:variable name="bulltypeFont"
                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>
                <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                <xsl:variable name="paragraphStyleName">
                  <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                </xsl:variable>

                <xsl:choose>
                  <xsl:when test="$three = 'upperRoman'">
                    <xsl:element name="ol">
                      <xsl:attribute name="type">
                        <xsl:value-of select="'I'"/>
                      </xsl:attribute>
                      <!-- 4-oct-18: Added for HARI -->
                      <xsl:attribute name="data-ilvl"
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/@w:ilvl"/>
                      <xsl:attribute name="data-numFmt" select="$three"/>
                      <xsl:attribute name="data-lvlText" select="$bulltype"/>
                      <!-- 4-oct-18: Added for HARI -->
                      <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                            <xsl:text>opencloseParen-I</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '(')">
                            <xsl:text>openParen-I</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ')')">
                            <xsl:text>closeParen-I</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '[')">
                            <xsl:text>openSParen-I</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ']')">
                            <xsl:text>closeSParen-I</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'Normal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:variable name="restart">
                        <xsl:if
                          test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                          />
                        </xsl:if>
                      </xsl:variable>
                      <xsl:attribute name="start">
                        <xsl:variable name="start">
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:variable>

                        <xsl:choose>
                          <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                          <xsl:when test="$start = ''">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <!-- 29-Nov-18: If no value in $start ENDS-->
                          <xsl:when test="$start = 1">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$start"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:element name="li">
                        <xsl:attribute name="class" select="$paragraphStyle"/>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->

                        <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                              <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                            </xsl:when>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:if test="child::w:pPr/w:ind/@w:left">
                                  <xsl:text>margin-left:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                              <xsl:attribute name="style">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:attribute name="style">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>

                        <!-- 26-JUNE-18: Added rpr info. inside ppr ENDS -->
                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <!--<xsl:if test="child::w:bookmarkStart">
                                <xsl:for-each select="child::w:bookmarkStart">
                                  <xsl:variable name="bmId" select="@w:id"/>
                                  <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                  <!-\-<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-\->
                                  <xsl:value-of select="@w:name"/>
                                  <xsl:text disable-output-escaping="yes">"</xsl:text>
                                  <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>   
                                  <xsl:if test="$bmId = //w:bookmarkEnd/@w:id">
                                  </xsl:if>
                                </xsl:for-each>
                              </xsl:if>-->
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:element name="span">
                            <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                            <xsl:call-template name="AutoNumbering">
                              <xsl:with-param name="numId"
                                select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                              <xsl:with-param name="numLevel"
                                select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:call-template>
                            <xsl:variable name="numID">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                            </xsl:variable>
                            <xsl:variable name="ilvl">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:variable>
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:element>
                        </xsl:if>
                        <xsl:apply-templates/>
                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <!--<xsl:if test="child::w:bookmarkEnd">
                                <xsl:for-each select="child::w:bookmarkEnd">
                                  <xsl:variable name="bmId" select="@w:id"/>                                      
                                  <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                  <xsl:value-of select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                                  <xsl:text disable-output-escaping="yes">"</xsl:text>
                                  <xsl:if test="contains(@w:name, 'BM')">
                                    <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                                  </xsl:if>    
                                  <!-\- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-\->
                                  <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>        
                                </xsl:for-each>
                              </xsl:if>-->
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:element>
                    <!--</xsl:element>-->
                  </xsl:when>
                  <xsl:when test="$three = 'lowerRoman'">
                    <xsl:element name="ol">
                      <xsl:attribute name="type">
                        <xsl:value-of select="'i'"/>
                      </xsl:attribute>
                      <!-- 4-oct-18: Added for HARI -->
                      <xsl:attribute name="data-ilvl"
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/@w:ilvl"/>
                      <xsl:attribute name="data-numFmt" select="$three"/>
                      <xsl:attribute name="data-lvlText" select="$bulltype"/>
                      <!-- 4-oct-18: Added for HARI -->
                      <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                            <xsl:text>opencloseParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '(')">
                            <xsl:text>openParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ')')">
                            <xsl:text>closeParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '[')">
                            <xsl:text>openSParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ']')">
                            <xsl:text>closeSParen-i</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'Normal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:variable name="restart">
                        <xsl:if
                          test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                          />
                        </xsl:if>
                      </xsl:variable>
                      <xsl:attribute name="start">
                        <xsl:variable name="start">
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:variable>

                        <xsl:choose>
                          <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                          <xsl:when test="$start = ''">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <!-- 29-Nov-18: If no value in $start ENDS-->
                          <xsl:when test="$start = 1">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$start"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:element name="li">
                        <xsl:attribute name="class" select="$paragraphStyle"/>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->

                        <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                              <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                            </xsl:when>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:if test="child::w:pPr/w:ind/@w:left">
                                  <xsl:text>margin-left:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                              <xsl:attribute name="style">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:attribute name="style">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>


                        <!-- 26-JUNE-18: Added rpr info. inside ppr ENDS -->
                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <xsl:if test="child::w:bookmarkXXXStart">
                          <xsl:for-each select="child::w:bookmarkStart">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                            <xsl:value-of select="@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:element name="span">
                            <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                            <xsl:call-template name="AutoNumbering">
                              <xsl:with-param name="numId"
                                select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                              <xsl:with-param name="numLevel"
                                select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:call-template>
                            <xsl:variable name="numID">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                            </xsl:variable>
                            <xsl:variable name="ilvl">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:variable>
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:element>
                        </xsl:if>
                        <xsl:apply-templates/>
                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <xsl:if test="child::w:bookmarkXXXEnd">
                          <xsl:for-each select="child::w:bookmarkEnd">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <xsl:value-of
                              select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:if test="contains(@w:name, 'BM')">
                              <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                            </xsl:if>
                            <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:element>
                    <!--</xsl:element>-->
                  </xsl:when>
                  <xsl:when test="$three = 'lowerLetter'">
                    <xsl:element name="ol">
                      <xsl:attribute name="type">
                        <xsl:value-of select="'a'"/>
                      </xsl:attribute>
                      <!-- 4-oct-18: Added for HARI -->
                      <xsl:attribute name="data-ilvl"
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/@w:ilvl"/>
                      <xsl:attribute name="data-numFmt" select="$three"/>
                      <xsl:attribute name="data-lvlText" select="$bulltype"/>
                      <!-- 4-oct-18: Added for HARI -->
                      <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                            <xsl:text>opencloseParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '(')">
                            <xsl:text>openParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ')')">
                            <xsl:text>closeParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '[')">
                            <xsl:text>openSParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ']')">
                            <xsl:text>closeSParen-a</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'Normal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:variable name="restart">
                        <xsl:if
                          test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                          />
                        </xsl:if>
                      </xsl:variable>
                      <xsl:attribute name="start">
                        <xsl:variable name="start">
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:variable>

                        <xsl:choose>
                          <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                          <xsl:when test="$start = ''">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <!-- 29-Nov-18: If no value in $start ENDS-->
                          <xsl:when test="$start = 1">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$start"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:element name="li">
                        <xsl:attribute name="class" select="$paragraphStyle"/>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->


                        <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                              <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                            </xsl:when>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:if test="child::w:pPr/w:ind/@w:left">
                                  <xsl:text>margin-left:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                              <xsl:attribute name="style">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:attribute name="style">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <!-- 26-JUNE-18: Added rpr info. inside ppr ENDS -->
                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <xsl:if test="child::w:bookmarkXXXStart">
                          <xsl:for-each select="child::w:bookmarkStart">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                            <xsl:value-of select="@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:element name="span">
                            <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                            <xsl:call-template name="AutoNumbering">
                              <xsl:with-param name="numId"
                                select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                              <xsl:with-param name="numLevel"
                                select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:call-template>
                            <xsl:variable name="numID">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                            </xsl:variable>
                            <xsl:variable name="ilvl">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:variable>
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:element>
                        </xsl:if>
                        <xsl:apply-templates/>

                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <xsl:if test="child::w:bookmarkXXXEnd">
                          <xsl:for-each select="child::w:bookmarkEnd">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <xsl:value-of
                              select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:if test="contains(@w:name, 'BM')">
                              <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                            </xsl:if>
                            <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:element>
                    <!--</xsl:element>-->
                  </xsl:when>
                  <xsl:when test="$three = 'upperLetter'">
                    <xsl:element name="ol">
                      <xsl:attribute name="type">
                        <xsl:value-of select="'A'"/>
                      </xsl:attribute>
                      <!-- 4-oct-18: Added for HARI -->
                      <xsl:attribute name="data-ilvl"
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/@w:ilvl"/>
                      <xsl:attribute name="data-numFmt" select="$three"/>
                      <xsl:attribute name="data-lvlText" select="$bulltype"/>
                      <!-- 4-oct-18: Added for HARI -->
                      <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                            <xsl:text>opencloseParen-A</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '(')">
                            <xsl:text>openParen-A</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ')')">
                            <xsl:text>closeParen-A</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '[')">
                            <xsl:text>openSParen-A</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ']')">
                            <xsl:text>closeSParen-A</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'Normal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:variable name="restart">
                        <xsl:if
                          test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                          />
                        </xsl:if>
                      </xsl:variable>
                      <xsl:attribute name="start">
                        <xsl:variable name="start">
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:variable>

                        <xsl:choose>
                          <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                          <xsl:when test="$start = ''">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <!-- 29-Nov-18: If no value in $start ENDS-->
                          <xsl:when test="$start = 1">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$start"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:element name="li">
                        <xsl:attribute name="class" select="$paragraphStyle"/>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->


                        <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                              <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                            </xsl:when>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:if test="child::w:pPr/w:ind/@w:left">
                                  <xsl:text>margin-left:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                              <xsl:attribute name="style">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:attribute name="style">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>

                        <!-- 26-JUNE-18: Added rpr info. inside ppr ENDS -->
                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <xsl:if test="child::w:bookmarkXXXStart">
                          <xsl:for-each select="child::w:bookmarkStart">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                            <xsl:value-of select="@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:element name="span">
                            <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                            <xsl:call-template name="AutoNumbering">
                              <xsl:with-param name="numId"
                                select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                              <xsl:with-param name="numLevel"
                                select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:call-template>
                            <xsl:variable name="numID">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                            </xsl:variable>
                            <xsl:variable name="ilvl">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:variable>
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:element>
                        </xsl:if>
                        <xsl:apply-templates/>
                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <xsl:if test="child::w:bookmarkXXXEnd">
                          <xsl:for-each select="child::w:bookmarkEnd">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <xsl:value-of
                              select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:if test="contains(@w:name, 'BM')">
                              <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                            </xsl:if>
                            <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="$three = 'decimal'">
                    <xsl:choose>
                      <xsl:when test="contains($bulltype, '.%')">
                        <xsl:element name="p">
                          <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                            <xsl:if test="child::w:pPr/w:ind">
                              <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                  <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                </xsl:when>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="child::w:pPr/w:ind/@w:left">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:right">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>

                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                          </xsl:if>

                          <xsl:attribute name="class" select="$paragraphStyle"/>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <xsl:if test="contains($bulltype, '.%')">

                            <!--<span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>
                                      .<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>
                                    </span>-->

                            <xsl:element name="spanDigit">
                              <!-- This is actually coded as spanDigit -->
                              <xsl:variable name="numID">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                              </xsl:variable>
                              <xsl:variable name="prevCounts">
                                <xsl:value-of>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:value-of>
                              </xsl:variable>
                              <xsl:value-of select="$indent + 1"/>
                              <!--<xsl:call-template name="AutoNumbering">
                                        <xsl:with-param name="numId" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                        <xsl:with-param name="numLevel" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                        <xsl:with-param name="numhead1" select="//w:abstractNum/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>
                                        <xsl:with-param name="count" select="$ilvlCount"/>
                                      </xsl:call-template>-->
                              <xsl:variable name="numID">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                              </xsl:variable>
                              <xsl:variable name="ilvl">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:variable>
                              <xsl:text>.</xsl:text>
                              <xsl:variable name="secondDigit">
                                <!--<xsl:number count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val =$ilvl]" level="any" />-->
                                <!-- 4-FEB-19: Commented due to CJCHE_2017_1087_Original_V0 - Manuscript CJCE.docx -->
                                <xsl:number
                                  count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle] and w:pPr/w:numPr/w:numId[@w:val = $one]]"
                                  from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]"
                                  level="any"/>
                              </xsl:variable>

                              <xsl:value-of select="number($secondDigit)"/>
                              <!--<xsl:number count="w:p[w:pPr/w:numPr/w:numId/@w:val =$numID and w:pPr/w:numPr/w:ilvl/@w:val =$ilvl]" level="any" />-->
                              <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                            </xsl:element>
                            <span style="padding-left:5px;"/>
                          </xsl:if>
                          <xsl:apply-templates/>

                        </xsl:element>
                        <xsl:text>&#x000A;</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="ol">
                          <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[') and contains($bulltype, ']')">
                                <xsl:text>opencloseSParen</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'Normal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 4-oct-18: Added for HARI -->
                          <xsl:attribute name="data-ilvl"
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/@w:ilvl"/>
                          <xsl:attribute name="data-numFmt" select="$three"/>
                          <xsl:attribute name="data-lvlText" select="$bulltype"/>
                          <!-- 4-oct-18: Added for HARI -->

                          <xsl:attribute name="type">
                            <xsl:value-of select="'1'"/>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                            <xsl:choose>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                              </xsl:when>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                <xsl:attribute name="style">
                                  <xsl:if test="child::w:pPr/w:ind/@w:left">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:right">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:left">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-left:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:right">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                <xsl:attribute name="style">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                <xsl:attribute name="style">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:attribute>
                              </xsl:when>
                            </xsl:choose>
                          </xsl:if>
                          <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                          <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                          <xsl:variable name="restart">
                            <xsl:choose>
                              <xsl:when test="$ilvl != ''">
                                <xsl:value-of
                                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                                />
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of
                                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:start/@w:val"
                                />
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:variable>
                          <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                          <xsl:attribute name="start">
                            <xsl:variable name="start">
                              <xsl:number
                                count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                level="any"/>
                            </xsl:variable>

                            <xsl:choose>
                              <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                              <xsl:when test="$start = ''">
                                <xsl:value-of select="$restart"/>
                              </xsl:when>
                              <!-- 29-Nov-18: If no value in $start ENDS-->
                              <xsl:when test="$start = 1">
                                <xsl:value-of select="$restart"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$start"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:text>&#x000A;</xsl:text>
                          <xsl:element name="li">
                            <xsl:attribute name="class" select="$paragraphStyleName"/>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->


                            <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                  <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                </xsl:when>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="child::w:pPr/w:ind/@w:left">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:right">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>

                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <xsl:apply-templates/>
                            <!-- to get the bookmark end -->
                            <xsl:if test="child::w:bookmarkXXXEnd">
                              <xsl:for-each select="child::w:bookmarkEnd">
                                <xsl:variable name="bmId" select="@w:id"/>
                                <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                <xsl:value-of
                                  select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                                <xsl:text disable-output-escaping="yes">"</xsl:text>
                                <xsl:if test="contains(@w:name, 'BM')">
                                  <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                                </xsl:if>
                                <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                                <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                              </xsl:for-each>
                            </xsl:if>
                          </xsl:element>
                        </xsl:element>
                        <xsl:text>&#x000A;</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:when test="$three = 'bullet'">
                    <xsl:text>&#x000A;</xsl:text>
                    <xsl:element name="ul">
                      <!-- 4-oct-18: Added for HARI -->
                      <xsl:attribute name="data-ilvl"
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/@w:ilvl"/>
                      <xsl:attribute name="data-numFmt" select="$three"/>
                      <xsl:attribute name="data-lvlText" select="$bulltype"/>
                      <!-- 4-oct-18: Added for HARI -->
                      <xsl:attribute name="style">
                        <xsl:choose>
                          <xsl:when test="$bulltype = '•'">
                            <xsl:value-of select="'list-style-type: disc'"/>
                          </xsl:when>
                          <xsl:when test="$bulltype = 'o'">
                            <xsl:value-of select="'list-style-type: circle'"/>
                          </xsl:when>
                          <xsl:when test="$bulltype = ''">
                            <xsl:value-of select="'list-style-type: square'"/>
                          </xsl:when>
                          <!--<xsl:when test="$bulltype = ''">
                                  <xsl:value-of select="$bulltype"/>  
                                </xsl:when>-->
                          <xsl:otherwise>
                            <xsl:choose>
                              <xsl:when test="$bulltype != ''">
                                <xsl:value-of select="$bulltype"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'list-style-type: none'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                            <!--<xsl:value-of select="'list-style-type: none'"/>  -->
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <!-- 06-May-19: Getting original style name from STYLE.xml due to issue in Cicerone docx -->
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'Normal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->

                      <xsl:choose>
                        <xsl:when test="$bulltype = '•'">
                          <xsl:text>&#x000A;</xsl:text>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'Normal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->


                            <!--cut-->
                            <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                            <xsl:choose>
                              <xsl:when
                                test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                                <xsl:attribute name="style">
                                  <xsl:text>mso-style-name:</xsl:text>
                                  <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                  <xsl:text> !msorm;</xsl:text>

                                  <xsl:if test="child::w:pPr/w:shd">
                                    <xsl:text> background:#</xsl:text>
                                    <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>

                                  <!--****** new -->
                                  <xsl:if test="child::w:pPr/w:ind">
                                    <xsl:choose>
                                      <xsl:when
                                        test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-left:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                      <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-left:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                      <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:if>
                                  <xsl:if test="w:pPr/w:rPr/w:color">
                                    <xsl:choose>
                                      <xsl:when test="$color = 'auto'">
                                        <!-- <xsl:value-of select="'000000'"/>-->
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                                        <xsl:choose>
                                          <xsl:when test="$color = 'auto'">
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:when>
                                          <xsl:otherwise>
                                            <xsl:value-of select="$color"/>
                                          </xsl:otherwise>
                                        </xsl:choose>
                                        <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="contains($bulltype, '.%')">
                                    <xsl:attribute name="type">
                                      <xsl:value-of select="$indent"/>
                                    </xsl:attribute>
                                  </xsl:if>
                                  <!-- new end -->

                                  <!-- 16-feb-18: to set override styles -->
                                  <xsl:if test="child::w:pPr/w:rPr/w:b">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                                        <xsl:text> font-weight:normal;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> font-weight:bold;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:rPr/w:i">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                                        <xsl:text> font-style:normal;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> font-style:italic;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:rPr/w:caps">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                                        <xsl:text> text-transform: none !important;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> text-transform:uppercase;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <!-- 16-feb-18: to set override styles -->
                                </xsl:attribute>
                                <xsl:apply-templates/>
                              </xsl:when>
                              <xsl:when test="child::w:sdt">
                                <xsl:apply-templates/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:apply-templates/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:element>
                        </xsl:when>
                        <xsl:when test="$bulltype = 'o'">
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'Normal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->


                            <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                            <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                            <xsl:choose>
                              <xsl:when
                                test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                                <xsl:attribute name="style">
                                  <xsl:text>mso-style-name:</xsl:text>
                                  <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                  <xsl:text> !msorm;</xsl:text>

                                  <xsl:if test="child::w:pPr/w:shd">
                                    <xsl:text> background:#</xsl:text>
                                    <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                  <!--****** new -->
                                  <xsl:if test="child::w:pPr/w:ind">
                                    <xsl:choose>
                                      <xsl:when
                                        test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-left:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                      <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-left:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                      <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:if>
                                  <xsl:if test="w:pPr/w:rPr/w:color">
                                    <xsl:choose>
                                      <xsl:when test="$color = 'auto'">
                                        <!-- <xsl:value-of select="'000000'"/>-->
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                                        <xsl:choose>
                                          <xsl:when test="$color = 'auto'">
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:when>
                                          <xsl:otherwise>
                                            <xsl:value-of select="$color"/>
                                          </xsl:otherwise>
                                        </xsl:choose>
                                        <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="contains($bulltype, '.%')">
                                    <xsl:attribute name="type">
                                      <xsl:value-of select="$indent"/>
                                    </xsl:attribute>
                                  </xsl:if>
                                  <!-- new end -->
                                  <!-- 16-feb-18: to set override styles -->
                                  <xsl:if test="child::w:pPr/w:rPr/w:b">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                                        <xsl:text> font-weight:normal;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> font-weight:bold;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:rPr/w:i">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                                        <xsl:text> font-style:normal;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> font-style:italic;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:rPr/w:caps">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                                        <xsl:text> text-transform: none !important;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> text-transform:uppercase;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <!-- 16-feb-18: to set override styles -->
                                </xsl:attribute>
                                <xsl:apply-templates/>
                              </xsl:when>
                              <xsl:when test="child::w:sdt">
                                <xsl:apply-templates/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:apply-templates/>
                              </xsl:otherwise>
                            </xsl:choose>

                          </xsl:element>
                        </xsl:when>
                        <xsl:when test="$bulltype = ''">
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'Normal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->


                            <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                            <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                            <xsl:choose>
                              <xsl:when
                                test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                                <xsl:attribute name="style">
                                  <xsl:text>mso-style-name:</xsl:text>
                                  <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                  <xsl:text> !msorm;</xsl:text>

                                  <xsl:if test="child::w:pPr/w:shd">
                                    <xsl:text> background:#</xsl:text>
                                    <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                  <!--****** new -->
                                  <xsl:if test="child::w:pPr/w:ind">
                                    <xsl:choose>
                                      <xsl:when
                                        test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-left:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                      <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-left:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                      <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:if>
                                  <xsl:if test="w:pPr/w:rPr/w:color">
                                    <xsl:choose>
                                      <xsl:when test="$color = 'auto'">
                                        <!-- <xsl:value-of select="'000000'"/>-->
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                                        <xsl:choose>
                                          <xsl:when test="$color = 'auto'">
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:when>
                                          <xsl:otherwise>
                                            <xsl:value-of select="$color"/>
                                          </xsl:otherwise>
                                        </xsl:choose>
                                        <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="contains($bulltype, '.%')">
                                    <xsl:attribute name="type">
                                      <xsl:value-of select="$indent"/>
                                    </xsl:attribute>
                                  </xsl:if>
                                  <!-- new end -->
                                  <!-- 16-feb-18: to set override styles -->
                                  <xsl:if test="child::w:pPr/w:rPr/w:b">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                                        <xsl:text> font-weight:normal;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> font-weight:bold;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:rPr/w:i">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                                        <xsl:text> font-style:normal;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> font-style:italic;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:rPr/w:caps">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                                        <xsl:text> text-transform: none !important;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> text-transform:uppercase;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <!-- 16-feb-18: to set override styles -->
                                </xsl:attribute>
                                <xsl:apply-templates/>
                              </xsl:when>
                              <xsl:when test="child::w:sdt">
                                <xsl:apply-templates/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:apply-templates/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:element>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text>&#x000A;</xsl:text>
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'Normal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->



                            <!-- 26-JUNE-18: Added rpr info. inside ppr -->

                            <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                            <xsl:choose>
                              <xsl:when
                                test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                                <xsl:attribute name="style">
                                  <xsl:text>mso-style-name:</xsl:text>
                                  <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                                  <xsl:text> !msorm;</xsl:text>

                                  <xsl:if test="child::w:pPr/w:shd">
                                    <xsl:text> background:#</xsl:text>
                                    <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                  <!--****** new -->
                                  <xsl:if test="child::w:pPr/w:ind">
                                    <xsl:choose>
                                      <xsl:when
                                        test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-left:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                      <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-left:</xsl:text>
                                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                      <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                        <xsl:attribute name="style">
                                          <xsl:text>margin-right:</xsl:text>
                                          <xsl:value-of
                                            select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                          <xsl:text>pt;</xsl:text>
                                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                            <xsl:text>text-indent:</xsl:text>
                                            <xsl:value-of
                                              select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                            <xsl:text>pt;</xsl:text>
                                          </xsl:if>
                                          <xsl:if test="child::w:pPr/w:jc">
                                            <xsl:text>style=text-align:</xsl:text>
                                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                            <xsl:text>;</xsl:text>
                                          </xsl:if>
                                        </xsl:attribute>
                                      </xsl:when>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:if>
                                  <xsl:if test="w:pPr/w:rPr/w:color">
                                    <xsl:choose>
                                      <xsl:when test="$color = 'auto'">
                                        <!-- <xsl:value-of select="'000000'"/>-->
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                                        <xsl:choose>
                                          <xsl:when test="$color = 'auto'">
                                            <xsl:value-of select="'000000'"/>
                                          </xsl:when>
                                          <xsl:otherwise>
                                            <xsl:value-of select="$color"/>
                                          </xsl:otherwise>
                                        </xsl:choose>
                                        <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="contains($bulltype, '.%')">
                                    <xsl:attribute name="type">
                                      <xsl:value-of select="$indent"/>
                                    </xsl:attribute>
                                  </xsl:if>
                                  <!-- new end -->

                                  <!-- 16-feb-18: to set override styles -->
                                  <xsl:if test="child::w:pPr/w:rPr/w:b">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                                        <xsl:text> font-weight:normal;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> font-weight:bold;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:rPr/w:i">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                                        <xsl:text> font-style:normal;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> font-style:italic;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:rPr/w:caps">
                                    <xsl:choose>
                                      <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                                        <xsl:text> text-transform: none !important;</xsl:text>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:text> text-transform:uppercase;</xsl:text>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:if>
                                  <!-- 16-feb-18: to set override styles -->
                                </xsl:attribute>
                                <xsl:apply-templates/>
                              </xsl:when>
                              <xsl:when test="child::w:sdt">
                                <xsl:apply-templates/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:apply-templates/>
                              </xsl:otherwise>
                            </xsl:choose>


                          </xsl:element>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                    <xsl:text>&#x000A;</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>&#x000A;</xsl:text>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                      <xsl:attribute name="class" select="$paragraphStyleName"/>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                  <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                </xsl:when>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">

                                  <xsl:if test="child::w:pPr/w:ind/@w:left">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:right">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>

                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left">
                                  <xsl:text>margin-left:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>



                            <!-- new end -->
                            <!-- 16-feb-18: to set override styles -->
                            <xsl:if test="child::w:pPr/w:rPr/w:b">
                              <xsl:choose>
                                <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                                  <xsl:text> font-weight:normal;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text> font-weight:bold;</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:rPr/w:i">
                              <xsl:choose>
                                <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                                  <xsl:text> font-style:normal;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text> font-style:italic;</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:rPr/w:caps">
                              <xsl:choose>
                                <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                                  <xsl:text> text-transform: none !important;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text> text-transform:uppercase;</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <!-- 16-feb-18: to set override styles -->
                          </xsl:attribute>
                          <xsl:if test="contains($bulltype, '.%')">
                            <xsl:attribute name="type">
                              <xsl:value-of select="$indent"/>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>
                    <xsl:text>&#x000A;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>

              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                  <xsl:attribute name="class" select="$paragraphStyle"/>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left">
                              <xsl:text>margin-left:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt;</xsl:text>
                              <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="child::w:pPr/w:jc">
                                <xsl:text>style=text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right">
                              <xsl:text>margin-right:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                              <xsl:text>pt;</xsl:text>
                              <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="child::w:pPr/w:jc">
                                <xsl:text>style=text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>
                        <xsl:if test="w:pPr/w:rPr/w:color">
                          <xsl:choose>
                            <xsl:when test="$color = 'auto'">
                              <!-- <xsl:value-of select="'000000'"/>-->
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <xsl:value-of select="'000000'"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="$color"/>
                                </xsl:otherwise>
                              </xsl:choose>
                              <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>

                        </xsl:if>
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                        <!-- 16-feb-18: to set override styles -->
                        <xsl:if test="child::w:pPr/w:rPr/w:b">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                              <xsl:text> font-weight:normal;</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = 'false']">
                              <xsl:text> font-weight:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-weight:bold;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:i">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                              <xsl:text> font-style:normal;</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = 'false']">
                              <xsl:text> font-style:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-style:italic;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:caps">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                              <xsl:text> text-transform: none !important;</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = 'false']">
                              <xsl:text> text-transform: none !important;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> text-transform:uppercase;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <!-- 16-feb-18: to set override styles -->
                      </xsl:attribute>

                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>

            <!-- 26-July-17: Added for para frame -->
            <!--13-AUG-18: xsl:if test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')]
                    and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]))" -->
            <xsl:if
              test="
                w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')]
                and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]))">

              <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
              <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>

            </xsl:if>
            <!-- 26-July-17: Added for para frame END-->
          </xsl:when>
          <xsl:when test="//w:style[@w:styleId = $paragraphStyleName]/w:pPr/w:numPr">

            <xsl:variable name="numID"
              select="//w:style[@w:styleId = $paragraphStyleName]/w:pPr/w:numPr/w:numId/@w:val"/>
            <xsl:variable name="lvl"
              select="//w:style[@w:styleId = $paragraphStyleName]/w:pPr/w:numPr/w:lvl/@w:val"/>
            <xsl:choose>
              <xsl:when
                test="//w:style[@w:styleId = $paragraphStyleName]/w:pPr/w:numPr/w:numId and not(//w:style[@w:styleId = $paragraphStyleName]/w:pPr/w:numPr/w:lvl)"> </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                  <xsl:attribute name="class" select="$paragraphStyle"/>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>
                        <xsl:if test="w:pPr/w:rPr/w:color">
                          <xsl:choose>
                            <xsl:when test="$color = 'auto'">
                              <!-- <xsl:value-of select="'000000'"/>-->
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <xsl:attribute name="style">
                                    <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                    <xsl:value-of select="'000000'"/>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:attribute name="style">
                                    <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                    <xsl:value-of select="$color"/>
                                  </xsl:attribute>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                        <!-- 16-feb-18: to set override styles -->
                        <xsl:if test="child::w:pPr/w:rPr/w:b">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                              <xsl:text> font-weight:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-weight:bold;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:i">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                              <xsl:text> font-style:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-style:italic;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:caps">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                              <xsl:text> text-transform: none !important;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> text-transform:uppercase;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <!-- 16-feb-18: to set override styles -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when
            test="$paragraphStyleName = //w:numbering/w:abstractNum/w:lvl/w:pStyle[@w:val = $paragraphStyleName]">
            <xsl:variable name="listStyle2" select="lower-case($listStyle)"/>
            <xsl:choose>
              <xsl:when test="$numberFormat = 'upperRoman'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-I</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes">&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <xsl:attribute name="class" select="'I'"/>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>

                </xsl:if>
              </xsl:when>
              <xsl:when test="$numberFormat = 'lowerRoman'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-i</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes">&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <xsl:attribute name="class" select="'i'"/>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>

                </xsl:if>
              </xsl:when>
              <xsl:when test="$numberFormat = 'lowerLetter'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-a</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>
                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes">&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <xsl:attribute name="class" select="'a'"/>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>

                </xsl:if>
              </xsl:when>
              <xsl:when test="$numberFormat = 'upperLetter'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-A</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>
                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes">&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <xsl:attribute name="class" select="'A'"/>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="$three = 'decimal'">
                <xsl:choose>
                  <xsl:when test="contains($bulltype, '.%')">
                    <xsl:element name="p">
                      <xsl:attribute name="class" select="$paragraphStyle"/>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:text>margin-right:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt';</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt';</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt';</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                      </xsl:if>
                      <!--<xsl:attribute name="class" select="'span'"/>-->
                      <xsl:if test="contains($bulltype, '.%')">
                        <xsl:element name="span">
                          <xsl:call-template name="AutoNumbering">
                            <xsl:with-param name="numId"
                              select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                            <xsl:with-param name="numLevel"
                              select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                          </xsl:call-template>
                          <xsl:variable name="numID">
                            <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                          </xsl:variable>
                          <xsl:variable name="ilvl">
                            <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                          </xsl:variable>
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:element>
                        <span style="padding-left:5px;"/>
                      </xsl:if>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="contains($bulltype, ' ')">
                    <xsl:text>&#x000A;</xsl:text>
                    <xsl:element name="p">
                      <xsl:attribute name="class" select="$paragraphStyle"/>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:text>margin-right:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt';</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt';</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt';</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                      </xsl:if>
                      <!--<xsl:attribute name="class" select="'span'"/>-->
                      <xsl:if test="contains($bulltype, '.%')">
                        <xsl:element name="span">
                          <xsl:call-template name="AutoNumbering">
                            <xsl:with-param name="numId"
                              select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                            <xsl:with-param name="numLevel"
                              select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                          </xsl:call-template>
                          <xsl:variable name="numID">
                            <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                          </xsl:variable>
                          <xsl:variable name="ilvl">
                            <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                          </xsl:variable>
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:element>
                        <span style="padding-left:5px;"/>
                      </xsl:if>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="ol">
                      <xsl:attribute name="type">
                        <xsl:value-of select="'1'"/>
                      </xsl:attribute>
                      <xsl:if test="child::w:pPr/w:ind">
                        <xsl:attribute name="indent">
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                          <xsl:text>pt</xsl:text>
                        </xsl:attribute>
                      </xsl:if>
                      <xsl:element name="li">
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:element name="span">
                            <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                            <xsl:call-template name="AutoNumbering">
                              <xsl:with-param name="numId"
                                select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                              <xsl:with-param name="numLevel"
                                select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:call-template>
                            <xsl:variable name="numID">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                            </xsl:variable>
                            <xsl:variable name="ilvl">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:variable>

                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:element>
                        </xsl:if>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="$numberFormat = 'bullet'">
                <xsl:element name="p">
                  <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">
                    <xsl:if test="child::w:pPr/w:ind">
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-left:'</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                            <xsl:text>pt';</xsl:text>
                            <xsl:text>margin-right:'</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                            <xsl:text>pt';</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:'</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt';</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-left:'</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                            <xsl:text>pt';</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:'</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt';</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>margin-right:'</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                            <xsl:text>pt';</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:'</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt';</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:attribute>
                        </xsl:when>
                      </xsl:choose>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>text-align:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                        <xsl:text>;</xsl:text>
                      </xsl:attribute>
                    </xsl:if>

                    <xsl:if test="contains($bulltype, '.%')">
                      <xsl:attribute name="type">
                        <xsl:value-of select="$indent"/>
                      </xsl:attribute>
                    </xsl:if>
                  </xsl:if>
                  <xsl:attribute name="class" select="$paragraphStyle"/>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <xsl:value-of select="$listStyleX"/>
                  <span style="padding-left:5px;"/>
                  <xsl:apply-templates/>
                </xsl:element>
              </xsl:when>
              <xsl:otherwise>
                <!-- i commented 14-sep-16, any issue comment this "p" again -->
                <xsl:element name="p">
                  <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                  <xsl:attribute name="class" select="$paragraphStyle"/>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>
                        <xsl:if test="w:pPr/w:rPr/w:color">
                          <xsl:choose>
                            <xsl:when test="$color = 'auto'">
                              <!-- <xsl:value-of select="'000000'"/>-->
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <xsl:attribute name="style">
                                    <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                    <xsl:value-of select="'000000'"/>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:attribute name="style">
                                    <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                    <xsl:value-of select="$color"/>
                                  </xsl:attribute>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                        <!-- 16-feb-18: to set override styles -->
                        <xsl:if test="child::w:pPr/w:rPr/w:b">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                              <xsl:text> font-weight:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-weight:bold;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:i">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                              <xsl:text> font-style:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-style:italic;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:caps">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                              <xsl:text> text-transform: none !important;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> text-transform:uppercase;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <!-- 16-feb-18: to set override styles -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:when test="$paragraphStyle = 'FootNotes'">
            <xsl:apply-templates/>
          </xsl:when>
          <!--Comment this line 06-04-17 Panneer-->
          <xsl:when test="$paragraphStyle = 'CommentText' and parent::w:comment">
            <xsl:apply-templates/>
          </xsl:when>
          <!--<xsl:when test="$paragraphStyle = 'FootnoteText'">            
                </xsl:when> -->
          <!-- 10-mar-17: This when test to check if a style para contains LIST -->
          <xsl:when test="$paragraphStyle = $listStyle">
            <!-- more than 1 digit lists ex: 1.1 or 1.1.1 -->
            <xsl:variable name="listLevel">
              <xsl:value-of
                select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/@w:ilvl"
              />
            </xsl:variable>
            <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
            <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
            <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
            <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
            <xsl:variable name="ilvlCount">
              <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
              <xsl:choose>
                <xsl:when test="$a = 0">
                  <xsl:value-of select="'1'"/>
                </xsl:when>
                <xsl:when test="$a = 1">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                </xsl:when>
                <xsl:when test="$a = 2">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                </xsl:when>
                <xsl:when test="$a = 3">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                </xsl:when>
                <xsl:when test="$a = 4">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="two">
              <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                <xsl:value-of select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
              </xsl:if>
            </xsl:variable>
            <xsl:variable name="numhead"
              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>
            <xsl:variable name="listStyle2" select="lower-case($listStyle)"/>
            <xsl:variable name="bulltype"
              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>
            <xsl:variable name="bulltypeFont"
              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>

            <xsl:variable name="numberFormat"
              select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val"/>
            <xsl:variable name="listType"
              select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:lvlText/@w:val"/>

            <!-- 26-July-17: Added for para frame POP -->

            <xsl:if
              test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']])">

              <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
              <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>
            </xsl:if>
            <!-- 26-July-17: Added for para frame END POP-->
            <xsl:choose>
              <xsl:when test="$numberFormat = 'upperRoman'">
                <xsl:choose>
                  <xsl:when test="contains($listType, '%1.%2.%3.%4')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="contains($listType, '%1.%2.%3')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="contains($listType, '%1.%2')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                    <xsl:value-of select="$paragraphStyle"/>
                    <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                    <xsl:text disable-output-escaping="yes">"</xsl:text>

                    <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                    <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                      <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                      <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                      <xsl:text disable-output-escaping="yes">"</xsl:text>
                    </xsl:if>
                    <xsl:text disable-output-escaping="yes"> type="I</xsl:text>
                    <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>

                    <xsl:element name="li">
                      <!--<xsl:attribute name="class" select="'I'"/>-->
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when
                            test="contains($listStyleBull, '(') and contains($listStyleBull, ')')">
                            <xsl:text>opencloseParenI</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, '(')">
                            <xsl:text>openParenI</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, ')')">
                            <xsl:text>closeParenI</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, '[')">
                            <xsl:text>openSParenI</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, ']')">
                            <xsl:text>closeSParenI</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <!--<xsl:text>num</xsl:text>-->
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>


                    <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="$numberFormat = 'lowerRoman'">
                <xsl:choose>
                  <xsl:when test="contains($listType, '%1.%2.%3.%4')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="contains($listType, '%1.%2.%3')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="contains($listType, '%1.%2')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                    <xsl:value-of select="$paragraphStyle"/>
                    <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                    <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                    <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                      <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                      <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                      <xsl:text disable-output-escaping="yes">"</xsl:text>
                    </xsl:if>
                    <xsl:text disable-output-escaping="yes"> type="i</xsl:text>
                    <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                    <xsl:element name="li">
                      <!--<xsl:attribute name="class" select="'i'"/>-->
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when
                            test="contains($listStyleBull, '(') and contains($listStyleBull, ')')">
                            <xsl:text>opencloseParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, '(')">
                            <xsl:text>openParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, ')')">
                            <xsl:text>closeParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, '[')">
                            <xsl:text>openSParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, ']')">
                            <xsl:text>closeSParen-i</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <!--<xsl:text>num</xsl:text>-->
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>


                    <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="$numberFormat = 'lowerLetter'">
                <xsl:choose>
                  <xsl:when test="contains($listType, '%1.%2.%3.%4')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="contains($listType, '%1.%2.%3')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="contains($listType, '%1.%2')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                    <xsl:value-of select="$paragraphStyle"/>
                    <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                    <xsl:text disable-output-escaping="yes">"</xsl:text>

                    <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                    <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                      <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                      <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                      <xsl:text disable-output-escaping="yes">"</xsl:text>
                    </xsl:if>
                    <xsl:text disable-output-escaping="yes"> type="a</xsl:text>
                    <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>


                    <xsl:element name="li">
                      <!--<xsl:attribute name="class" select="'a'"/>-->
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when
                            test="contains($listStyleBull, '(') and contains($listStyleBull, ')')">
                            <xsl:text>opencloseParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, '(')">
                            <xsl:text>openParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, ')')">
                            <xsl:text>closeParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, '[')">
                            <xsl:text>openSParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, ']')">
                            <xsl:text>closeSParen-a</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <!--<xsl:text>num</xsl:text>-->
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                    <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>

                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="$numberFormat = 'upperLetter'">
                <xsl:choose>
                  <xsl:when test="contains($listType, '%1.%2.%3.%4')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="contains($listType, '%1.%2.%3')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="contains($listType, '%1.%2')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                    <xsl:value-of select="$paragraphStyle"/>
                    <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                    <xsl:text disable-output-escaping="yes">"</xsl:text>

                    <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                    <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                      <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                      <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                      <xsl:text disable-output-escaping="yes">"</xsl:text>
                    </xsl:if>
                    <xsl:text disable-output-escaping="yes"> type="A</xsl:text>
                    <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                    <xsl:element name="li">
                      <!--<xsl:attribute name="class" select="'A'"/>-->
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when
                            test="contains($listStyleBull, '(') and contains($listStyleBull, ')')">
                            <xsl:text>opencloseParenA</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, '(')">
                            <xsl:text>openParenA</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, ')')">
                            <xsl:text>closeParenA</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, '[')">
                            <xsl:text>openSParenA</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, ']')">
                            <xsl:text>closeSParenA</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <!--<xsl:text>num</xsl:text>-->
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>

                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>

                    <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="$numberFormat = 'decimal'">
                <!-- 26-apr-17: to check for 1.1,1.1.1 for Elsevier title-->
                <xsl:choose>
                  <xsl:when test="contains($listType, '%1.%2.%3.%4')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="contains($listType, '%1.%2.%3')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="contains($listType, '%1.%2')">
                    <xsl:element name="p">
                      <xsl:attribute name="class">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                          />.<xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        /></span>
                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                    <xsl:value-of select="$paragraphStyle"/>
                    <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                    <xsl:text disable-output-escaping="yes">"</xsl:text>

                    <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                    <xsl:choose>
                      <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes"> start="1</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes"> start="1</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                        <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                          from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"
                        />
                      </xsl:otherwise>
                    </xsl:choose>
                    <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>

                    <xsl:element name="li">
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when
                            test="contains($listStyleBull, '(') and contains($listStyleBull, ')')">
                            <xsl:text>opencloseParen</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, '(')">
                            <xsl:text>openParen</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, ')')">
                            <xsl:text>closeParen</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, '[')">
                            <xsl:text>openSParen</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($listStyleBull, ']')">
                            <xsl:text>closeSParen</xsl:text>
                          </xsl:when>

                          <xsl:otherwise>
                            <!--<xsl:text>num</xsl:text>-->
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>

                      <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                      <xsl:apply-templates/>
                    </xsl:element>


                    <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="$numberFormat = 'bullet'">

                <xsl:element name="ul">
                  <xsl:attribute name="style">
                    <xsl:choose>
                      <xsl:when test="$bulltype = '•'">
                        <xsl:value-of select="'list-style-type: disc'"/>
                      </xsl:when>
                      <xsl:when test="$bulltype = 'o'">
                        <xsl:value-of select="'list-style-type: circle'"/>
                      </xsl:when>
                      <xsl:when test="$bulltype = ''">
                        <xsl:value-of select="'list-style-type: square'"/>
                      </xsl:when>
                      <!--<xsl:when test="$bulltype = ''">
                                  <xsl:value-of select="$bulltype"/>  
                                </xsl:when>-->
                      <xsl:otherwise>
                        <xsl:choose>
                          <xsl:when test="$bulltype != ''">
                            <xsl:value-of select="$bulltype"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'list-style-type: none'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:value-of select="'list-style-type: none'"/>  -->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->

                  <xsl:choose>
                    <xsl:when test="$listStyleBull = '•'">
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$listStyleBull = ''">
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$listStyleBull = 'o'">
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$listStyleBull = ''">
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:element name="li">
                        <!--<xsl:attribute name="class" select="'MsoNormal'"/>-->
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <!---->

                        <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:20px;"/&gt;</xsl:text>
                              <xsl:text disable-output-escaping="yes">&lt;span style="font-family:</xsl:text>
                              <xsl:value-of select="$bulltypeFont"/>
                              <xsl:text disable-output-escaping="yes">;"&gt;</xsl:text>
                              <xsl:value-of select="$bulltype"/>
                              <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                              <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:5px;"/&gt;</xsl:text>-->
                        <xsl:apply-templates/>
                        <!--</xsl:element>-->
                      </xsl:element>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <xsl:attribute name="class" select="$paragraphStyle"/>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->

                  <xsl:choose>
                    <xsl:when test="$paragraphStyle = 'BibItem-chap-endmatter'">
                      <xsl:attribute name="id">
                        <xsl:value-of select="'r'"/>
                        <xsl:number format="1" level="any"
                          count="w:p[w:pPr/w:pStyle/@w:val = 'BibItem-chap-endmatter']"/>
                      </xsl:attribute>
                      <xsl:apply-templates/>

                    </xsl:when>

                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:element name="br"/>-->
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>

            <!-- 26-July-17: Added for para frame -->
            <xsl:if
              test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]))">

              <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
              <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>

            </xsl:if>
            <!-- 26-July-17: Added for para frame END-->
          </xsl:when>
          <!-- 29-Apr-17: For *********************** KLI NUMP **************************************************************************** NUMP paragraphs and Citations -->
          <xsl:when
            test="$paragraphStyle = 'nump' or $paragraphStyle = 'nump-ind' or $paragraphStyle = 'numpind'">
            <xsl:variable name="xrefmarginal" select="."/>
            <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
            <xsl:variable name="paragraphStyleName">
              <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
            </xsl:variable>
            <xsl:element name="p">
              <xsl:attribute name="class" select="$paragraphStyle"/>
              <xsl:attribute name="data-name">
                <xsl:choose>
                  <xsl:when test="string-length($paragraphStyleName) > 0">
                    <xsl:value-of select="$paragraphStyleName"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoNormal'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <!-- 7-May-19 -->
              <xsl:attribute name="title">
                <!--<xsl:value-of select="."/>-->
                <xsl:text>nump</xsl:text>
                <xsl:value-of select="count(preceding::w:p/w:pPr/w:pStyle[@w:val = 'STitle1'])"/>
                <xsl:text>_</xsl:text>
              </xsl:attribute>
              <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
              <xsl:variable name="figSeq">
                <xsl:value-of select="descendant::w:r[w:rPr/w:rStyle[@w:val = 'num']][1]/w:t"/>
              </xsl:variable>

              <xsl:if test="string-length($figSeq) > 0">
                <xsl:attribute name="id">
                  <xsl:text>nump</xsl:text>
                  <!--<xsl:number count="ancestor::w:p/w:pPr/w:pStyle[@w:val = 'number']" level="any"/>-->
                  <xsl:value-of select="count(preceding::w:p/w:pPr/w:pStyle[@w:val = 'STitle1'])"/>
                  <xsl:text>_</xsl:text>
                  <xsl:value-of select="translate($figSeq, '  ', '')"/>
                  <!--<xsl:value-of select="$idval"/>-->
                </xsl:attribute>
              </xsl:if>
              <xsl:if test="string-length($figSeq) > 0">
                <xsl:attribute name="itemid">
                  <xsl:text>nump</xsl:text>
                  <xsl:value-of select="count(preceding::w:p/w:pPr/w:pStyle[@w:val = 'STitle1'])"/>
                  <xsl:text>_</xsl:text>
                  <xsl:value-of select="translate($figSeq, '  ', '')"/>
                  <!--<xsl:value-of select="$idval"/>-->
                </xsl:attribute>
              </xsl:if>
              <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
              <xsl:choose>
                <xsl:when test="child::w:pPr/w:pPrChange">
                  <xsl:attribute name="style">
                    <xsl:text>mso-style-name:</xsl:text>
                    <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                    <xsl:text> !msorm;</xsl:text>
                  </xsl:attribute>
                  <xsl:apply-templates/>
                </xsl:when>
                <xsl:when test="child::w:sdt">
                  <xsl:apply-templates/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:apply-templates/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:element>
          </xsl:when>
          <!-- 29-Apr-17: For *********************** KLI NUMP END**************************************************************************** NUMP paragraphs and Citations -->
          <xsl:otherwise>
            <!-- Checking for dummy paragraphs -->
            <!-- 26-July-17: Added for para frame @@@@ POP-->
            <xsl:if
              test="
                w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')]
                and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']])">

              <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
              <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>
            </xsl:if>
            <!-- 26-July-17: Added for para frame END POP-->
            <xsl:element name="p">
              <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
              <xsl:attribute name="class" select="$paragraphStyle"/>
              <xsl:attribute name="data-name">
                <xsl:choose>
                  <xsl:when test="string-length($paragraphStyleName) > 0">
                    <xsl:value-of select="$paragraphStyleName"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoNormal'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <!-- 7-May-19 -->
              <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
              <xsl:choose>
                <xsl:when
                  test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind | child::w:pPr/w:rPr/w:b">
                  <xsl:attribute name="style">
                    <xsl:if test="child::w:pPr/w:shd">
                      <xsl:text> background:#</xsl:text>
                      <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <!--****** new -->
                    <xsl:if test="child::w:pPr/w:ind">
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:if test="child::w:pPr/w:ind/@w:left">
                              <xsl:text>margin-left:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:ind/@w:right">
                              <xsl:text>margin-right:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:left">
                          <xsl:text>margin-left:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                          <xsl:text>pt;</xsl:text>
                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="child::w:pPr/w:jc">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:right">
                          <xsl:text>margin-right:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                          <xsl:text>pt;</xsl:text>
                          <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="child::w:pPr/w:jc">
                            <xsl:text>style=text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:when>
                      </xsl:choose>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>text-align:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                        <xsl:text>;</xsl:text>
                      </xsl:attribute>
                    </xsl:if>
                    <xsl:if test="w:pPr/w:rPr/w:color">
                      <xsl:choose>
                        <xsl:when test="$color = 'auto'">
                          <!-- <xsl:value-of select="'000000'"/>-->
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:choose>
                            <xsl:when test="$color = 'auto'">
                              <xsl:value-of select="'color:000000;'"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>color: #</xsl:text>
                              <xsl:value-of select="$color"/>
                              <xsl:text>;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>

                        </xsl:otherwise>
                      </xsl:choose>

                    </xsl:if>
                    <xsl:if test="contains($bulltype, '.%')">
                      <xsl:attribute name="type">
                        <xsl:value-of select="$indent"/>
                      </xsl:attribute>
                    </xsl:if>
                    <!-- new end -->
                    <!-- 16-feb-18: to set override styles -->
                    <xsl:if test="child::w:pPr/w:rPr/w:b">
                      <xsl:choose>
                        <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                          <xsl:text> font-weight:normal;</xsl:text>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = 'false']">
                          <xsl:text> font-weight:normal;</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text> font-weight:bold;</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:rPr/w:i">
                      <xsl:choose>
                        <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                          <xsl:text> font-style:normal;</xsl:text>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = 'false']">
                          <xsl:text> font-style:normal;</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text> font-style:italic;</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:if>
                    <xsl:if test="child::w:pPr/w:rPr/w:caps">
                      <xsl:choose>
                        <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                          <xsl:text> text-transform: none !important;</xsl:text>
                        </xsl:when>
                        <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = 'false']">
                          <xsl:text> text-transform: none !important;</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text> text-transform:uppercase;</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:if>
                    <!-- 16-feb-18: to set override styles -->
                  </xsl:attribute>

                  <xsl:apply-templates/>
                </xsl:when>
                <xsl:when test="child::w:sdt">
                  <xsl:apply-templates/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:apply-templates/>
                </xsl:otherwise>
              </xsl:choose>

            </xsl:element>


            <!-- 26-July-17: Added for para frame -->

            <xsl:if
              test="
                w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')]
                and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]))">

              <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
              <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
              <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>

            </xsl:if>
            <!-- 26-July-17: Added for para frame END-->
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="ancestor::w:txbxContent4-nov-17">
        <!--<span class="{child::w:pPr/w:pStyle/@w:val}">
          <xsl:apply-templates/>
        </span>-->
        <!-- Checking for dummy paragraphs -->
        <!-- 26-July-17: Added for para frame @@@@ POP-->
        <!--<xsl:if test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] 
          and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]) and not(preceding-sibling::w:p/w:pPr/w:pBdr)">                  
          
          <xsl:text disable-output-escaping="yes">&lt;div style='border:solid; windowtext:1.0pt;padding:</xsl:text>
          <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space,'pt ')"/>
          <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space,'pt ')"/>
          <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space,'pt ')"/>
          <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space,'pt')"/>
          <xsl:text disable-output-escaping="yes">'&gt;</xsl:text>
        </xsl:if>-->
        <!-- 26-July-17: Added for para frame END POP-->

        <xsl:element name="p">
          <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
          <xsl:attribute name="class">
            <xsl:choose>
              <xsl:when test="string-length($paragraphStyle) > 0">
                <xsl:value-of select="$paragraphStyle"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="'MsoNormal'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <xsl:attribute name="data-name">
            <xsl:choose>
              <xsl:when test="string-length($paragraphStyleName) > 0">
                <xsl:value-of select="$paragraphStyleName"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="'MsoNormal'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <!-- 7-May-19 -->
          <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
          <xsl:choose>
            <xsl:when
              test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
              <xsl:attribute name="style">
                <xsl:text>mso-style-name:</xsl:text>
                <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                <xsl:text> !msorm;</xsl:text>

                <xsl:if test="child::w:pPr/w:shd">
                  <xsl:text> background:#</xsl:text>
                  <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                  <xsl:text>;</xsl:text>
                </xsl:if>
                <!--****** new -->
                <xsl:if test="child::w:pPr/w:ind">
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                          <xsl:text>margin-left:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                          <xsl:text>margin-right:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:if test="(child::w:pPr/w:ind/@w:left) div 20 != 0">
                          <xsl:text>margin-left:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:if test="(child::w:pPr/w:ind/@w:hanging) div 20 != 0">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:if>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                      </xsl:attribute>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:if test="(child::w:pPr/w:ind/@w:right) div 20 != 0">
                          <xsl:text>margin-right:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                          <xsl:text>text-indent:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                          <xsl:text>pt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:text>style=text-align:</xsl:text>
                          <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                      </xsl:attribute>
                    </xsl:when>
                  </xsl:choose>
                </xsl:if>
                <!--<xsl:if test="child::w:pPr/w:jc">
                  <xsl:attribute name="style">
                    <xsl:text>text-align:</xsl:text>
                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                    <xsl:text>;</xsl:text>   
                  </xsl:attribute>
                </xsl:if>-->
                <xsl:if test="w:pPr/w:rPr/w:color">
                  <xsl:choose>
                    <xsl:when test="$color = 'auto'">
                      <!-- <xsl:value-of select="'000000'"/>-->
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                      <xsl:choose>
                        <xsl:when test="$color = 'auto'">
                          <xsl:value-of select="'000000'"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="$color"/>
                        </xsl:otherwise>
                      </xsl:choose>
                      <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:value-of select="w:pPr/w:rPr/w:color/@w:val"/>-->

                </xsl:if>
                <xsl:if test="contains($bulltype, '.%')">
                  <xsl:attribute name="type">
                    <xsl:value-of select="$indent"/>
                  </xsl:attribute>
                </xsl:if>
                <!-- new end -->
              </xsl:attribute>
              <xsl:apply-templates/>
            </xsl:when>
            <xsl:when test="child::w:sdt">
              <xsl:apply-templates/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:apply-templates/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:element>


        <!-- 26-July-17: Added for para frame -->

        <!--<xsl:if test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] 
          and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']])) and not(following-sibling::w:p/w:pPr/w:pBdr)">
          
          <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
          
        </xsl:if>-->
        <!-- 26-July-17: Added for para frame END-->
      </xsl:when>
      <xsl:when test="parent::w:comment">
        <xsl:apply-templates/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:choose>
          <!-- 13-sep-16 i've added XXXXXXX due to feedback by Prsanth on mail hu 10/13/2016 12:01 PM-->
          <!-- due to  w:pPr/w:numPr/w:numId/@w:val value is not available in document.xml-->
          <!-- 01-nov-16: Uncommented due to feedback by Prasanthn, regarding list missing. See mail Tue 11/1/2016 11:58 AM -->
          <xsl:when test="child::w:pPr/w:numPr">
            <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
            <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
            <xsl:variable name="two">
              <!--<xsl:if test="//w:num/@w:numId = $one">-->
              <xsl:value-of select="//w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
              <!--</xsl:if>-->
            </xsl:variable>
            <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
            <xsl:variable name="paragraphStyleName">
              <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
            </xsl:variable>

            <xsl:choose>
              <xsl:when test="$two = ''">
                <!-- 26-July-17: Added for para frame @@@@ POP-->
                <xsl:if
                  test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']])">
                  <!--<xsl:if test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pBdr])">-->

                  <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
                  <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>
                </xsl:if>
                <!-- 26-July-17: Added for para frame END POP-->
                <xsl:element name="p">
                  <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- Because no style in docx, all are "Normal" -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">
                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left">
                              <xsl:text>margin-left:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt;</xsl:text>
                              <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="child::w:pPr/w:jc">
                                <xsl:text>style=text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right">
                              <xsl:text>margin-right:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                              <xsl:text>pt;</xsl:text>
                              <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="child::w:pPr/w:jc">
                                <xsl:text>style=text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>
                        <xsl:if test="w:pPr/w:rPr/w:color">
                          <xsl:choose>
                            <xsl:when test="$color = 'auto'">
                              <!-- <xsl:value-of select="'000000'"/>-->
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <xsl:value-of select="'000000'"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="$color"/>
                                </xsl:otherwise>
                              </xsl:choose>
                              <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>

                        </xsl:if>
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                        <!-- 16-feb-18: to set override styles -->
                        <xsl:if test="child::w:pPr/w:rPr/w:b">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                              <xsl:text> font-weight:normal;</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = 'false']">
                              <xsl:text> font-weight:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-weight:bold;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:i">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                              <xsl:text> font-style:normal;</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = 'false']">
                              <xsl:text> font-style:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-style:italic;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:caps">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                              <xsl:text> text-transform: none !important;</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = 'false']">
                              <xsl:text> text-transform: none !important;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> text-transform:uppercase;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <!-- 16-feb-18: to set override styles -->
                      </xsl:attribute>

                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

                <!-- 26-July-17: Added for para frame -->
                <xsl:if
                  test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]))">

                  <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
                  <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>

                </xsl:if>
                <!-- 26-July-17: Added for para frame END-->

              </xsl:when>
              <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"></xsl:variable>-->
                <xsl:variable name="three">
                  <xsl:choose>
                    <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                      <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                      <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                      <xsl:choose>
                        <xsl:when
                          test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                          />
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                          />
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]">
                      <xsl:value-of
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"/>
                    </xsl:when>

                  </xsl:choose>
                </xsl:variable>
                <!-- <xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/> -->
                <xsl:variable name="bulltype">
                  <xsl:choose>
                    <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                      <xsl:value-of
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"
                      />
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of
                        select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl/w:lvlText/@w:val"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:variable>
                <!-- 26-July-17: Added for para frame @@@@ POP-->
                <xsl:if
                  test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']])">


                  <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
                  <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>
                </xsl:if>
                <!-- 26-July-17: Added for para frame END POP-->
                <xsl:choose>
                  <xsl:when test="$three = 'upperRoman'">
                    <xsl:element name="ol">
                      <xsl:attribute name="type">
                        <xsl:value-of select="'I'"/>
                      </xsl:attribute>
                      <xsl:variable name="restart">
                        <!--<xsl:if test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">                                      
                            <xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"/>                                      
                          </xsl:if>-->
                        <xsl:choose>
                          <xsl:when
                            test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                            />
                          </xsl:when>
                          <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:start/@w:val"
                            />
                          </xsl:when>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:attribute name="start">
                        <xsl:variable name="start">
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:variable>

                        <xsl:choose>
                          <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                          <xsl:when test="$start = ''">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <!-- 29-Nov-18: If no value in $start ENDS-->
                          <xsl:when test="$start = 1">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$start"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                            <xsl:text>opencloseParen-I</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '(')">
                            <xsl:text>openParen-I</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ')')">
                            <xsl:text>closeParen-I</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '[')">
                            <xsl:text>openSParen-I</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ']')">
                            <xsl:text>closeSParen-I</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <xsl:if test="child::w:bookmarkXXXStart">
                          <xsl:for-each select="child::w:bookmarkStart">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                            <xsl:value-of select="@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:apply-templates/>
                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <xsl:if test="child::w:bookmarkXXXEnd">
                          <xsl:for-each select="child::w:bookmarkEnd">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <xsl:value-of
                              select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:if test="contains(@w:name, 'BM')">
                              <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                            </xsl:if>
                            <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:element>

                  </xsl:when>
                  <xsl:when test="$three = 'lowerRoman'">
                    <xsl:element name="ol">
                      <xsl:attribute name="type">
                        <xsl:value-of select="'i'"/>
                      </xsl:attribute>
                      <xsl:variable name="restart">
                        <!--<xsl:if test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">                                      
                            <xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"/>                                      
                          </xsl:if>-->
                        <xsl:choose>
                          <xsl:when
                            test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                            />
                          </xsl:when>
                          <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:start/@w:val"
                            />
                          </xsl:when>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:attribute name="start">
                        <xsl:variable name="start">
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:variable>

                        <xsl:choose>
                          <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                          <xsl:when test="$start = ''">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <!-- 29-Nov-18: If no value in $start ENDS-->
                          <xsl:when test="$start = 1">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$start"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                            <xsl:text>opencloseParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '(')">
                            <xsl:text>openParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ')')">
                            <xsl:text>closeParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '[')">
                            <xsl:text>openSParen-i</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ']')">
                            <xsl:text>closeSParen-i</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <xsl:if test="child::w:bookmarkXXXStart">
                          <xsl:for-each select="child::w:bookmarkStart">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                            <xsl:value-of select="@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:apply-templates/>
                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <xsl:if test="child::w:bookmarkXXXEnd">
                          <xsl:for-each select="child::w:bookmarkEnd">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <xsl:value-of
                              select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:if test="contains(@w:name, 'BM')">
                              <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                            </xsl:if>
                            <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:element>

                  </xsl:when>
                  <xsl:when test="$three = 'lowerLetter'">
                    <xsl:element name="ol">
                      <xsl:attribute name="type">
                        <xsl:value-of select="'a'"/>
                      </xsl:attribute>
                      <xsl:variable name="restart">
                        <!--<xsl:if test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">                                      
                            <xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"/>                                      
                          </xsl:if>-->
                        <xsl:choose>
                          <xsl:when
                            test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                            />
                          </xsl:when>
                          <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:start/@w:val"
                            />
                          </xsl:when>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:attribute name="start">
                        <xsl:variable name="start">
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:variable>

                        <xsl:choose>
                          <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                          <xsl:when test="$start = ''">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <!-- 29-Nov-18: If no value in $start ENDS-->
                          <xsl:when test="$start = 1">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$start"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                            <xsl:text>opencloseParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '(')">
                            <xsl:text>openParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ')')">
                            <xsl:text>closeParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '[')">
                            <xsl:text>openSParen-a</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ']')">
                            <xsl:text>closeSParen-a</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <xsl:if test="child::w:bookmarkXXXStart">
                          <xsl:for-each select="child::w:bookmarkStart">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                            <xsl:value-of select="@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:apply-templates/>
                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <xsl:if test="child::w:bookmarkXXXEnd">
                          <xsl:for-each select="child::w:bookmarkEnd">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <xsl:value-of
                              select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:if test="contains(@w:name, 'BM')">
                              <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                            </xsl:if>
                            <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:element>

                  </xsl:when>
                  <xsl:when test="$three = 'upperLetter'">
                    <xsl:element name="ol">
                      <xsl:attribute name="type">
                        <xsl:value-of select="'A'"/>
                      </xsl:attribute>
                      <xsl:variable name="restart">
                        <!--<xsl:if test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">                                      
                            <xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"/>                                      
                          </xsl:if>-->
                        <xsl:choose>
                          <xsl:when
                            test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                            />
                          </xsl:when>
                          <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:start/@w:val"
                            />
                          </xsl:when>
                        </xsl:choose>
                      </xsl:variable>
                      <xsl:attribute name="start">
                        <xsl:variable name="start">
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:variable>

                        <xsl:choose>
                          <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                          <xsl:when test="$start = ''">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <!-- 29-Nov-18: If no value in $start ENDS-->
                          <xsl:when test="$start = 1">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$start"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                            <xsl:text>opencloseParen-A</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '(')">
                            <xsl:text>openParen-A</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ')')">
                            <xsl:text>closeParen-A</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '[')">
                            <xsl:text>openSParen-A</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ']')">
                            <xsl:text>closeSParen-A</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <!-- 15-JUNE-18: to get the bookmark start -->
                        <xsl:if test="child::w:bookmarkXXXStart">
                          <xsl:for-each select="child::w:bookmarkStart">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                            <xsl:value-of select="@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                        <xsl:apply-templates/>
                        <!-- 15-JUNE-18: to get the bookmark end -->
                        <xsl:if test="child::w:bookmarkXXXEnd">
                          <xsl:for-each select="child::w:bookmarkEnd">
                            <xsl:variable name="bmId" select="@w:id"/>
                            <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                            <xsl:value-of
                              select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                            <xsl:text disable-output-escaping="yes">"</xsl:text>
                            <xsl:if test="contains(@w:name, 'BM')">
                              <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                            </xsl:if>
                            <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                            <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                          </xsl:for-each>
                        </xsl:if>
                        <!-- to get the bookmark end ENDS-->
                      </xsl:element>
                    </xsl:element>

                  </xsl:when>
                  <xsl:when test="$three = 'decimal'">
                    <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                    <xsl:choose>
                      <xsl:when test="contains($bulltype, '.%')">
                        <xsl:element name="p">
                          <!--<xsl:attribute name="class" select="'MsoNormal'"/>-->
                          <!--<xsl:attribute name="class" select="$paragraphStyle"/>-->
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyle) > 0">
                                <xsl:value-of select="$paragraphStyle"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!---->

                          <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:'</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt';</xsl:text>
                                    <xsl:text>margin-right:'</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt';</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:'</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt';</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:'</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt';</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:'</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt';</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-right:'</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt';</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:'</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt';</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>

                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                          </xsl:if>
                          <!--<xsl:attribute name="class" select="'span'"/>-->
                          <xsl:if test="contains($bulltype, '.%')">
                            <xsl:element name="span">
                              <!-- @@@@@ -->
                              <xsl:variable name="numberFormat"
                                select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val"/>
                              <xsl:variable name="listType"
                                select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:lvlText/@w:val"/>
                              <!-- 25-7-17: giving bold-ital values for num list -->
                              <xsl:choose>
                                <xsl:when
                                  test="//w:numbering/w:abstractNum/w:lvl/w:rPr/w:b and //w:numbering/w:abstractNum/w:lvl/w:rPr/w:i">
                                  <xsl:text disable-output-escaping="yes">&lt;b&gt;</xsl:text>
                                  <xsl:text disable-output-escaping="yes">&lt;i&gt;</xsl:text>
                                </xsl:when>
                                <xsl:when test="//w:numbering/w:abstractNum/w:lvl/w:rPr/w:b">
                                  <xsl:text disable-output-escaping="yes">&lt;b&gt;</xsl:text>
                                </xsl:when>
                                <xsl:when test="//w:numbering/w:abstractNum/w:lvl/w:rPr/w:i">
                                  <xsl:text disable-output-escaping="yes">&lt;i&gt;</xsl:text>
                                </xsl:when>
                              </xsl:choose>
                              <!-- 25-7-17: giving bold-ital values for num list -->
                              <xsl:call-template name="AutoNumbering">
                                <xsl:with-param name="numId"
                                  select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                <xsl:with-param name="numLevel"
                                  select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                <xsl:with-param name="numFormat"
                                  select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val"/>
                                <xsl:with-param name="paraID" select="w:pPr/w:pStyle/@w:val"/>
                              </xsl:call-template>


                              <xsl:variable name="numID">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                              </xsl:variable>
                              <xsl:variable name="ilvl">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:variable>
                              <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                              <xsl:number
                                count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]"
                                level="any"/>
                              <!-- 25-7-17: giving bold-ital values for num list -->
                              <xsl:choose>
                                <xsl:when
                                  test="//w:numbering/w:abstractNum/w:lvl/w:rPr/w:b and //w:numbering/w:abstractNum/w:lvl/w:rPr/w:i">
                                  <xsl:text disable-output-escaping="yes">&lt;/i&gt;</xsl:text>
                                  <xsl:text disable-output-escaping="yes">&lt;/b&gt;</xsl:text>
                                </xsl:when>
                                <xsl:when test="//w:numbering/w:abstractNum/w:lvl/w:rPr/w:b">
                                  <xsl:text disable-output-escaping="yes">&lt;/b&gt;</xsl:text>
                                </xsl:when>
                                <xsl:when test="//w:numbering/w:abstractNum/w:lvl/w:rPr/w:i">
                                  <xsl:text disable-output-escaping="yes">&lt;/i&gt;</xsl:text>
                                </xsl:when>
                              </xsl:choose>
                              <!-- 25-7-17: giving bold-ital values for num list -->
                            </xsl:element>
                            <span style="padding-left:5px;"/>
                          </xsl:if>
                          <xsl:apply-templates/>
                        </xsl:element>

                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                        <xsl:variable name="paragraphStyleName">
                          <xsl:value-of
                            select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                        </xsl:variable>
                        <xsl:element name="ol">
                          <xsl:attribute name="type">
                            <xsl:value-of select="'1'"/>
                          </xsl:attribute>
                          <xsl:if test="child::w:pPr/w:ind">
                            <xsl:attribute name="indent">
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:attribute>
                          </xsl:if>
                          <xsl:variable name="restart">
                            <!--<xsl:if test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">                                      
                            <xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"/>                                      
                          </xsl:if>-->
                            <xsl:choose>
                              <xsl:when
                                test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                                <xsl:value-of
                                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                                />
                              </xsl:when>
                              <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]">
                                <xsl:value-of
                                  select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:start/@w:val"
                                />
                              </xsl:when>
                            </xsl:choose>
                          </xsl:variable>

                          <xsl:variable name="start">
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            />
                          </xsl:variable>
                          <xsl:attribute name="start">
                            <xsl:variable name="start">
                              <xsl:number
                                count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                level="any"/>
                            </xsl:variable>

                            <xsl:choose>
                              <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                              <xsl:when test="$start = ''">
                                <xsl:value-of select="$restart"/>
                              </xsl:when>
                              <!-- 29-Nov-18: If no value in $start ENDS-->
                              <xsl:when test="$start = 1">
                                <xsl:value-of select="$restart"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="$start"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <xsl:attribute name="class">
                            <xsl:choose>
                              <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                                <xsl:text>opencloseParen</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '(')">
                                <xsl:text>openParen</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ')')">
                                <xsl:text>closeParen</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, '[')">
                                <xsl:text>openSParen</xsl:text>
                              </xsl:when>
                              <xsl:when test="contains($bulltype, ']')">
                                <xsl:text>closeSParen</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>


                          <xsl:element name="li">
                            <!--<xsl:attribute name="class" select="'MsoNormal'"/>-->
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <!---->

                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:element name="span">
                                <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                <xsl:call-template name="AutoNumbering">
                                  <xsl:with-param name="numId"
                                    select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                  <xsl:with-param name="numLevel"
                                    select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:call-template>
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:element>
                            </xsl:if>
                            <!-- 15-JUNE-18: to get the bookmark start -->
                            <xsl:if test="child::w:bookmarkXXXStart">
                              <xsl:for-each select="child::w:bookmarkStart">
                                <xsl:variable name="bmId" select="@w:id"/>
                                <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                                <xsl:value-of select="@w:name"/>
                                <xsl:text disable-output-escaping="yes">"</xsl:text>
                                <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                                <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                              </xsl:for-each>
                            </xsl:if>
                            <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                            <xsl:apply-templates/>
                            <!-- 15-JUNE-18: to get the bookmark end -->
                            <xsl:if test="child::w:bookmarkXXXEnd">
                              <xsl:for-each select="child::w:bookmarkEnd">
                                <xsl:variable name="bmId" select="@w:id"/>
                                <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                <xsl:value-of
                                  select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                                <xsl:text disable-output-escaping="yes">"</xsl:text>
                                <xsl:if test="contains(@w:name, 'BM')">
                                  <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                                </xsl:if>
                                <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                                <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                              </xsl:for-each>
                            </xsl:if>
                            <!-- to get the bookmark end ENDS-->
                          </xsl:element>
                        </xsl:element>

                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:when>
                  <xsl:when test="$three = 'bullet'">
                    <xsl:text>&#x000A;</xsl:text>

                    <xsl:element name="ul">
                      <xsl:attribute name="style">
                        <xsl:choose>
                          <xsl:when test="$bulltype = '•'">
                            <xsl:value-of select="'list-style-type: disc'"/>
                          </xsl:when>
                          <xsl:when test="$bulltype = 'o'">
                            <xsl:value-of select="'list-style-type: circle'"/>
                          </xsl:when>
                          <xsl:when test="$bulltype = ''">
                            <xsl:value-of select="'list-style-type: square'"/>
                          </xsl:when>
                          <!--<xsl:when test="$bulltype = ''">
                                  <xsl:value-of select="$bulltype"/>  
                                </xsl:when>-->
                          <xsl:when test="$bulltype = ''">
                            <xsl:value-of select="'list-style-type: none'"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$bulltype"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:if test="child::w:pPr/w:ind">
                        <xsl:attribute name="indent">
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                          <xsl:text>pt</xsl:text>
                        </xsl:attribute>
                      </xsl:if>
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->

                      <xsl:choose>
                        <xsl:when test="$bulltype = '•'">
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <!-- 15-JUNE-18: to get the bookmark start -->
                            <xsl:if test="child::w:bookmarkXXXStart">
                              <xsl:for-each select="child::w:bookmarkStart">
                                <xsl:variable name="bmId" select="@w:id"/>
                                <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                                <xsl:value-of select="@w:name"/>
                                <xsl:text disable-output-escaping="yes">"</xsl:text>
                                <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                                <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                              </xsl:for-each>
                            </xsl:if>
                            <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                            <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                  <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                </xsl:when>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="child::w:pPr/w:ind/@w:left">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:right">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>

                            <xsl:apply-templates/>
                            <!-- 15-JUNE-18: to get the bookmark end -->
                            <xsl:if test="child::w:bookmarkXXXEnd">
                              <xsl:for-each select="child::w:bookmarkEnd">
                                <xsl:variable name="bmId" select="@w:id"/>
                                <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                <xsl:value-of
                                  select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                                <xsl:text disable-output-escaping="yes">"</xsl:text>
                                <xsl:if test="contains(@w:name, 'BM')">
                                  <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                                </xsl:if>
                                <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                                <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                              </xsl:for-each>
                            </xsl:if>
                            <!-- to get the bookmark end ENDS-->
                          </xsl:element>
                        </xsl:when>
                        <xsl:when test="$bulltype = 'o'">
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <!-- 15-JUNE-18: to get the bookmark start -->
                            <xsl:if test="child::w:bookmarkXXXStart">
                              <xsl:for-each select="child::w:bookmarkStart">
                                <xsl:variable name="bmId" select="@w:id"/>
                                <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                                <xsl:value-of select="@w:name"/>
                                <xsl:text disable-output-escaping="yes">"</xsl:text>
                                <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                                <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                              </xsl:for-each>
                            </xsl:if>
                            <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                            <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                  <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                </xsl:when>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="child::w:pPr/w:ind/@w:left">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:right">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>

                            <xsl:apply-templates/>
                            <!-- 15-JUNE-18: to get the bookmark end -->
                            <xsl:if test="child::w:bookmarkXXXEnd">
                              <xsl:for-each select="child::w:bookmarkEnd">
                                <xsl:variable name="bmId" select="@w:id"/>
                                <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                <xsl:value-of
                                  select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                                <xsl:text disable-output-escaping="yes">"</xsl:text>
                                <xsl:if test="contains(@w:name, 'BM')">
                                  <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                                </xsl:if>
                                <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                                <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                              </xsl:for-each>
                            </xsl:if>
                            <!-- to get the bookmark end ENDS-->
                          </xsl:element>
                        </xsl:when>
                        <xsl:when test="$bulltype = ''">
                          <xsl:element name="li">
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <!-- 15-JUNE-18: to get the bookmark start -->
                            <xsl:if test="child::w:bookmarkXXXStart">
                              <xsl:for-each select="child::w:bookmarkStart">
                                <xsl:variable name="bmId" select="@w:id"/>
                                <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                                <xsl:value-of select="@w:name"/>
                                <xsl:text disable-output-escaping="yes">"</xsl:text>
                                <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                                <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                              </xsl:for-each>
                            </xsl:if>
                            <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                            <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                  <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                </xsl:when>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="child::w:pPr/w:ind/@w:left">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:right">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>

                            <xsl:apply-templates/>
                            <!-- 15-JUNE-18: to get the bookmark end -->
                            <xsl:if test="child::w:bookmarkXXXEnd">
                              <xsl:for-each select="child::w:bookmarkEnd">
                                <xsl:variable name="bmId" select="@w:id"/>
                                <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                <xsl:value-of
                                  select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                                <xsl:text disable-output-escaping="yes">"</xsl:text>
                                <xsl:if test="contains(@w:name, 'BM')">
                                  <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                                </xsl:if>
                                <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                                <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                              </xsl:for-each>
                            </xsl:if>
                            <!-- to get the bookmark end ENDS-->
                          </xsl:element>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text>&#x000A;</xsl:text>
                          <xsl:element name="li">
                            <!--<xsl:element name="p">-->
                            <!--<xsl:attribute name="class" select="'MsoNormal'"/>-->
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyle) > 0">
                                  <xsl:value-of select="$paragraphStyle"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->
                            <!-- 15-JUNE-18: to get the bookmark start -->
                            <xsl:if test="child::w:bookmarkXXXStart">
                              <xsl:for-each select="child::w:bookmarkStart">
                                <xsl:variable name="bmId" select="@w:id"/>
                                <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                                <xsl:value-of select="@w:name"/>
                                <xsl:text disable-output-escaping="yes">"</xsl:text>
                                <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                                <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                              </xsl:for-each>
                            </xsl:if>
                            <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                            <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                  <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                </xsl:when>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="child::w:pPr/w:ind/@w:left">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:right">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>

                            <xsl:apply-templates/>
                            <!-- 15-JUNE-18: to get the bookmark end -->
                            <xsl:if test="child::w:bookmarXXXkEnd">
                              <xsl:for-each select="child::w:bookmarkEnd">
                                <xsl:variable name="bmId" select="@w:id"/>
                                <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                <xsl:value-of
                                  select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                                <xsl:text disable-output-escaping="yes">"</xsl:text>
                                <xsl:if test="contains(@w:name, 'BM')">
                                  <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                                </xsl:if>
                                <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                                <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                              </xsl:for-each>
                            </xsl:if>
                            <!-- to get the bookmark end ENDS-->
                          </xsl:element>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>

                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="p">
                      <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>

                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyle) > 0">
                            <xsl:value-of select="$paragraphStyle"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                      <xsl:choose>
                        <xsl:when
                          test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                          <xsl:attribute name="style">
                            <xsl:text>mso-style-name:</xsl:text>
                            <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                            <xsl:text> !msorm;</xsl:text>

                            <xsl:if test="child::w:pPr/w:shd">
                              <xsl:text> background:#</xsl:text>
                              <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                            <!--****** new -->
                            <xsl:if test="child::w:pPr/w:ind">
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>style=text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>style=text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>style=text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:if test="w:pPr/w:rPr/w:color">
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <!-- <xsl:value-of select="'000000'"/>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes">&lt;span style="color: #</xsl:text>
                                  <xsl:choose>
                                    <xsl:when test="$color = 'auto'">
                                      <xsl:value-of select="'000000'"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="$color"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                  <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <!-- new end -->
                            <!-- 16-feb-18: to set override styles -->
                            <xsl:if test="child::w:pPr/w:rPr/w:b">
                              <xsl:choose>
                                <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                                  <xsl:text> font-weight:normal;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text> font-weight:bold;</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:rPr/w:i">
                              <xsl:choose>
                                <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                                  <xsl:text> font-style:normal;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text> font-style:italic;</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:rPr/w:caps">
                              <xsl:choose>
                                <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                                  <xsl:text> text-transform: none !important;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text> text-transform:uppercase;</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <!-- 16-feb-18: to set override styles -->
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:when test="child::w:sdt">
                          <xsl:apply-templates/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:element>

                  </xsl:otherwise>
                </xsl:choose>
                <!-- 26-July-17: Added for para frame -->
                <xsl:if
                  test="
                    w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')]
                    and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]))">

                  <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
                  <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>

                </xsl:if>
                <!-- 26-July-17: Added for para frame END-->
              </xsl:when>
            </xsl:choose>
          </xsl:when>

          <xsl:when
            test="$paragraphStyle = //w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/w:numFmt/@w:val">
            <xsl:variable name="listStyle2" select="lower-case($listStyle)"/>
            <xsl:choose>
              <xsl:when test="$numberFormat = 'upperRoman'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->

                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-I</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes">&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <xsl:attribute name="class" select="'I'"/>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">

                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="$numberFormat = 'lowerRoman'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->

                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-i</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes">&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <xsl:attribute name="class" select="'i'"/>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">

                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="$numberFormat = 'lowerLetter'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->

                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-a</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes">&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <xsl:attribute name="class" select="'a'"/>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">

                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="$numberFormat = 'upperLetter'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->

                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-A</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes">&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <xsl:attribute name="class" select="'A'"/>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">

                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="$three = 'decimal'">
                <xsl:choose>
                  <xsl:when test="contains($bulltype, '.%')">

                    <xsl:element name="p">
                      <xsl:attribute name="class" select="$paragraphStyle"/>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($paragraphStyleName) > 0">
                            <xsl:value-of select="$paragraphStyleName"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'MsoNormal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <!-- 7-May-19 -->
                      <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:text>margin-right:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt';</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt';</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:'</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt';</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:'</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt';</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                      </xsl:if>
                      <!--<xsl:attribute name="class" select="'span'"/>-->
                      <xsl:if test="contains($bulltype, '.%')">
                        <xsl:element name="span">
                          <xsl:call-template name="AutoNumbering">
                            <xsl:with-param name="numId"
                              select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                            <xsl:with-param name="numLevel"
                              select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                          </xsl:call-template>
                          <xsl:variable name="numID">
                            <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                          </xsl:variable>
                          <xsl:variable name="ilvl">
                            <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                          </xsl:variable>
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:element>
                        <span style="padding-left:5px;"/>
                      </xsl:if>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="ol">
                      <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                      <xsl:attribute name="class">
                        <xsl:choose>
                          <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                            <xsl:text>opencloseParen</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '(')">
                            <xsl:text>openParen</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ')')">
                            <xsl:text>closeParen</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, '[')">
                            <xsl:text>openSParen</xsl:text>
                          </xsl:when>
                          <xsl:when test="contains($bulltype, ']')">
                            <xsl:text>closeSParen</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:attribute name="type">
                        <xsl:value-of select="'1'"/>
                      </xsl:attribute>
                      <xsl:if test="child::w:pPr/w:ind">
                        <xsl:attribute name="indent">
                          <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                          <xsl:text>pt</xsl:text>
                        </xsl:attribute>
                      </xsl:if>
                      <xsl:variable name="restart">
                        <xsl:if
                          test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                          <xsl:value-of
                            select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                          />
                        </xsl:if>
                      </xsl:variable>
                      <xsl:attribute name="start">
                        <xsl:variable name="start">
                          <xsl:number
                            count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                            level="any"/>
                        </xsl:variable>

                        <xsl:choose>
                          <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                          <xsl:when test="$start = ''">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <!-- 29-Nov-18: If no value in $start ENDS-->
                          <xsl:when test="$start = 1">
                            <xsl:value-of select="$restart"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$start"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:element name="span">
                            <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                            <xsl:call-template name="AutoNumbering">
                              <xsl:with-param name="numId"
                                select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                              <xsl:with-param name="numLevel"
                                select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:call-template>
                            <xsl:variable name="numID">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                            </xsl:variable>
                            <xsl:variable name="ilvl">
                              <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                            </xsl:variable>

                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:element>
                        </xsl:if>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>

              <xsl:when test="$numberFormat = 'bullet'">
                <xsl:element name="p">
                  <xsl:attribute name="class" select="$paragraphStyle"/>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>

                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                        <!-- 16-feb-18: to set override styles -->
                        <xsl:if test="child::w:pPr/w:rPr/w:b">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                              <xsl:text> font-weight:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-weight:bold;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:i">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                              <xsl:text> font-style:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-style:italic;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:caps">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                              <xsl:text> text-transform: none !important;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> text-transform:uppercase;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <!-- 16-feb-18: to set override styles -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:when>
              <xsl:otherwise>
                <!-- i commented 14-sep-16, any issue comment this "p" again -->
                <xsl:element name="p">
                  <xsl:attribute name="class" select="$paragraphStyle"/>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                  <xsl:choose>
                    <xsl:when
                      test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                      <xsl:attribute name="style">
                        <xsl:text>mso-style-name:</xsl:text>
                        <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                        <xsl:text> !msorm;</xsl:text>

                        <xsl:if test="child::w:pPr/w:shd">
                          <xsl:text> background:#</xsl:text>
                          <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <!--****** new -->
                        <xsl:if test="child::w:pPr/w:ind">

                          <xsl:choose>
                            <xsl:when
                              test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:left | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                            <xsl:when test="child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                              <xsl:attribute name="style">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 72"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 72"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>style=text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:attribute>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:jc">
                          <xsl:attribute name="style">
                            <xsl:text>text-align:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                            <xsl:text>;</xsl:text>
                          </xsl:attribute>
                        </xsl:if>
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <!-- new end -->
                        <!-- 16-feb-18: to set override styles -->
                        <xsl:if test="child::w:pPr/w:rPr/w:b">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                              <xsl:text> font-weight:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-weight:bold;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:i">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                              <xsl:text> font-style:normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> font-style:italic;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <xsl:if test="child::w:pPr/w:rPr/w:caps">
                          <xsl:choose>
                            <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                              <xsl:text> text-transform: none !important;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> text-transform:uppercase;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <!-- 16-feb-18: to set override styles -->
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:when test="child::w:sdt">
                      <xsl:apply-templates/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>

          <xsl:when test="$paragraphStyle = 'FootNotes'">
            <xsl:apply-templates/>
          </xsl:when>

          <!--Comment this line 06-04-17 Panneer-->
          <xsl:when test="$paragraphStyle = 'CommentText' and parent::w:comment">
            <xsl:apply-templates/>
          </xsl:when>

          <xsl:when test="$paragraphStyle = 'FootnoteText'"> </xsl:when>

          <!-- 10-mar-17: This when test to check if a style para contains LIST -->
          <xsl:when test="$paragraphStyle = $listStyle">
            <xsl:variable name="listLevel">
              <xsl:value-of
                select="//w:numbering/w:abstractNum/w:lvl[w:pStyle/@w:val = $paragraphStyle]/@w:ilvl"
              />
            </xsl:variable>
            <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
            <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
            <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
            <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
            <xsl:variable name="ilvlCount">
              <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
              <xsl:choose>
                <xsl:when test="$a = 0">
                  <xsl:value-of select="'1'"/>
                </xsl:when>
                <xsl:when test="$a = 1">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                </xsl:when>
                <xsl:when test="$a = 2">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                </xsl:when>
                <xsl:when test="$a = 3">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                </xsl:when>
                <xsl:when test="$a = 4">
                  <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                </xsl:when>
              </xsl:choose>
            </xsl:variable>
            <xsl:variable name="two">
              <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                <xsl:value-of select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
              </xsl:if>
            </xsl:variable>
            <xsl:variable name="numhead"
              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>
            <xsl:variable name="listStyle2" select="lower-case($listStyle)"/>
            <xsl:variable name="bulltype"
              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>
            <xsl:variable name="bulltypeFont"
              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>




            <xsl:choose>
              <xsl:when test="$numberFormat = 'upperRoman'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->

                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-I</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-I</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes"> type="I</xsl:text>
                  <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <!--<xsl:attribute name="class" select="'I'"/>-->
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when
                        test="contains($listStyleBull, '(') and contains($listStyleBull, ')')">
                        <xsl:text>opencloseParenI</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, '(')">
                        <xsl:text>openParenI</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, ')')">
                        <xsl:text>closeParenI</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, '[')">
                        <xsl:text>openSParenI</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, ']')">
                        <xsl:text>closeSParenI</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text>num</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>

                  <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">

                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="$numberFormat = 'lowerRoman'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->

                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-i</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-i</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes"> type="i</xsl:text>
                  <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <!--<xsl:attribute name="class" select="'i'"/>-->
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when
                        test="contains($listStyleBull, '(') and contains($listStyleBull, ')')">
                        <xsl:text>opencloseParen-i</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, '(')">
                        <xsl:text>openParen-i</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, ')')">
                        <xsl:text>closeParen-i</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, '[')">
                        <xsl:text>openSParen-i</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, ']')">
                        <xsl:text>closeSParen-i</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text>num</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>

                  <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">

                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="$numberFormat = 'lowerLetter'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->

                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-a</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-a</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes"> type="a</xsl:text>
                  <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <!--<xsl:attribute name="class" select="'a'"/>-->
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when
                        test="contains($listStyleBull, '(') and contains($listStyleBull, ')')">
                        <xsl:text>opencloseParen-a</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, '(')">
                        <xsl:text>openParen-a</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, ')')">
                        <xsl:text>closeParen-a</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, '[')">
                        <xsl:text>openSParen-a</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, ']')">
                        <xsl:text>closeSParen-a</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text>num</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>

                  <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">

                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="$numberFormat = 'upperLetter'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->

                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen-A</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen-A</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">"</xsl:text>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:if test="not(w:pPr/w:numPr/w:ilvl)">
                    <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                    <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"/>
                    <xsl:text disable-output-escaping="yes">"</xsl:text>
                  </xsl:if>
                  <xsl:text disable-output-escaping="yes"> type="A</xsl:text>
                  <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>

                </xsl:if>
                <xsl:element name="li">
                  <!--<xsl:attribute name="class" select="'A'"/>-->
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when
                        test="contains($listStyleBull, '(') and contains($listStyleBull, ')')">
                        <xsl:text>opencloseParenA</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, '(')">
                        <xsl:text>openParenA</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, ')')">
                        <xsl:text>closeParenA</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, '[')">
                        <xsl:text>openSParenA</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, ']')">
                        <xsl:text>closeSParenA</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text>num</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>

                  <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">

                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="$numberFormat = 'decimal'">
                <xsl:if
                  test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">
                  <xsl:text disable-output-escaping="yes">&lt;ol class="</xsl:text>
                  <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->

                  <xsl:choose>
                    <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                      <xsl:text>opencloseParen</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '(')">
                      <xsl:text>openParen</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ')')">
                      <xsl:text>closeParen</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, '[')">
                      <xsl:text>openSParen</xsl:text>
                    </xsl:when>
                    <xsl:when test="contains($bulltype, ']')">
                      <xsl:text>closeSParen</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: Custom attributes prefixed with "data-" will be completely ignored by the user agent. -->
                  <xsl:text disable-output-escaping="yes">" type="1"</xsl:text>

                  <!-- https://www.w3schools.com/tags/att_global_data.asp: END. -->
                  <xsl:choose>
                    <xsl:when test="child::w:pPr/w:numPr/w:ilvl[@w:val = '0']">
                      <xsl:text disable-output-escaping="yes"> start="1</xsl:text>
                    </xsl:when>
                    <xsl:when test="child::w:pPr/w:pStyle/w:numPr/w:ilvl[@w:val = '0']">
                      <xsl:text disable-output-escaping="yes"> start="1</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:text disable-output-escaping="yes"> start="</xsl:text>
                      <xsl:number count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]"
                        from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--</xsl:if>-->
                  <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                </xsl:if>
                <xsl:element name="li">
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when
                        test="contains($listStyleBull, '(') and contains($listStyleBull, ')')">
                        <xsl:text>opencloseParen</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, '(')">
                        <xsl:text>openParen</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, ')')">
                        <xsl:text>closeParen</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, '[')">
                        <xsl:text>openSParen</xsl:text>
                      </xsl:when>
                      <xsl:when test="contains($listStyleBull, ']')">
                        <xsl:text>closeSParen</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text>num</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>

                  <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:10px;"/&gt;</xsl:text>
                  <xsl:apply-templates/>
                </xsl:element>
                <xsl:if
                  test="not(following-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle]]])">

                  <xsl:text disable-output-escaping="yes">&lt;/ol&gt;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="$numberFormat = 'bullet'">

                <xsl:element name="ul">
                  <xsl:attribute name="style">
                    <xsl:choose>
                      <xsl:when test="$bulltype = '•'">
                        <xsl:value-of select="'list-style-type: disc'"/>
                      </xsl:when>
                      <xsl:when test="$bulltype = 'o'">
                        <xsl:value-of select="'list-style-type: circle'"/>
                      </xsl:when>
                      <xsl:when test="$bulltype = ''">
                        <xsl:value-of select="'list-style-type: square'"/>
                      </xsl:when>
                      <!--<xsl:when test="$bulltype = ''">
                                  <xsl:value-of select="$bulltype"/>  
                                </xsl:when>-->
                      <xsl:otherwise>
                        <xsl:choose>
                          <xsl:when test="$bulltype != ''">
                            <xsl:value-of select="$bulltype"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'list-style-type: none'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:value-of select="'list-style-type: none'"/>  -->
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->

                  <xsl:choose>
                    <xsl:when test="$listStyleBull = '•'">
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$listStyleBull = ''">
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$listStyleBull = 'o'">
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$listStyleBull = ''">
                      <xsl:element name="li">
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:element name="li">
                        <!--<xsl:attribute name="class" select="'MsoNormal'"/>-->
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <!---->

                        <!--<xsl:text disable-output-escaping="yes">&lt;span style="padding-left:20px;"/&gt;</xsl:text>
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-family:</xsl:text>
                        <xsl:value-of select="$bulltypeFont"/>
                        <xsl:text disable-output-escaping="yes">;"&gt;</xsl:text>
                        <xsl:value-of select="$bulltype"/>
                        <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                        <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:5px;"/&gt;</xsl:text>-->
                        <xsl:apply-templates/>
                        <!--</xsl:element>-->
                      </xsl:element>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>

              </xsl:when>

              <xsl:when test="$paragraphStyle = 'HANL'">
                <xsl:choose>
                  <xsl:when
                    test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle/@w:val = 'HANL']])">
                    <xsl:for-each select="self::w:p[w:pPr/w:pStyle/@w:val = 'HANL']">
                      <xsl:element name="p">
                        <xsl:attribute name="class" select="'HANL'"/>

                        <xsl:value-of select="$HANL"/>
                        <span style="padding-left:5px;"/>
                        <xsl:apply-templates/>
                      </xsl:element>

                      <xsl:apply-templates
                        select="following-sibling::*[1][self::w:p[w:pPr/w:pStyle/@w:val = 'HANL']]"
                        mode="HANL"/>
                    </xsl:for-each>
                  </xsl:when>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="$paragraphStyle = 'OBNL'">
                <xsl:choose>
                  <xsl:when
                    test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle/@w:val = 'OBNL']])">
                    <xsl:for-each select="self::w:p[w:pPr/w:pStyle/@w:val = 'OBNL']">
                      <xsl:element name="p">
                        <xsl:attribute name="class" select="'OBNL'"/>

                        <xsl:value-of select="$OBNL"/>
                        <span style="padding-left:5px;"/>
                        <xsl:apply-templates/>
                      </xsl:element>

                      <xsl:apply-templates
                        select="following-sibling::*[1][self::w:p[w:pPr/w:pStyle/@w:val = 'OBNL']]"
                        mode="OBNL"/>
                    </xsl:for-each>
                  </xsl:when>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="$paragraphStyle = 'QNL'">
                <xsl:choose>
                  <xsl:when
                    test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle/@w:val = 'QNL']])">
                    <xsl:for-each select="self::w:p[w:pPr/w:pStyle/@w:val = 'QNL']">
                      <xsl:element name="p">
                        <xsl:attribute name="class" select="'QNL'"/>

                        <xsl:value-of select="$QNL"/>
                        <span style="padding-left:5px;"/>
                        <xsl:apply-templates/>
                      </xsl:element>

                      <xsl:apply-templates
                        select="following-sibling::*[1][self::w:p[w:pPr/w:pStyle/@w:val = 'QNL']]"
                        mode="QNL"/>
                    </xsl:for-each>
                  </xsl:when>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="$paragraphStyle = 'QNL1'">
                <xsl:choose>
                  <xsl:when
                    test="not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle/@w:val = 'QNL1']])">
                    <xsl:for-each select="self::w:p[w:pPr/w:pStyle/@w:val = 'QNL1']">
                      <xsl:element name="p">
                        <xsl:attribute name="class" select="'QNL1'"/>

                        <xsl:value-of select="$QNL1"/>
                        <span style="padding-left:5px;"/>
                        <xsl:apply-templates/>
                      </xsl:element>

                      <xsl:apply-templates
                        select="following-sibling::*[1][self::w:p[w:pPr/w:pStyle/@w:val = 'QNL1']]"
                        mode="QNL1"/>
                    </xsl:for-each>
                  </xsl:when>
                </xsl:choose>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="p">
                  <!--<xsl:attribute name="class" select="$paragraphStyle"/>-->
                  <xsl:attribute name="class">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyle) > 0">
                        <xsl:value-of select="$paragraphStyle"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <xsl:attribute name="data-name">
                    <xsl:choose>
                      <xsl:when test="string-length($paragraphStyleName) > 0">
                        <xsl:value-of select="$paragraphStyleName"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="'MsoNormal'"/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:attribute>
                  <!-- 7-May-19 -->
                  <!---->

                  <xsl:choose>
                    <xsl:when test="$paragraphStyle = 'BibItem-chap-endmatter'">
                      <xsl:attribute name="id">
                        <xsl:value-of select="'r'"/>
                        <xsl:number format="1" level="any"
                          count="w:p[w:pPr/w:pStyle/@w:val = 'BibItem-chap-endmatter']"/>
                      </xsl:attribute>
                      <xsl:apply-templates/>

                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'FootNotes'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:number/>
                        </xsl:attribute>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'EndnoteText'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'e'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'EndnoteText']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="concat($filename, '.xhtml#eref')"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'EndnoteText']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Endnoten'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'e'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Endnoten']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="concat($filename, '.xhtml#eref')"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Endnoten']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when
                      test="
                        $paragraphStyle = 'UnitTitle' or $paragraphStyle = 'PartTitle' or $paragraphStyle = 'SectionTitle' or $paragraphStyle = 'PartNumber'
                        or $paragraphStyle = 'UnitNmber' or $paragraphStyle = 'SectionNumber' or $paragraphStyle = 'SectionNumber0'
                        or $paragraphStyle = 'unittitle' or $paragraphStyle = 'parttitle' or $paragraphStyle = 'sectiontitle' or $paragraphStyle = 'partnumber'
                        or $paragraphStyle = 'unitumber' or $paragraphStyle = 'sectionnumber' or $paragraphStyle = 'sectionnumber0'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'ch'"/>
                          <xsl:number format="01"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'ChapterTitle']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="concat('contents.xhtml#', $filename)"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'ChapterTitle'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'ch'"/>
                          <xsl:number format="01"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'ChapterTitle']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="concat('contents.xhtml#', $filename)"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>

                    <xsl:when test="$paragraphStyle = 'CT'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--11-04-16<xsl:value-of select="'ch'"/>
                      <xsl:number format="01" count="w:p[w:pPr/w:pStyle/@w:val = 'CT']" level="any"/>-->
                          <xsl:value-of select="concat('CH-', $filename)"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="concat('contents.xhtml#CH-', $filename)"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'ChapterAuthor'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'ch'"/>
                          <xsl:number format="01"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'ChapterTitle']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="concat('contents.xhtml#', $filename)"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <!--<xsl:if test="matches($class, '^[Hh]ead([A-z\-_]*)?[0-9]+$') and not($class ='Header')">-->
                    <xsl:when test="matches($paragraphStyle, '^[Hh]([A-z\-_]*)?[0-9]+([A-z\-_]*)$')">

                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--10-sep-15: I've deleted the filename here, to shorten in content.xsl <xsl:value-of select="concat($filename,'-sec1-')"/> -->
                          <xsl:value-of select="'sec'"/>
                          <xsl:analyze-string select="$paragraphStyle"
                            regex="^[Hh]([A-z\-_]*)?([0-9]+)([A-z\-_]*)$">
                            <xsl:matching-substring>
                              <xsl:value-of select="regex-group(2)"/>
                            </xsl:matching-substring>
                          </xsl:analyze-string>
                          <xsl:value-of select="'_'"/>
                          <!--w:p[matches(w:pPr/w:pStyle/@w:val, 'BodyText([0-9]+)')]      -->
                          <xsl:number format="1"
                            count="w:p[matches(w:pPr/w:pStyle/@w:val, '^[Hh]([A-z\-_]*)?[0-9]+([A-z\-_]*)$')]"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec'"/>
                          <xsl:analyze-string select="$paragraphStyle"
                            regex="^[Hh]([A-z\-_]*)?([0-9]+)([A-z\-_]*)$">
                            <xsl:matching-substring>
                              <xsl:value-of select="regex-group(2)"/>
                            </xsl:matching-substring>
                          </xsl:analyze-string>
                          <xsl:value-of select="'-'"/>
                          <xsl:number format="1"
                            count="w:p[matches(w:pPr/w:pStyle/@w:val, '^[Hh]([A-z\-_]*)?[0-9]+([A-z\-_]*)$')]"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>

                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading1'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--10-sep-15: I've deleted the filename here, to shorten in content.xsl <xsl:value-of select="concat($filename,'-sec1-')"/> -->
                          <xsl:value-of select="'sec1_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading1']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec1-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading1']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>

                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading2'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--10-sep-15: I've deleted the filename here, to shorten in content.xsl <xsl:value-of select="concat($filename,'-sec2-')"/> -->
                          <xsl:value-of select="'sec2_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading2']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec2-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading2']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading3'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec3_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading3']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec3-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading3']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading3BelowHeading2'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec3_'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'Heading3BelowHeading2']" level="any"
                          />
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec3-'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'Heading3BelowHeading2']" level="any"
                          />
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading4'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec4_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading4']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec4-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading4']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading4BelowHeading3'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec4_'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'Heading4BelowHeading3']" level="any"
                          />
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec4-'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'Heading4BelowHeading3']" level="any"
                          />
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading5'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec5_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading5']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec5-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading5']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>

                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading6'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec6_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading6']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec6-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading6']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>

                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading7'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec7_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading7']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec7-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading7']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>

                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading8'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec8_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading8']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec8-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading8']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:element name="div">
                          <xsl:apply-templates/>
                        </xsl:element>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading9'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec9_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading9']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec9-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading9']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading10'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec10_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading10']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec10-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading10']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading11'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec11_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading11']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec11-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading11']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading12'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec12_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading12']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec12-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading12']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading13'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec13_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading13']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec13-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading13']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading14'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec14_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading14']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec14-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading14']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading15'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec15_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading15']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec15-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading15']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading16'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec16_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading16']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec16-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading16']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading17'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec17_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading17']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec17-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading17']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading18'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec18_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading18']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec18-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading18']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading19'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec19_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading19']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec19-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading19']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading20'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec20_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading20']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec20-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading20']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading21'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec21_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading21']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec21-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading21']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading22'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec22_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading22']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec22-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading22']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading23'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec23_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading23']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec23-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading23']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'Heading24'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec24_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading24']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec24-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'Heading24']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H1'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--10-sep-15: I've deleted the filename here, to shorten in content.xsl <xsl:value-of select="concat($filename,'-sec1-')"/> -->
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_sec1_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H1']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#'"/>
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_sec1-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H1']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H1-BMSect'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--10-sep-15: I've deleted the filename here, to shorten in content.xsl <xsl:value-of select="concat($filename,'-sec1-')"/> -->
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_BMsec1_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H1-BMSect']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#'"/>
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_BMsec1-'"/>

                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H1-BMSect']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H2'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_sec2_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H2']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <!--<xsl:value-of select="'contents.xhtml#sec2-'"/>-->
                          <xsl:value-of select="'contents.xhtml#'"/>
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_sec2-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H2']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'QH1'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_Qsec2_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'QH1']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <!--<xsl:value-of select="'contents.xhtml#sec2-'"/>-->
                          <xsl:value-of select="'contents.xhtml#'"/>
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_Qsec2-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'QH1']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'QH2'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_Qsec3_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'QH2']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <!--<xsl:value-of select="'contents.xhtml#sec2-'"/>-->
                          <xsl:value-of select="'contents.xhtml#'"/>
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_Qsec3-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'QH2']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H3'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_sec3_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H3']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <!--<xsl:value-of select="'contents.xhtml#sec3-'"/>-->
                          <xsl:value-of select="'contents.xhtml#'"/>
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_sec3-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H3']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H4'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_sec4_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H4']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <!--<xsl:value-of select="'contents.xhtml#sec4-'"/>-->
                          <xsl:value-of select="'contents.xhtml#'"/>
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_sec4-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H4']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H5'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="$filename"/>
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'_sec5_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H5']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec5-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H5']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H6'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_sec6_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H6']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec6-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H6']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H7'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_sec7_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H7']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec7-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H7']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H8'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="$filename"/>
                          <xsl:value-of select="'_sec8_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H8']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec8-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H8']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H9'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec9_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H9']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec9-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H9']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H10'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec10_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H10']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec10-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H10']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H11'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec11_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H11']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec11-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H11']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H12'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec12_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H12']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec12-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H12']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H13'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec13_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H13']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec13-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H13']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H14'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec14_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H14']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec14-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H14']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H15'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec15_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H15']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec15-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H15']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H16'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec16_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H16']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec16-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H16']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H17'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec17_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H17']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec17-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H17']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H18'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec18_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H18']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec18-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H18']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H19'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec19_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H19']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec19-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H19']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'H20'">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--<xsl:value-of select="concat($filename,'-sec3-')"/>  -->
                          <xsl:value-of select="'sec20_'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H20']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec20-'"/>
                          <xsl:number format="1" count="w:p[w:pPr/w:pStyle/@w:val = 'H20']"
                            level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="matches($paragraphStyle, '.*Heading.*')">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <!--10-sep-15: I've deleted the filename here, to shorten in content.xsl <xsl:value-of select="concat($filename,'-sec1-')"/> -->
                          <xsl:value-of select="'sec1_'"/>
                          <xsl:number format="1" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec1-'"/>
                          <xsl:number format="1" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="matches($paragraphStyle, '.*Times1')">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'sec1_'"/>
                          <xsl:number format="1" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec1-'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'DIPLOMICATimes1']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="matches($paragraphStyle, '.*Times2')">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'sec2_'"/>
                          <xsl:number format="1" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec2-'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'DIPLOMICATimes2']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="matches($paragraphStyle, '.*Times3')">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'sec3_'"/>
                          <xsl:number format="1" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec3-'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'DIPLOMICATimes3']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="matches($paragraphStyle, '.*Times4')">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'sec4_'"/>
                          <xsl:number format="1" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec4-'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'DIPLOMICATimes4']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="matches($paragraphStyle, '.*Times5')">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'sec5_'"/>
                          <xsl:number format="1" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec5-'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'DIPLOMICATimes5']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="matches($paragraphStyle, '.*Times6')">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'sec6_'"/>
                          <xsl:number format="1" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec6-'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'DIPLOMICATimes6']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="matches($paragraphStyle, '.*Times7')">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'sec7_'"/>
                          <xsl:number format="1" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec7-'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'DIPLOMICATimes7']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="matches($paragraphStyle, '.*Times8')">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'sec8_'"/>
                          <xsl:number format="1" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec8-'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'DIPLOMICATimes8']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="matches($paragraphStyle, '.*Times9')">
                      <xsl:element name="a">
                        <xsl:attribute name="id">
                          <xsl:value-of select="'sec9_'"/>
                          <xsl:number format="1" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="href">
                          <xsl:value-of select="'contents.xhtml#sec9-'"/>
                          <xsl:number format="1"
                            count="w:p[w:pPr/w:pStyle/@w:val = 'DIPLOMICATimes9']" level="any"/>
                        </xsl:attribute>
                        <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$paragraphStyle = 'TOCHdg2'"> </xsl:when>
                    <xsl:when test="$paragraphStyle = 'TOCHdg3'"> </xsl:when>
                    <xsl:when test="$paragraphStyle = 'TOCHdg4'"> </xsl:when>
                    <xsl:when test="$paragraphStyle = 'preview-review-header'"> </xsl:when>
                    <xsl:when test="$paragraphStyle = 'TOC Hdg2'"> </xsl:when>
                    <xsl:when test="$paragraphStyle = 'TOC Hdg3'"> </xsl:when>
                    <xsl:when test="$paragraphStyle = 'TOC Hdg4'"> </xsl:when>
                    <xsl:when test="$paragraphStyle = 'preview-review-header'"> </xsl:when>
                    <xsl:otherwise>
                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:element name="br"/>-->
                </xsl:element>

              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>

          <xsl:otherwise>
            <xsl:if
              test="w:r/w:t | w:r/w:sdt | w:sdt | w:r/w:pict | w:r/w:drawing | w:r/w:fldChar | w:bookmarkStart">
              <!-- 26-July-17: Added for para frame @@@@ POP-->
              <xsl:if
                test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']])">


                <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
                <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
                <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
                <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
                <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
                <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>
              </xsl:if>
              <!-- 26-July-17: Added for para frame END POP-->
              <xsl:element name="p">
                <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                <xsl:attribute name="class">
                  <xsl:choose>
                    <xsl:when test="string-length($paragraphStyle) > 0">
                      <xsl:value-of select="$paragraphStyle"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="'MsoNormal'"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <xsl:attribute name="data-name">
                  <xsl:choose>
                    <xsl:when test="string-length($paragraphStyleName) > 0">
                      <xsl:value-of select="$paragraphStyleName"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="'MsoNormal'"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <!-- 7-May-19 -->
                <!-- Because no style in docx, all are "Normal" -->
                <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                <xsl:choose>
                  <xsl:when
                    test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                    <xsl:attribute name="style">
                      <xsl:if test="child::w:pPr/w:shd">
                        <xsl:text> background:#</xsl:text>
                        <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        <xsl:text>;</xsl:text>
                      </xsl:if>
                      <!--****** new -->
                      <xsl:if test="child::w:pPr/w:ind">
                        <xsl:choose>
                          <xsl:when
                            test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                            <xsl:attribute name="style">
                              <xsl:if test="child::w:pPr/w:ind/@w:left">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="child::w:pPr/w:ind/@w:right">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:if>

                              <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="child::w:pPr/w:jc">
                                <xsl:text>text-align:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                            </xsl:attribute>
                          </xsl:when>
                          <xsl:when test="child::w:pPr/w:ind/@w:left">
                            <xsl:text>margin-left:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                            <xsl:text>pt;</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:when>
                          <xsl:when test="child::w:pPr/w:ind/@w:right">
                            <xsl:text>margin-right:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                            <xsl:text>pt;</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>style=text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:when>
                          <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:when>
                          <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:when>
                        </xsl:choose>
                      </xsl:if>
                      <!--<xsl:if test="child::w:pPr/w:jc">
                      <xsl:attribute name="style">
                        <xsl:text>text-align2:</xsl:text>
                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                        <xsl:text>;</xsl:text>   
                      </xsl:attribute>
                    </xsl:if>-->
                      <xsl:if test="w:pPr/w:rPr/w:color">
                        <xsl:choose>
                          <xsl:when test="$color = 'auto'">
                            <!-- <xsl:value-of select="'000000'"/>-->
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <xsl:when test="$color = 'auto'">
                                <xsl:value-of select="'color:000000;'"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:text>color: #</xsl:text>
                                <xsl:value-of select="$color"/>
                                <xsl:text>;</xsl:text>
                              </xsl:otherwise>
                            </xsl:choose>

                          </xsl:otherwise>
                        </xsl:choose>

                      </xsl:if>
                      <xsl:if test="contains($bulltype, '.%')">
                        <xsl:attribute name="type">
                          <xsl:value-of select="$indent"/>
                        </xsl:attribute>
                      </xsl:if>
                      <!-- new end -->
                      <!-- 16-feb-18: to set override styles -->
                      <xsl:if test="child::w:pPr/w:rPr/w:b">
                        <xsl:choose>
                          <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                            <xsl:text> font-weight:normal;</xsl:text>
                          </xsl:when>
                          <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = 'false']">
                            <xsl:text> font-weight:normal;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text> font-weight:bold;</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                      <xsl:if test="child::w:pPr/w:rPr/w:i">
                        <xsl:choose>
                          <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                            <xsl:text> font-style:normal;</xsl:text>
                          </xsl:when>
                          <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = 'false']">
                            <xsl:text> font-style:normal;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text> font-style:italic;</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                      <xsl:if test="child::w:pPr/w:rPr/w:caps">
                        <xsl:choose>
                          <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                            <xsl:text> text-transform: none !important;</xsl:text>
                          </xsl:when>
                          <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = 'false']">
                            <xsl:text> text-transform: none !important;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text> text-transform:uppercase;</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                      <!-- 16-feb-18: to set override styles -->
                    </xsl:attribute>

                    <xsl:apply-templates/>
                  </xsl:when>
                  <xsl:when test="child::w:sdt">
                    <xsl:apply-templates/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:apply-templates/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:element>

              <!-- 26-July-17: Added for para frame -->
              <!-- xsl:if test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and (following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']] or not(following-sibling::*[1][self::w:p/w:pPr/w:pBdr])) -->
              <xsl:if
                test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]))">

                <xsl:text disable-output-escaping="yes">&lt;div style="border:solid; windowtext:1.0pt;padding:</xsl:text>
                <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
                <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
                <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
                <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
                <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>

              </xsl:if>
              <!-- 26-July-17: Added for para frame END-->

            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
    <xsl:variable name="paragraphStyleName">
      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="$paragraphStyle = 'TOCHdg2'"> </xsl:when>
      <xsl:when test="$paragraphStyle = 'TOCHdg3'"> </xsl:when>
      <xsl:when test="$paragraphStyle = 'TOCHdg4'"> </xsl:when>
      <xsl:when test="$paragraphStyle = 'preview-review-header'"> </xsl:when>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="w:fldChar">
    <xsl:element name="span">
      <xsl:attribute name="data-fldChar" select="@w:fldCharType"/>
      <xsl:if test="@w:fldCharType = 'begin'">
        <xsl:attribute name="data-fldData" select="."/>
      </xsl:if>
      <xsl:attribute name="style" select="'display:none'"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="w:fldSimple">
    <xsl:element name="span">
      <xsl:attribute name="data-fldChar" select="@w:instr"/>
      <xsl:attribute name="style" select="'display:none'"/>
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="w:instrText">
    <xsl:element name="span">
      <!--<xsl:attribute name="data-instrText" select="'preserve'"/>-->
      <xsl:attribute name="data-instrText" select="."/>
      <xsl:attribute name="style" select="'display:none'"/>
      <!--<xsl:apply-templates/>-->
    </xsl:element>
  </xsl:template>



  <xsl:template match="w:r">
    <xsl:variable name="charStyle" select="w:rPr/w:rStyle/@w:val"/>
    <xsl:variable name="charStyleName">
      <!-- 04-Apr-18: The below logic changed to resolve the speed issue to applu data-name-->
      <!--<xsl:value-of select="//w:style[@w:styleId = $charStyle]/w:name/@w:val"/>-->
      <xsl:value-of select="/w:document/w:styles/w:style[@w:styleId = $charStyle][1]/w:name/@w:val"
      />
    </xsl:variable>
    <xsl:variable name="color" select="w:rPr/w:color/@w:val"/>
    <xsl:variable name="hcolor" select="w:rPr/w:highlight/@w:val"/>
    <xsl:variable name="bold" select="w:rPr/w:b"/>
    <xsl:variable name="scolor" select="w:rPr/w:shd/@w:fill"/>

    <xsl:choose>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'Highlight'] and w:rPr/w:b and //w:rFonts">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'Highlight'"/>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'CharOverride-4'"/>
            <xsl:element name="span">
              <xsl:attribute name="class" select="'arial'"/>
              <xsl:apply-templates/>
            </xsl:element>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'Highlight'] and w:rPr/w:b">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'Highlight'"/>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'CharOverride-4'"/>
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'Highlight'] and w:rPr/w:i">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'Highlight'"/>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'Italic'"/>
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:b and w:rPr[w:rStyle/@w:val = 'Highlight']">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'Highlight'"/>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'CharOverride-4'"/>
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'Highlight'] and $color = '99002E'">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'Highlight'"/>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'CharOverride-2'"/>
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'Highlight'] and $color = '980000'">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'Highlight'"/>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'CharOverride-2'"/>
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="$color = '99002E'">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'CharOverride-2'"/>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'Highlight'] and $charStyle = 'red'">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'Highlight'"/>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'CharOverride-2'"/>
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="$charStyle = 'red'">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'CharOverride-2'"/>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="$charStyle = 'FigureCitationX'">
        <xsl:variable name="content" select="lower-case(.)"/>
        <xsl:choose>
          <xsl:when test="parent::w:sdtContent">
            <xsl:apply-templates/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:choose>
              <xsl:when test="contains($content, 'fig')">
                <xsl:element name="a">
                  <xsl:attribute name="href">
                    <xsl:value-of select="concat($filename, '.xhtml#f')"/>
                    <xsl:value-of
                      select="translate(substring-after($content, '-'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"/>
                    <xsl:value-of
                      select="translate(substring-after($content, '.'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"
                    />
                  </xsl:attribute>
                  <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
                  <xsl:element name="span">
                    <xsl:attribute name="class" select="'FigureCitation'"/>
                    <xsl:apply-templates/>
                  </xsl:element>
                </xsl:element>
              </xsl:when>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="$charStyle = 'ex-figureref'">
        <xsl:variable name="content" select="lower-case(.)"/>
        <xsl:choose>
          <xsl:when test="contains($content, 'fig')">
            <xsl:element name="a">
              <xsl:attribute name="href">
                <xsl:value-of select="concat($filename, '.xhtml#f')"/>
                <xsl:value-of
                  select="translate(substring-after($content, '-'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"/>
                <xsl:value-of
                  select="translate(substring-after($content, '.'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"
                />
              </xsl:attribute>
              <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
              <xsl:element name="span">
                <xsl:attribute name="class" select="'FigureCitation'"/>
                <xsl:apply-templates/>
              </xsl:element>
            </xsl:element>
          </xsl:when>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="$charStyle = 'ex-crossref'">
        <xsl:variable name="content" select="lower-case(.)"/>
        <xsl:choose>
          <xsl:when test="contains($content, 'chapter')">
            <xsl:variable name="exch"
              select="translate($filename, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–_', '')"/>
            <xsl:element name="a">
              <xsl:attribute name="href">
                <xsl:value-of select="concat($filename, '.xhtml#f')"/>
                <xsl:value-of
                  select="translate(substring-after($content, '-'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"/>
                <xsl:value-of
                  select="translate(substring-after($content, '.'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"
                />
              </xsl:attribute>
              <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
              <xsl:element name="span">
                <xsl:attribute name="class" select="'FigureCitation'"/>
                <xsl:apply-templates/>
              </xsl:element>
            </xsl:element>
          </xsl:when>
        </xsl:choose>
      </xsl:when>

      <!--<xsl:when test="child::w:rPr/w:rStyle">
        <xsl:variable name="charStyle" select="child::w:rPr/w:rStyle/@w:val"/>
        <xsl:choose>
          <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
            <xsl:apply-templates/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:element name="span">
              <xsl:attribute name="class" select="$charStyle"/>
              <xsl:apply-templates/>
            </xsl:element>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>-->

      <xsl:when test="$charStyle = 'CrossRefHighlight'">
        <xsl:variable name="content" select="normalize-space(lower-case(.))"/>
        <xsl:choose>
          <xsl:when test="contains($content, 'fig')">
            <xsl:element name="a">
              <xsl:attribute name="href">
                <xsl:value-of select="concat($filename, '.xhtml#f')"/>
                <xsl:value-of
                  select="translate(substring-after(substring-after($content, ' '), '-'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"/>
                <xsl:value-of
                  select="translate(substring-after(substring-after($content, ' '), '.'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"/>
                <!--<xsl:value-of select="translate(substring-after(substring-after($content,' '), '-'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–','')"/>-->
                <!--<xsl:value-of select="translate(substring-after($content, '.'),' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–','')"/>-->
              </xsl:attribute>
              <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
              <xsl:element name="span">
                <xsl:attribute name="class" select="'CrossRefHighlight'"/>
                <xsl:apply-templates/>
              </xsl:element>
            </xsl:element>
          </xsl:when>
          <xsl:when test="contains($content, 'image')">
            <xsl:element name="a">
              <xsl:attribute name="href">
                <xsl:value-of select="concat($filename, '.xhtml#p')"/>
                <xsl:value-of
                  select="translate(substring-after(substring-after($content, ' '), '-'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"/>
                <xsl:value-of
                  select="translate(substring-after(substring-after($content, ' '), '.'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"/>
                <!--<xsl:value-of select="translate(substring-after($content, '-'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–','')"/>
                <xsl:value-of select="translate(substring-after($content, '.'),' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–','')"/>-->
              </xsl:attribute>
              <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
              <xsl:element name="span">
                <xsl:attribute name="class" select="'CrossRefHighlight'"/>
                <xsl:apply-templates/>
              </xsl:element>
            </xsl:element>
          </xsl:when>
          <xsl:when test="contains($content, 'tab')">
            <xsl:element name="a">
              <xsl:attribute name="href">
                <xsl:value-of select="concat($filename, '.xhtml#t')"/>
                <xsl:value-of
                  select="translate(substring-after($content, '-'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"/>
                <xsl:value-of
                  select="translate(substring-after($content, '.'), ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–', '')"
                />
              </xsl:attribute>
              <xsl:attribute name="title" select="concat($filename, '.xhtml')"/>
              <xsl:element name="span">
                <xsl:attribute name="class" select="'CrossRefHighlight'"/>
                <xsl:apply-templates/>
              </xsl:element>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <xsl:element name="span">
              <xsl:attribute name="class" select="'CrossRefHighlight'"/>
              <xsl:apply-templates/>
            </xsl:element>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="$charStyle = 'ItalicHighlight'">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'ItalicHighlight'"/>

          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="$charStyle = 'citebib'">
        <xsl:element name="bibr">
          <xsl:variable name="a" select="."/>



          <xsl:variable name="aa">
            <xsl:choose>
              <xsl:when test="contains($a, '’')">
                <xsl:value-of select="substring-before($a, '’')"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="$a"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:variable>

          <xsl:variable name="aname" select="replace($aa, '[^A-Za-z ]', '')"/>
          <xsl:variable name="astrlen" select="string-length($aname)"/>
          <xsl:choose>
            <!-- 15-04-16: Here i checking if the <bibyear> has 2001a or 0000b, then i;m inserting this a/b/c inside bibsurnam's aname -->
            <xsl:when test="$astrlen = 1">
              <xsl:attribute name="aname">
                <xsl:value-of select="''"/>
              </xsl:attribute>
            </xsl:when>
            <xsl:when test="contains($aname, 'et al')">
              <xsl:attribute name="aname">
                <xsl:value-of select="translate(substring-before($aname, 'et al'), ' ', '')"/>
              </xsl:attribute>
              <xsl:attribute name="aname3">
                <xsl:value-of select="'et al'"/>
              </xsl:attribute>
            </xsl:when>
            <xsl:when test="contains($aname, ' a')">
              <xsl:attribute name="aname">
                <xsl:value-of select="translate(substring-before($aname, ' a'), ' ', '')"/>
              </xsl:attribute>
            </xsl:when>
            <xsl:when test="contains($aname, ' b')">
              <xsl:attribute name="aname">
                <xsl:value-of select="translate(substring-before($aname, ' b'), ' ', '')"/>
              </xsl:attribute>
            </xsl:when>
            <xsl:when test="contains($aname, ' c')">
              <xsl:attribute name="aname">
                <xsl:value-of select="translate(substring-before($aname, ' c'), ' ', '')"/>
              </xsl:attribute>
            </xsl:when>
            <xsl:when test="contains($aname, ' d')">
              <xsl:attribute name="aname">
                <xsl:value-of select="translate(substring-before($aname, ' d'), ' ', '')"/>
              </xsl:attribute>
            </xsl:when>
            <xsl:when test="contains($aname, ' e')">
              <xsl:attribute name="aname">
                <xsl:value-of select="translate(substring-before($aname, ' e'), ' ', '')"/>
              </xsl:attribute>
            </xsl:when>
            <xsl:when test="contains($aname, ' f')">
              <xsl:attribute name="aname">
                <xsl:value-of select="translate(substring-before($aname, ' f'), ' ', '')"/>
              </xsl:attribute>
            </xsl:when>
            <xsl:when test="contains($aname, ' and ')">
              <xsl:attribute name="aname">
                <xsl:value-of select="translate(substring-before($aname, ' and '), ' ', '')"/>
              </xsl:attribute>
              <xsl:attribute name="aname2">
                <xsl:value-of select="translate(substring-after($aname, ' and '), '  ', '')"/>
              </xsl:attribute>
            </xsl:when>
            <xsl:otherwise>
              <xsl:attribute name="aname">
                <xsl:value-of select="translate($aname, ' ,()-–.', '')"/>
              </xsl:attribute>
            </xsl:otherwise>
          </xsl:choose>

          <!--<xsl:attribute name="aname">
            <xsl:value-of select="$aname"></xsl:value-of>            
          </xsl:attribute>-->
          <!--<xsl:attribute name="year">
            <xsl:value-of select="$year1"></xsl:value-of>
          </xsl:attribute>-->
          <xsl:attribute name="year">
            <xsl:analyze-string select="$a" regex="(.)*([0-9])([0-9])([0-9])([0-9])([a-zA-Z])">
              <xsl:matching-substring>
                <xsl:variable name="yearlen" select="string-length(regex-group(5))"/>
                <xsl:choose>
                  <xsl:when test="$yearlen &lt; 2">
                    <xsl:value-of
                      select="concat(regex-group(2), regex-group(3), regex-group(4), regex-group(5), regex-group(6))"
                    />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="regex-group(5)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:matching-substring>
              <xsl:non-matching-substring>
                <xsl:value-of select="replace($a, '[^0-9]', '')"/>
              </xsl:non-matching-substring>
            </xsl:analyze-string>
            <!--<xsl:value-of select="replace($a,'[^0-9]','')"/>-->
          </xsl:attribute>

          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="$charStyle = 'bibsurcccccname'">
        <xsl:choose>
          <xsl:when test="$charStyle[1]">
            <xsl:element name="bibsurnameX">
              <xsl:attribute name="class" select="'bibsurname'"/>
              <xsl:attribute name="v">
                <xsl:value-of select="."/>
              </xsl:attribute>
              <xsl:apply-templates/>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <xsl:element name="span">
              <xsl:attribute name="class" select="'bibsurname'"/>
              <xsl:apply-templates/>
            </xsl:element>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="$charStyle = 'bibyear'">
        <xsl:element name="bibyear">
          <xsl:attribute name="class" select="'bibyear'"/>
          <xsl:attribute name="m">
            <xsl:variable name="mm"
              select="translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–(). ', '')"/>
            <xsl:variable name="a" select="."/>
            <!--<xsl:value-of select="$mm"></xsl:value-of>-->

            <xsl:analyze-string select="$a" regex="(.)*([0-9])([0-9])([0-9])([0-9])([a-zA-Z])">
              <xsl:matching-substring>
                <xsl:variable name="yearlen" select="string-length(regex-group(5))"/>
                <xsl:choose>
                  <xsl:when test="$yearlen &lt; 2">
                    <xsl:value-of
                      select="concat(regex-group(2), regex-group(3), regex-group(4), regex-group(5), regex-group(6))"
                    />
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="regex-group(5)"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:matching-substring>
              <xsl:non-matching-substring>
                <xsl:value-of select="replace($a, '[^0-9]', '')"/>
              </xsl:non-matching-substring>
            </xsl:analyze-string>
          </xsl:attribute>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="$charStyle = 'italicX'">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'italic'"/>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="$charStyle = 'boldX'">
        <xsl:element name="b">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="ancestor::w:sdtContentX">
        <xsl:variable name="charstyle" select="child::w:rPr/w:rStyle/@w:val"/>
        <xsl:choose>
          <xsl:when test="$charstyle">
            <xsl:choose>
              <xsl:when
                test="
                  contains($charstyle, 'No character style') or contains($charstyle, 'NO CHARACTER STYLE')
                  or contains($charstyle, 'Nocharacterstyle')">
                <xsl:apply-templates/>
              </xsl:when>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:apply-templates/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="ancestor::w:tc">
        <xsl:variable name="charstyle" select="child::w:rPr/w:rStyle/@w:val"/>

        <xsl:choose>
          <xsl:when
            test="
              contains($charstyle, 'No character style') or contains($charstyle, 'NO CHARACTER STYLE')
              or contains($charstyle, 'Nocharacterstyle')">
            <xsl:apply-templates/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:choose>

              <xsl:when test="child::w:rPr/w:rStyle/@w:val">
                <!--<span class="{concat('tbl_', child::w:rPr/w:rStyle/@w:val)}">-->
                <!--<xsl:apply-templates/>-->
                <xsl:choose>

                  <xsl:when
                    test="w:rPr/w:i | w:rPr/w:b | w:rPr/w:rFonts | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:rPr/w:smallCaps | w:rPr/w:u | w:rPr/w:strike | w:rPr/w:caps | w:rPr/w:dstrike | w:rPr/w:vertAlign | w:rPr/w:highlight">
                    <xsl:if test="w:rPr/w:rPrChange">
                      <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal !msorm'"&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                      <xsl:text disable-output-escaping="yes">&lt;sup&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                      <xsl:text disable-output-escaping="yes">&lt;sub&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if
                      test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
                      <xsl:text disable-output-escaping="yes">&lt;b&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if
                      test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                      <xsl:text disable-output-escaping="yes">&lt;i&gt;</xsl:text>
                    </xsl:if>
                    <!--<xsl:if test="w:rPr/w:u and not(w:rPr/w:u/@w:val = 'false')">
          <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
        </xsl:if>-->
                    <xsl:if test="w:rPr/w:u">
                      <xsl:if test="w:rPr/w:u">
                        <xsl:choose>
                          <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                            <xsl:text disable-output-escaping="yes">&lt;span class="DUnderline"&gt;</xsl:text>
                          </xsl:when>
                          <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                            <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                              <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                            </xsl:if>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:strike">
                      <xsl:text disable-output-escaping="yes">&lt;s&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                      <xsl:text disable-output-escaping="yes">&lt;small&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:dstrike">
                      <xsl:text disable-output-escaping="yes">&lt;span class="double-strike"&gt;</xsl:text>
                      <xsl:text disable-output-escaping="yes">&lt;div class="the-lines"/&gt;</xsl:text>
                    </xsl:if>

                    <!-- Group SPAN tag -->
                    <xsl:if
                      test="
                        w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:u | w:rPr/w:smallCaps | w:rPr/w:highlight | w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false']
                        | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false']">
                      <xsl:text disable-output-escaping="yes">&lt;span</xsl:text>

                      <xsl:if test="w:rPr/w:rFonts">
                        <xsl:choose>
                          <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                            <xsl:text disable-output-escaping="yes"> style="font-family:</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="mso-fareast-font-family:</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>

                        <xsl:choose>
                          <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                            <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                          </xsl:when>
                          <xsl:when test="w:rPr/w:rFonts/@w:cs">
                            <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                          </xsl:when>
                          <xsl:when test="w:rPr/w:rFonts/@w:eastAsia">
                            <xsl:value-of select="w:rPr/w:rFonts/@w:eastAsia"/>
                          </xsl:when>
                          <xsl:when
                            test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                            <xsl:value-of
                              select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"
                            />
                          </xsl:when>
                          <xsl:when
                            test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                            <xsl:value-of
                              select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                            />
                          </xsl:when>
                          <xsl:when
                            test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                            <xsl:value-of
                              select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                            />
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of
                              select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                            />
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- 13-May-18: Added  LANG attribute -->
                        <xsl:if test="w:rPr/w:lang">
                          <xsl:text>;mso-fareast-language:</xsl:text>
                          <xsl:value-of select="upper-case(w:rPr/w:lang/@w:eastAsia)"/>
                        </xsl:if>
                        <!--<xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>-->
                        <xsl:text/>
                      </xsl:if>
                      <!-- check for un-bold -->
                      <xsl:if test="w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                        <xsl:if test="w:rPr/w:rFonts">
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when test="w:rPr/w:rFonts">
                            <xsl:text disable-output-escaping="yes"> font-weight:</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="font-weight:</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                        <xsl:choose>
                          <xsl:when test="child::w:rPr/w:b[@w:val = '0']">
                            <xsl:text> normal</xsl:text>
                          </xsl:when>
                          <xsl:when test="child::w:rPr/w:b[@w:val = 'false']">
                            <xsl:text> normal</xsl:text>
                          </xsl:when>
                          <!--<xsl:otherwise>
                <xsl:text> bold</xsl:text>
              </xsl:otherwise>-->
                        </xsl:choose>
                      </xsl:if>
                      <!-- check for un-italic -->
                      <xsl:if test="w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                        <xsl:if test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                            <xsl:text disable-output-escaping="yes"> font-style:</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="font-style:</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                        <xsl:choose>
                          <xsl:when test="child::w:rPr/w:i[@w:val = '0']">
                            <xsl:text> normal</xsl:text>
                          </xsl:when>
                          <xsl:when test="child::w:rPr/w:i[@w:val = 'false']">
                            <xsl:text> normal</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <!--  <xsl:text> italic</xsl:text>-->
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>

                      <xsl:if test="w:rPr/w:szCs and not(w:rPr/w:sz)">
                        <xsl:if
                          test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                            <xsl:text disable-output-escaping="yes"> font-size:'</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                        <xsl:value-of select="(w:rPr/w:szCs/@w:val) div 2"/>
                        <xsl:text>pt'</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:sz">
                        <xsl:if
                          test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                            <xsl:text disable-output-escaping="yes"> font-size:</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="font-size:</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                        <xsl:value-of select="(w:rPr/w:sz/@w:val) div 2"/>
                        <xsl:text>pt</xsl:text>
                      </xsl:if>

                      <xsl:if test="w:rPr/w:color">
                        <xsl:if
                          test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position">
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when
                            test="w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                            <xsl:text disable-output-escaping="yes"> </xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                        <xsl:choose>
                          <xsl:when test="$color = 'auto'">
                            <xsl:value-of select="'000000'"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                            <xsl:value-of select="$color"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:value-of select="$color"/>-->
                        <xsl:text/>
                      </xsl:if>
                      <!-- END of COLOR -->
                      <!-- HIGHLIGHT -->
                      <xsl:if test="w:rPr/w:highlight">
                        <xsl:if
                          test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position | w:rPr/w:color">
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when
                            test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position | w:rPr/w:color">
                            <xsl:text disable-output-escaping="yes"> </xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                        <xsl:choose>
                          <xsl:when test="$hcolor = 'auto'">
                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                            <xsl:value-of select="'000000'"/>
                          </xsl:when>
                          <xsl:when test="$hcolor = 'lightGray'">
                            <xsl:text disable-output-escaping="yes">background-color: #</xsl:text>
                            <xsl:value-of select="'E8E8E8'"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                            <xsl:value-of select="$hcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:value-of select="$color"/>-->
                        <xsl:text/>
                      </xsl:if>
                      <!-- END of HIGHLIGHT -->
                      <!-- position -->
                      <xsl:if test="w:rPr/w:position">
                        <xsl:if
                          test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight">
                          <xsl:text>; </xsl:text>
                        </xsl:if>
                        <xsl:if
                          test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight)">
                          <xsl:text> style="</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when test="child::w:rPr/w:position">
                            <xsl:variable name="val" select="child::w:rPr/w:position/@w:val"/>
                            <xsl:choose>
                              <xsl:when test="contains($val, '-')">
                                <xsl:text>position:relative;top:</xsl:text>
                                <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                                <xsl:text>pt;mso-text-raise:-</xsl:text>
                                <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                                <xsl:text>pt</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:text>position:relative;top:-</xsl:text>
                                <xsl:value-of select="number($val) div 2"/>
                                <xsl:text>pt;mso-text-raise:</xsl:text>
                                <xsl:value-of select="number($val) div 2"/>
                                <xsl:text>pt</xsl:text>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:when>
                        </xsl:choose>
                      </xsl:if>
                      <!-- SMALLCAPS -->
                      <xsl:if test="w:rPr/w:smallCaps">
                        <xsl:if
                          test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight">
                          <xsl:text>; </xsl:text>
                        </xsl:if>
                        <xsl:if
                          test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight)">
                          <xsl:text> style="</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when test="child::w:rPr/w:smallCaps[not(@w:val = '0')]">
                            <xsl:text>font-variant: 'small-caps';</xsl:text>
                          </xsl:when>
                        </xsl:choose>
                      </xsl:if>
                      <!-- END SMALLCAPS -->
                      <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                    </xsl:if>
                    <!-- Group SPAN tag END-->
                    <!-- 27-sep-16 prasanth asked to give class name also -->
                    <xsl:variable name="classname" select="child::w:rPr/w:rStyle[1]/@w:val"/>
                    <xsl:choose>
                      <xsl:when test="string-length($classname) > 0">
                        <xsl:choose>
                          <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'CommentReference'">
                            <!--<span contenteditable="false" data-selected="true" data-track-changes-ignore="true"
                    name="cmd2"><img data-selected="true" data-track-changes-ignore="true" id="cmd2"
                      src="icon.png" style="width:15px;height:15px;"
                      title="Mariselvam:asd fasdfMariselvam:asd fasdf dsaf"/>-->



                            <xsl:element name="span">
                              <xsl:attribute name="class">
                                <xsl:value-of select="'CommentReference'"/>
                              </xsl:attribute>
                              <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
                              <xsl:attribute name="name">
                                <xsl:text>cmtref</xsl:text>
                                <xsl:value-of select="child::w:commentReference[1]/@w:id + 1"/>
                              </xsl:attribute>
                              <!--<xsl:attribute name="style" select="'display:none'"/>-->
                              <xsl:apply-templates/>
                            </xsl:element>

                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                      
                      <xsl:value-of select="upper-case(.)"/>
                    </xsl:when>-->
                              <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                                <xsl:element name="span">
                                  <xsl:attribute name="style">
                                    <xsl:value-of select="'text-transform: uppercase'"/>
                                  </xsl:attribute>
                                  <xsl:apply-templates/>
                                </xsl:element>
                                <!--<xsl:value-of select="upper-case(.)"/>-->
                              </xsl:when>
                              <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                                <xsl:element name="span">
                                  <xsl:attribute name="style">
                                    <xsl:value-of select="'font-variant: small-caps'"/>
                                  </xsl:attribute>
                                  <xsl:apply-templates/>
                                </xsl:element>
                              </xsl:when>
                              <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
                                <xsl:apply-templates/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:element name="span">
                                  <xsl:attribute name="class">
                                    <!--<xsl:value-of select="child::w:rPr/w:rStyle/@w:val"/>-->
                                    <xsl:value-of
                                      select="replace(child::w:rPr/w:rStyle[1]/@w:val, '^([0-9]+)', '')"
                                    />
                                  </xsl:attribute>
                                  <xsl:attribute name="data-name">
                                    <xsl:choose>
                                      <xsl:when test="string-length($charStyleName) > 0">
                                        <xsl:value-of
                                          select="replace($charStyleName, '^([0-9]+)', '')"/>
                                      </xsl:when>
                                      <xsl:otherwise>
                                        <xsl:value-of select="'Normal'"/>
                                      </xsl:otherwise>
                                    </xsl:choose>
                                  </xsl:attribute>

                                  <!-- mahesh -->
                                  <!--                            <xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0']">
                              <xsl:text disable-output-escaping="yes">&lt;spanA style="font-style:normal;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:caps[@w:val = '0']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="text-transform: none;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:smallCaps[@w:val = '0']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="font-variant: none;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:strike[@w:val = '0']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:u[@w:val = 'none']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:vertAlign[@w:val = 'baseline']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="vertical-align: baseline;"&gt;</xsl:text>
                            </xsl:if>-->
                                  <xsl:apply-templates/>

                                  <!--<xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0'] | w:rPr/w:smallCaps[@w:val = '0'] | w:rPr/w:caps[@w:val = '0'] 
                        | w:rPr/w:strike[@w:val = '0'] | w:rPr/w:vertAlign[@w:val = 'baseline'] | w:rPr/w:u[@w:val = 'none']">
                        <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                      </xsl:if>-->
                                </xsl:element>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
              <xsl:apply-templates/> 
            </span>-->
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:choose>
                          <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                
                    <xsl:value-of select="upper-case(.)"/>
                  </xsl:when>-->
                          <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                            <xsl:element name="span">
                              <xsl:attribute name="style">
                                <xsl:value-of select="'text-transform: uppercase'"/>
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:element>
                            <!--<xsl:value-of select="upper-case(.)"/>-->
                          </xsl:when>
                          <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                            <xsl:element name="span">
                              <xsl:attribute name="style">
                                <xsl:value-of select="'font-variant: small-caps'"/>
                              </xsl:attribute>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:apply-templates/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:otherwise>
                    </xsl:choose>
                    <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
          <xsl:apply-templates/>
        </span>-->
                    <xsl:if
                      test="w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false'] | w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:position | w:rPr/w:color | w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:highlight">
                      <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                    </xsl:if>

                    <xsl:if test="w:rPr/w:dstrike">
                      <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                      <xsl:text disable-output-escaping="yes">&lt;/small&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:strike">
                      <xsl:text disable-output-escaping="yes">&lt;/s&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:u">
                      <xsl:choose>
                        <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                          <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                        </xsl:when>
                        <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                          <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                            <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                          </xsl:if>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:if>
                    <xsl:if
                      test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                      <xsl:text disable-output-escaping="yes">&lt;/i&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if
                      test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
                      <xsl:text disable-output-escaping="yes">&lt;/b&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                      <xsl:text disable-output-escaping="yes">&lt;/sub&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                      <xsl:text disable-output-escaping="yes">&lt;/sup&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:rPrChange">
                      <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                    </xsl:if>
                  </xsl:when>

                  <!-- ***********w:b********** -->
                  <xsl:when
                    test="w:rPr/w:b | w:rPr/w:i | w:rPr/w:rFonts | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:rPr/w:smallCaps | w:rPr/w:u | w:rPr/w:strike | w:rPr/w:caps | w:rPr/w:dstrike | w:rPr/w:vertAlign">
                    <xsl:if test="w:rPr/w:rPrChange">
                      <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal !msorm'"&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                      <xsl:text disable-output-escaping="yes">&lt;sup&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                      <xsl:text disable-output-escaping="yes">&lt;sub&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if
                      test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                      <xsl:text disable-output-escaping="yes">&lt;i&gt;</xsl:text>
                    </xsl:if>

                    <!--<xsl:if test="w:rPr/w:u and not(w:rPr/w:u/@w:val = 'false')">
          <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
        </xsl:if>-->
                    <xsl:if test="w:rPr/w:u">
                      <xsl:if test="w:rPr/w:u">
                        <xsl:choose>
                          <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                            <xsl:text disable-output-escaping="yes">&lt;span class="DUnderline"&gt;</xsl:text>
                          </xsl:when>
                          <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                            <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                              <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                            </xsl:if>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:strike">
                      <xsl:text disable-output-escaping="yes">&lt;s&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                      <xsl:text disable-output-escaping="yes">&lt;small&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:dstrike">
                      <xsl:text disable-output-escaping="yes">&lt;span class="double-strike"&gt;</xsl:text>
                      <xsl:text disable-output-escaping="yes">&lt;div class="the-lines"/&gt;</xsl:text>
                    </xsl:if>

                    <!-- Group SPAN tag -->
                    <xsl:if
                      test="
                        w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:u | w:rPr/w:smallCaps
                        | w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false']">
                      <xsl:text disable-output-escaping="yes">&lt;span</xsl:text>
                      <xsl:if test="w:rPr/w:rFonts">
                        <xsl:choose>
                          <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                            <xsl:text disable-output-escaping="yes"> style="font-family:</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="mso-fareast-font-family:</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>

                        <xsl:choose>
                          <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                            <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                          </xsl:when>
                          <xsl:when test="w:rPr/w:rFonts/@w:cs">
                            <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                          </xsl:when>
                          <xsl:when test="w:rPr/w:rFonts/@w:eastAsia">
                            <xsl:value-of select="w:rPr/w:rFonts/@w:eastAsia"/>
                          </xsl:when>
                          <xsl:when
                            test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                            <xsl:value-of
                              select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"
                            />
                          </xsl:when>
                          <xsl:when
                            test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                            <xsl:value-of
                              select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                            />
                          </xsl:when>
                          <xsl:when
                            test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                            <xsl:value-of
                              select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                            />
                          </xsl:when>
                          <xsl:otherwise>
                            <!--<xsl:value-of select="w:rPr/w:rFonts/@w:asciiTheme"/>-->
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- 13-May-18: Added  LANG attribute -->
                        <xsl:if test="w:rPr/w:lang">
                          <xsl:text>;mso-fareast-language:</xsl:text>
                          <xsl:value-of select="upper-case(w:rPr/w:lang/@w:eastAsia)"/>
                        </xsl:if>
                        <xsl:text/>
                      </xsl:if>
                      <!-- check for un-bold -->
                      <xsl:if test="w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                        <xsl:if test="w:rPr/w:rFonts">
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when test="w:rPr/w:rFonts">
                            <xsl:text disable-output-escaping="yes"> font-weight:</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="font-weight:</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                        <xsl:choose>
                          <xsl:when test="child::w:rPr/w:b[@w:val = '0']">
                            <xsl:text> normal;</xsl:text>
                          </xsl:when>
                          <xsl:when test="child::w:rPr/w:b[@w:val = 'false']">
                            <xsl:text> normal;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text> bold</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                      <!-- check for un-italic -->
                      <xsl:if test="w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                        <xsl:if test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                            <xsl:text disable-output-escaping="yes"> font-style:</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="font-style:</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                        <xsl:choose>
                          <xsl:when test="child::w:rPr/w:i[@w:val = '0']">
                            <xsl:text> normal;</xsl:text>
                          </xsl:when>
                          <xsl:when test="child::w:rPr/w:i[@w:val = 'false']">
                            <xsl:text> normal;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text> italic;</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>

                      <xsl:if test="w:rPr/w:szCs and not(w:rPr/w:sz)">
                        <xsl:if
                          test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                            <xsl:text disable-output-escaping="yes"> font-size:'</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                        <xsl:value-of select="(w:rPr/w:szCs/@w:val) div 2"/>
                        <xsl:text>pt'</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:sz">
                        <xsl:if
                          test="w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                            <xsl:text disable-output-escaping="yes"> font-size:</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="font-size:</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                        <xsl:value-of select="(w:rPr/w:sz/@w:val) div 2"/>
                        <xsl:text>pt</xsl:text>
                      </xsl:if>


                      <xsl:if test="w:rPr/w:color">
                        <xsl:if
                          test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position">
                          <xsl:text>;</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when
                            test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:rFonts | w:rPr/w:position">
                            <xsl:text disable-output-escaping="yes"> </xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes"> style="</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:text disable-output-escaping="yes"> style="'</xsl:text>  -->

                        <xsl:choose>
                          <xsl:when test="$color = 'auto'">
                            <xsl:value-of select="'000000'"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                            <xsl:value-of select="$color"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<xsl:value-of select="$color"/>-->
                      </xsl:if>
                      <!-- position -->
                      <xsl:if test="w:rPr/w:position">
                        <xsl:if
                          test="w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                          <xsl:text>; </xsl:text>
                        </xsl:if>
                        <xsl:if
                          test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:rFonts | w:rPr/w:color)">
                          <xsl:text> style="</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when test="child::w:rPr/w:position">
                            <xsl:variable name="val" select="child::w:rPr/w:position/@w:val"/>
                            <xsl:choose>
                              <xsl:when test="contains($val, '-')">
                                <xsl:text>position:relative;top:</xsl:text>
                                <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                                <xsl:text>pt;mso-text-raise:-</xsl:text>
                                <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                                <xsl:text>pt</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:text>position:relative;top:-</xsl:text>
                                <xsl:value-of select="number($val) div 2"/>
                                <xsl:text>pt;mso-text-raise:</xsl:text>
                                <xsl:value-of select="number($val) div 2"/>
                                <xsl:text>pt</xsl:text>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:when>
                        </xsl:choose>
                      </xsl:if>
                      <!-- end POSITION -->
                      <!-- SMALLCAPS -->
                      <xsl:if test="w:rPr/w:smallCaps">
                        <xsl:if
                          test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position">
                          <xsl:text>; </xsl:text>
                        </xsl:if>
                        <xsl:if
                          test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position)">
                          <xsl:text> style="</xsl:text>
                        </xsl:if>
                        <xsl:choose>
                          <xsl:when test="child::w:rPr/w:smallCaps[not(@w:val = '0')]">
                            <xsl:text>font-variant: 'small-caps';</xsl:text>
                          </xsl:when>
                        </xsl:choose>
                      </xsl:if>
                      <!-- END SMALLCAPS -->

                      <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                    </xsl:if>
                    <!-- Group SPAN tag END-->

                    <!-- 27-sep-16 prasanth asked to give class name also -->
                    <xsl:variable name="classname" select="child::w:rPr/w:rStyle/@w:val"/>
                    <xsl:choose>
                      <xsl:when test="string-length($classname) > 0">
                        <xsl:choose>
                          <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'CommentReference'">
                            <!--<span contenteditable="false" data-selected="true" data-track-changes-ignore="true"
                    name="cmd2"><img data-selected="true" data-track-changes-ignore="true" id="cmd2"
                      src="icon.png" style="width:15px;height:15px;"
                      title="Mariselvam:asd fasdfMariselvam:asd fasdf dsaf"/>-->



                            <xsl:element name="span">
                              <xsl:attribute name="class">
                                <xsl:value-of select="'CommentReference'"/>
                              </xsl:attribute>
                              <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
                              <xsl:attribute name="name">
                                <xsl:text>cmtref</xsl:text>
                                <xsl:value-of select="child::w:commentReference/@w:id + 1"/>
                              </xsl:attribute>
                              <!--<xsl:attribute name="style" select="'display:none'"/>-->
                              <xsl:apply-templates/>
                            </xsl:element>

                          </xsl:when>
                          <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
                            <xsl:apply-templates/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="span">
                              <xsl:attribute name="class">
                                <!--<xsl:value-of select="child::w:rPr/w:rStyle/@w:val"/>-->
                                <xsl:value-of
                                  select="replace(child::w:rPr/w:rStyle/@w:val, '^([0-9]+)', '')"/>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($charStyleName) > 0">
                                    <xsl:value-of select="replace($charStyleName, '^([0-9]+)', '')"
                                    />
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'Normal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>

                              <!-- mahesh -->
                              <xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0']">
                                <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal;"&gt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0']">
                                <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal;"&gt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="w:rPr/w:caps[@w:val = '0']">
                                <xsl:text disable-output-escaping="yes">&lt;span style="text-transform: none;"&gt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="w:rPr/w:smallCaps[@w:val = '0']">
                                <xsl:text disable-output-escaping="yes">&lt;span style="font-variant: none;"&gt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="w:rPr/w:strike[@w:val = '0']">
                                <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="w:rPr/w:u[@w:val = 'none']">
                                <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                              </xsl:if>
                              <xsl:if test="w:rPr/w:vertAlign[@w:val = 'baseline']">
                                <xsl:text disable-output-escaping="yes">&lt;span style="vertical-align: baseline;"&gt;</xsl:text>
                              </xsl:if>
                              <xsl:apply-templates/>

                              <xsl:if
                                test="
                                  w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0'] | w:rPr/w:smallCaps[@w:val = '0'] | w:rPr/w:caps[@w:val = '0']
                                  | w:rPr/w:strike[@w:val = '0'] | w:rPr/w:vertAlign[@w:val = 'baseline'] | w:rPr/w:u[@w:val = 'none']">
                                <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                              </xsl:if>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
              <xsl:apply-templates/> 
            </span>-->
                      </xsl:when>
                      <xsl:otherwise>
                        <!--<xsl:choose>
              <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">
                <xsl:value-of select="upper-case(.)"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:apply-templates/>    
              </xsl:otherwise>
            </xsl:choose>     -->
                        <xsl:choose>
                          <xsl:when test="string-length($classname) > 0">
                            <xsl:choose>
                              <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'CommentReference'">
                                <!--<span contenteditable="false" data-selected="true" data-track-changes-ignore="true"
                    name="cmd2"><img data-selected="true" data-track-changes-ignore="true" id="cmd2"
                      src="icon.png" style="width:15px;height:15px;"
                      title="Mariselvam:asd fasdfMariselvam:asd fasdf dsaf"/>-->



                                <xsl:element name="span">
                                  <xsl:attribute name="class">
                                    <xsl:value-of select="'CommentReference'"/>
                                  </xsl:attribute>
                                  <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
                                  <xsl:attribute name="name">
                                    <xsl:text>cmtref</xsl:text>
                                    <xsl:value-of select="child::w:commentReference/@w:id + 1"/>
                                  </xsl:attribute>
                                  <!--<xsl:attribute name="style" select="'display:none'"/>-->
                                  <xsl:apply-templates/>
                                </xsl:element>

                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:choose>
                                  <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                      
                      <xsl:value-of select="upper-case(.)"/>
                    </xsl:when>-->
                                  <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                                    <xsl:element name="span">
                                      <xsl:attribute name="style">
                                        <xsl:value-of select="'text-transform: uppercase'"/>
                                      </xsl:attribute>
                                      <xsl:apply-templates/>
                                    </xsl:element>
                                    <!--<xsl:value-of select="upper-case(.)"/>-->
                                  </xsl:when>
                                  <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                                    <xsl:element name="span">
                                      <xsl:attribute name="style">
                                        <xsl:value-of select="'font-variant: small-caps'"/>
                                      </xsl:attribute>
                                      <xsl:apply-templates/>
                                    </xsl:element>
                                  </xsl:when>
                                  <xsl:when
                                    test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
                                    <xsl:apply-templates/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:element name="span">
                                      <xsl:attribute name="class">
                                        <!--<xsl:value-of select="child::w:rPr/w:rStyle/@w:val"/>-->
                                        <xsl:value-of
                                          select="replace(child::w:rPr/w:rStyle/@w:val, '^([0-9]+)', '')"
                                        />
                                      </xsl:attribute>
                                      <xsl:attribute name="data-name">
                                        <xsl:choose>
                                          <xsl:when test="string-length($charStyleName) > 0">
                                            <xsl:value-of
                                              select="replace($charStyleName, '^([0-9]+)', '')"/>
                                          </xsl:when>
                                          <xsl:otherwise>
                                            <xsl:value-of select="'Normal'"/>
                                          </xsl:otherwise>
                                        </xsl:choose>
                                      </xsl:attribute>
                                      <!-- mahesh -->
                                      <xsl:if
                                        test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0']">
                                        <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal;"&gt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if
                                        test="w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0']">
                                        <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal;"&gt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="w:rPr/w:caps[@w:val = '0']">
                                        <xsl:text disable-output-escaping="yes">&lt;span style="text-transform: none;"&gt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="w:rPr/w:smallCaps[@w:val = '0']">
                                        <xsl:text disable-output-escaping="yes">&lt;span style="font-variant: none;"&gt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="w:rPr/w:strike[@w:val = '0']">
                                        <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="w:rPr/w:u[@w:val = 'none']">
                                        <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'baseline']">
                                        <xsl:text disable-output-escaping="yes">&lt;span style="vertical-align: baseline;"&gt;</xsl:text>
                                      </xsl:if>
                                      <xsl:apply-templates/>

                                      <xsl:if
                                        test="
                                          w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0'] | w:rPr/w:smallCaps[@w:val = '0'] | w:rPr/w:caps[@w:val = '0']
                                          | w:rPr/w:strike[@w:val = '0'] | w:rPr/w:vertAlign[@w:val = 'baseline'] | w:rPr/w:u[@w:val = 'none']">
                                        <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                                      </xsl:if>
                                    </xsl:element>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:otherwise>
                            </xsl:choose>
                            <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
              <xsl:apply-templates/> 
            </span>-->
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:choose>
                              <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                
                    <xsl:value-of select="upper-case(.)"/>
                  </xsl:when>-->
                              <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                                <xsl:element name="span">
                                  <xsl:attribute name="style">
                                    <xsl:value-of select="'text-transform: uppercase'"/>
                                  </xsl:attribute>
                                  <xsl:apply-templates/>
                                </xsl:element>
                                <!--<xsl:value-of select="upper-case(.)"/>-->
                              </xsl:when>
                              <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                                <xsl:element name="span">
                                  <xsl:attribute name="style">
                                    <xsl:value-of select="'font-variant: small-caps'"/>
                                  </xsl:attribute>
                                  <xsl:apply-templates/>
                                </xsl:element>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:apply-templates/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:otherwise>
                    </xsl:choose>

                    <xsl:if
                      test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:position | w:rPr/w:color | w:rPr/w:smallCaps[not(@w:val = '0')]">
                      <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                    </xsl:if>


                    <xsl:if test="w:rPr/w:dstrike">
                      <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                      <xsl:text disable-output-escaping="yes">&lt;/small&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:strike">
                      <xsl:text disable-output-escaping="yes">&lt;/s&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:u">
                      <xsl:choose>
                        <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                          <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                        </xsl:when>
                        <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                          <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                            <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                          </xsl:if>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:if>
                    <xsl:if
                      test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                      <xsl:text disable-output-escaping="yes">&lt;/i&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if
                      test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
                      <xsl:text disable-output-escaping="yes">&lt;/b&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                      <xsl:text disable-output-escaping="yes">&lt;/sub&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                      <xsl:text disable-output-escaping="yes">&lt;/sup&gt;</xsl:text>
                    </xsl:if>
                    <xsl:if test="w:rPr/w:rPrChange">
                      <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                    </xsl:if>
                  </xsl:when>


                  <xsl:when
                    test="w:rPr/w:b and w:rPr/w:i and (not(w:rPr/w:b/@w:val = 'false') or not(w:rPr/w:b/@w:val = '0')) and (not(w:rPr/w:i/@w:val = 'false') or not(w:rPr/w:i/@w:val = '0'))">
                    <xsl:element name="b">
                      <xsl:element name="i">
                        <xsl:apply-templates/>
                      </xsl:element>
                    </xsl:element>
                  </xsl:when>

                  <xsl:when
                    test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') or not(w:rPr/w:b/@w:val = '0'))">
                    <xsl:element name="b">
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>

                  <xsl:when
                    test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') or not(w:rPr/w:i/@w:val = '0'))">
                    <xsl:element name="i">
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>

                  <xsl:otherwise>
                    <xsl:element name="span">
                      <xsl:attribute name="class" select="replace($charStyle, '^([0-9]+)', '')"/>
                      <xsl:attribute name="data-name">
                        <xsl:choose>
                          <xsl:when test="string-length($charStyleName) > 0">
                            <xsl:value-of select="replace($charStyleName, '^([0-9]+)', '')"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="'Normal'"/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
                <!--</span>-->
              </xsl:when>
              <xsl:otherwise>
                <xsl:apply-templates/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="$charStyle = 'TERM' or $charStyle = 'Term'">
        <span class="term">
          <xsl:apply-templates/>
        </span>
      </xsl:when>
      <xsl:when test="$charStyle = 'LABEL' or $charStyle = 'Label'">
        <span class="Label">
          <xsl:for-each select="w:t">
            <xsl:apply-templates/>
            <xsl:text> </xsl:text>
          </xsl:for-each>
        </span>
      </xsl:when>
      <xsl:when test="$charStyle = 'Hyperlink'">
        <xsl:variable name="c">
          <xsl:apply-templates/>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="starts-with($c, 'http:')">
            <xsl:element name="a">
              <xsl:attribute name="href">
                <xsl:apply-templates/>
              </xsl:attribute>
              <xsl:apply-templates/>
            </xsl:element>
          </xsl:when>
          <xsl:when test="starts-with($c, 'https:')">
            <xsl:element name="a">
              <xsl:attribute name="href">
                <xsl:apply-templates/>
              </xsl:attribute>
              <xsl:apply-templates/>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <xsl:element name="a">
              <xsl:attribute name="href">
                <xsl:text>http://</xsl:text>
                <xsl:apply-templates/>
              </xsl:attribute>
              <xsl:apply-templates/>
            </xsl:element>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <!-- 12345 -->
      <xsl:when test="child::w:rPr/w:rStyle">
        <xsl:variable name="charStyle" select="child::w:rPr/w:rStyle[1]/@w:val"/>
        <xsl:choose>
          <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
            <xsl:apply-templates/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:element name="span">
              <xsl:attribute name="class">
                <xsl:choose>
                  <xsl:when test="string-length($charStyle) > 0">
                    <xsl:value-of select="replace($charStyle, '^([0-9]+)', '')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'Normal'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:attribute name="data-name">
                <xsl:choose>
                  <xsl:when test="string-length($charStyleName) > 0">
                    <xsl:value-of select="replace($charStyleName, '^([0-9]+)', '')"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'Normal'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>

              <xsl:if
                test="
                  w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:rPr/w:u | w:rPr/w:u[@w:val = 'none'] | w:rPr/w:u[@w:val = '0'] | w:rPr/w:u[@w:val = 'false'] | w:rPr/w:smallCaps | w:shd | w:rPr/w:highlight
                  | w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i | w:rPr/w:vertAlign
                  | w:rPr/w:caps | w:rPr/w:caps[@w:val = 'none'] | w:rPr/w:caps[@w:val = '0'] | w:rPr/w:caps[@w:val = 'false']">
                <xsl:attribute name="style">
                  <xsl:if test="child::w:rPr/w:rFonts">
                    <xsl:choose>
                      <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                        <xsl:text disable-output-escaping="yes">font-family:</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes">mso-fareast-font-family:</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>

                    <xsl:choose>
                      <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                        <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                      </xsl:when>
                      <xsl:when test="w:rPr/w:rFonts/@w:cs">
                        <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                      </xsl:when>
                      <xsl:when test="w:rPr/w:rFonts/@w:eastAsia">
                        <xsl:value-of select="w:rPr/w:rFonts/@w:eastAsia"/>
                      </xsl:when>
                      <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                        <xsl:value-of
                          select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"/>
                      </xsl:when>
                      <xsl:when
                        test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                        <xsl:value-of
                          select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                        />
                      </xsl:when>
                      <xsl:when
                        test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                        <xsl:value-of
                          select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                        />
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of
                          select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                        />
                      </xsl:otherwise>
                    </xsl:choose>

                    <!-- 13-May-18: Added  LANG attribute -->
                    <xsl:if test="w:rPr/w:lang">
                      <xsl:text>;mso-fareast-language:</xsl:text>
                      <xsl:value-of select="upper-case(w:rPr/w:lang/@w:eastAsia)"/>
                    </xsl:if>
                    <xsl:text/>
                  </xsl:if>
                  <!-- check for un-bold -->
                  <xsl:if test="child::w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                    <xsl:if test="child::w:rPr/w:rFonts">
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when test="child::w:rPr/w:rFonts">
                        <xsl:text disable-output-escaping="yes"> font-weight:</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes">font-weight:</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                      <xsl:when test="child::w:rPr/w:b[@w:val = '0']">
                        <xsl:text> normal</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:rPr/w:b[@w:val = 'false']">
                        <xsl:text> normal</xsl:text>
                      </xsl:when>
                      <!--<xsl:otherwise>
                    <xsl:text> bold</xsl:text>
                  </xsl:otherwise>-->
                    </xsl:choose>
                  </xsl:if>
                  <xsl:if test="child::w:rPr/w:b[not(@w:val = 'false') and not(@w:val = '0')]">
                    <xsl:if test="child::w:rPr/w:rFonts">
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when test="child::w:rPr/w:rFonts">
                        <xsl:text disable-output-escaping="yes"> font-weight:</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes">font-weight:</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                      <xsl:when test="child::w:rPr/w:b[@w:val = '0']">
                        <xsl:text> normal</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:rPr/w:b[@w:val = 'false']">
                        <xsl:text> normal</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text>bold</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:if>
                  <!-- check for un-italic -->
                  <xsl:if test="child::w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                    <xsl:if
                      test="child::w:rPr/w:rFonts | child::w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when
                        test="child::w:rPr/w:rFonts | child::w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                        <xsl:text disable-output-escaping="yes"> font-style:</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes">font-style:</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                      <xsl:when test="child::w:rPr/w:i[@w:val = '0']">
                        <xsl:text> normal</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:rPr/w:i[@w:val = 'false']">
                        <xsl:text> normal</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text> italic</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:if>
                  <xsl:if test="child::w:rPr/w:i[not(@w:val = 'false') and not(@w:val = '0')]">
                    <xsl:if
                      test="child::w:rPr/w:rFonts | child::w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when
                        test="child::w:rPr/w:rFonts | child::w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                        <xsl:text disable-output-escaping="yes"> font-style:</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes">font-style:</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                      <xsl:when test="child::w:rPr/w:i[@w:val = '0']">
                        <xsl:text> normal</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:rPr/w:i[@w:val = 'false']">
                        <xsl:text> normal</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text>italic</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:if>

                  <xsl:if test="child::w:rPr/w:szCs and not(child::w:rPr/w:sz)">
                    <xsl:if
                      test="child::w:rPr/w:rFonts | child::w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i">
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when
                        test="child::w:rPr/w:rFonts | child::w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i">
                        <xsl:text disable-output-escaping="yes"> font-size:</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes">font-size:</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                    <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                    <!--<xsl:value-of select="(child::w:rPr/w:szCs/@w:val) div 2"/>-->
                    <!-- 26-Oct-18: Checking if size has PT -->
                    <xsl:choose>
                      <xsl:when test="contains(w:rPr/w:szCs/@w:val, 'pt')">
                        <xsl:value-of
                          select="number(substring-before(w:rPr/w:szCs/@w:val, 'pt')) div 2"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="number(w:rPr/w:szCs/@w:val) div 2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                    <!-- 26-Oct-18: Checking if size has PT -->
                    <!--<xsl:value-of select="child::w:rPr/w:szCs/@w:val"/>-->
                    <xsl:text>pt</xsl:text>
                  </xsl:if>
                  <xsl:if test="w:rPr/w:sz">
                    <xsl:if
                      test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i">
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when
                        test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i">
                        <xsl:text disable-output-escaping="yes"> font-size:</xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes">font-size:</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>
                    <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                    <!-- 26-Oct-18: Checking if size has PT -->
                    <xsl:choose>
                      <xsl:when test="contains(w:rPr/w:sz/@w:val, 'pt')">
                        <xsl:value-of
                          select="number(substring-before(w:rPr/w:sz/@w:val, 'pt')) div 2"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of select="number(w:rPr/w:sz/@w:val) div 2"/>
                      </xsl:otherwise>
                    </xsl:choose>
                    <!-- 26-Oct-18: Checking if size has PT -->
                    <xsl:text>pt</xsl:text>
                  </xsl:if>

                  <xsl:if test="w:rPr/w:color">
                    <xsl:if
                      test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts">
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <!--<xsl:choose>
                      <xsl:when test="w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i">
                        <xsl:text disable-output-escaping="yes"> </xsl:text>  
                      </xsl:when> 
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes"> style="</xsl:text>
                      </xsl:otherwise>
                    </xsl:choose>   -->
                    <xsl:choose>
                      <xsl:when test="$color = 'auto'">
                        <xsl:value-of select="'000000'"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                        <xsl:value-of select="$color"/>
                      </xsl:otherwise>
                    </xsl:choose>
                    <!--<xsl:value-of select="$color"/>-->
                    <xsl:text/>
                  </xsl:if>
                  <!-- END of COLOR -->
                  <!-- HIGHLIGHT -->
                  <xsl:if test="w:rPr/w:highlight">
                    <xsl:if
                      test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color">
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when
                        test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color">
                        <xsl:text disable-output-escaping="yes"> </xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <!--<xsl:text disable-output-escaping="yes"> style="</xsl:text>-->
                        <xsl:text disable-output-escaping="yes"/>
                      </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                      <xsl:when test="$hcolor = 'auto'">
                        <xsl:text disable-output-escaping="yes">background-color: #</xsl:text>
                        <xsl:value-of select="'000000'"/>
                      </xsl:when>
                      <xsl:when test="$hcolor = 'lightGray'">
                        <xsl:text disable-output-escaping="yes">background-color: #</xsl:text>
                        <xsl:value-of select="'E8E8E8'"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes">background-color:#</xsl:text>
                        <xsl:value-of select="$hcolor"/>
                      </xsl:otherwise>
                    </xsl:choose>
                    <!--<xsl:value-of select="$color"/>-->
                    <xsl:text/>
                  </xsl:if>
                  <!-- END of HIGHLIGHT -->
                  <!-- Added on 15-NOV-18: w:SHD -->
                  <xsl:if test="w:rPr/w:shd">
                    <xsl:if
                      test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight">
                      <xsl:text>;</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when
                        test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight">
                        <xsl:text disable-output-escaping="yes"> </xsl:text>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes"/>
                      </xsl:otherwise>
                    </xsl:choose>
                    <xsl:choose>
                      <xsl:when test="$scolor = 'auto'">
                        <xsl:text disable-output-escaping="yes">background-color: #</xsl:text>
                        <xsl:value-of select="'000000'"/>
                      </xsl:when>
                      <xsl:when test="$scolor = 'lightGray'">
                        <xsl:text disable-output-escaping="yes">background-color: #</xsl:text>
                        <xsl:value-of select="'E8E8E8'"/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:text disable-output-escaping="yes">background-color:#</xsl:text>
                        <xsl:value-of select="$scolor"/>
                      </xsl:otherwise>
                    </xsl:choose>
                    <!--<xsl:value-of select="$color"/>-->
                    <xsl:text/>
                  </xsl:if>
                  <!-- END of SHD -->
                  <!-- position -->
                  <xsl:if test="w:rPr/w:position">
                    <xsl:if
                      test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight | w:rPr/w:shd">
                      <xsl:text>; </xsl:text>
                    </xsl:if>
                    <xsl:if
                      test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight | w:rPr/w:shd)">
                      <!--<xsl:text> style="</xsl:text>  -->
                      <xsl:text/>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when test="child::w:rPr/w:position">
                        <xsl:variable name="val" select="child::w:rPr/w:position/@w:val"/>
                        <xsl:choose>
                          <xsl:when test="contains($val, '-')">
                            <xsl:text>position:relative;top:</xsl:text>
                            <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                            <xsl:text>pt;mso-text-raise:-</xsl:text>
                            <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                            <xsl:text>pt</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>position:relative;top:-</xsl:text>
                            <xsl:value-of select="number($val) div 2"/>
                            <xsl:text>pt;mso-text-raise:</xsl:text>
                            <xsl:value-of select="number($val) div 2"/>
                            <xsl:text>pt</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                    </xsl:choose>
                  </xsl:if>
                  <!-- SMALLCAPS -->
                  <!-- no small caps or overrides -->
                  <xsl:if test="w:rPr/w:smallCaps[@w:val = 'false' or @w:val = '0']">
                    <xsl:if
                      test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight">
                      <xsl:text>; font-variant:</xsl:text>
                    </xsl:if>
                    <xsl:if
                      test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight)">
                      <xsl:text>font-variant:</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when test="child::w:rPr/w:smallCaps[@w:val = '0']">
                        <xsl:text> none</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:rPr/w:smallCaps[@w:val = 'false']">
                        <xsl:text> none</xsl:text>
                      </xsl:when>
                      <!--<xsl:otherwise>
                    <xsl:text> bold</xsl:text>
                  </xsl:otherwise>-->
                    </xsl:choose>
                  </xsl:if>


                  <xsl:if test="w:rPr/w:smallCaps">
                    <xsl:if
                      test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight">
                      <xsl:text>; </xsl:text>
                    </xsl:if>
                    <xsl:if
                      test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight)">
                      <xsl:text/>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when
                        test="child::w:rPr/w:smallCaps[not(@w:val = '0' or @w:val = 'false')]">
                        <xsl:text>font-variant: 'small-caps';</xsl:text>
                      </xsl:when>
                    </xsl:choose>
                  </xsl:if>
                  <!-- END SMALLCAPS -->
                  <!-- no underline -->
                  <xsl:if test="w:rPr/w:u[@w:val = 'none' or @w:val = 'false' or @w:val = '0']">
                    <xsl:if
                      test="
                        w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs
                        | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight | w:rPr/w:smallCaps">
                      <xsl:text>; font-variant:</xsl:text>
                    </xsl:if>
                    <xsl:if
                      test="
                        not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs
                        | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight | w:rPr/w:smallCaps)">
                      <xsl:text>font-variant:</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when test="child::w:rPr/w:u[@w:val = '0']">
                        <xsl:text> none</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:rPr/w:u[@w:val = 'none']">
                        <xsl:text> none</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:rPr/w:u[@w:val = 'false']">
                        <xsl:text> none</xsl:text>
                      </xsl:when>
                      <!--<xsl:otherwise>
                    <xsl:text> bold</xsl:text>
                  </xsl:otherwise>-->
                    </xsl:choose>
                  </xsl:if>

                  <!-- no all caps -->
                  <xsl:if test="w:rPr/w:caps[@w:val = 'none' or @w:val = 'false' or @w:val = '0']">
                    <xsl:if
                      test="
                        w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs
                        | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight | w:rPr/w:smallCaps | w:rPr/w:u[@w:val = 'none' or @w:val = 'false' or @w:val = '0']">
                      <xsl:text>; text-transform:</xsl:text>
                    </xsl:if>
                    <xsl:if
                      test="
                        not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | child::w:rPr/w:b | child::w:rPr/w:i | w:rPr/w:sz | w:rPr/w:szCs
                        | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight | w:rPr/w:smallCaps | w:rPr/w:u[@w:val = 'none' or @w:val = 'false' or @w:val = '0'])">
                      <xsl:text>text-transform:</xsl:text>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when test="child::w:rPr/w:caps[@w:val = '0']">
                        <xsl:text> none</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:rPr/w:caps[@w:val = 'none']">
                        <xsl:text> none</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:rPr/w:caps[@w:val = 'false']">
                        <xsl:text> none</xsl:text>
                      </xsl:when>
                    </xsl:choose>
                  </xsl:if>

                  <!-- SUP/SUB on 11-JUNE-18 -->
                  <xsl:if test="w:rPr/w:vertAlign">
                    <xsl:if
                      test="
                        w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position
                        | w:rPr/w:highlight | w:rPr/w:smallCaps | w:rPr/w:u[@w:val = 'none' or @w:val = 'false' or @w:val = '0'] | w:rPr/w:caps[@w:val = 'none' or @w:val = 'false' or @w:val = '0']">
                      <xsl:text>; </xsl:text>
                    </xsl:if>
                    <xsl:if
                      test="
                        not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position
                        | w:rPr/w:highlight | w:rPr/w:smallCaps | w:rPr/w:u[@w:val = 'none' or @w:val = 'false' or @w:val = '0'] | w:rPr/w:caps[@w:val = 'none' or @w:val = 'false' or @w:val = '0'])">
                      <xsl:text/>
                    </xsl:if>
                    <xsl:choose>
                      <xsl:when test="child::w:rPr/w:vertAlign[@w:val = 'superscript']">
                        <xsl:text>vertical-align: super;</xsl:text>
                      </xsl:when>
                      <xsl:when test="child::w:rPr/w:vertAlign[@w:val = 'subscript']">
                        <xsl:text>vertical-align: sub;</xsl:text>
                      </xsl:when>
                    </xsl:choose>
                  </xsl:if>
                  <!-- SUP/SUB -->
                </xsl:attribute>
              </xsl:if>


              <xsl:if test="w:rPr/w:rPrChange">
                <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal !msorm'"&gt;</xsl:text>
              </xsl:if>
              <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                <xsl:text disable-output-escaping="yes">&lt;sup&gt;</xsl:text>
              </xsl:if>
              <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                <xsl:text disable-output-escaping="yes">&lt;sub&gt;</xsl:text>
              </xsl:if>
              <xsl:if
                test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
                <xsl:text disable-output-escaping="yes">&lt;b&gt;</xsl:text>
              </xsl:if>
              <xsl:if
                test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                <xsl:text disable-output-escaping="yes">&lt;i&gt;</xsl:text>
              </xsl:if>

              <xsl:if test="w:rPr/w:u">
                <xsl:if test="w:rPr/w:u">
                  <xsl:choose>
                    <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                      <xsl:text disable-output-escaping="yes">&lt;span class="DUnderline"&gt;</xsl:text>
                    </xsl:when>
                    <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                      <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                    </xsl:when>
                    <xsl:when test="not(w:rPr/w:u[@w:val])">
                      <!-- 27-Nov-18:Added underline rule, if no @w:val; UNDERLINE-test-2018-0002_Sirpal.docx(find "donor may provide a") -->
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                        <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                      </xsl:if>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:if>
              </xsl:if>
              <xsl:if test="w:rPr/w:strike">
                <xsl:text disable-output-escaping="yes">&lt;s&gt;</xsl:text>
              </xsl:if>
              <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0' or @w:val = 'false')]">
                <xsl:text disable-output-escaping="yes">&lt;small&gt;</xsl:text>
              </xsl:if>
              <xsl:if test="w:rPr/w:dstrike">
                <xsl:text disable-output-escaping="yes">&lt;span class="double-strike" style="text-decoration: line-through double;"&gt;</xsl:text>
              </xsl:if>

              <xsl:apply-templates/>
              <!-- 444444444444444444444444  -->


              <xsl:if test="w:rPr/w:dstrike">
                <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
              </xsl:if>
              <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0' or @w:val = 'false')]">
                <xsl:text disable-output-escaping="yes">&lt;/small&gt;</xsl:text>
              </xsl:if>
              <xsl:if test="w:rPr/w:strike">
                <xsl:text disable-output-escaping="yes">&lt;/s&gt;</xsl:text>
              </xsl:if>
              <xsl:if test="w:rPr/w:u">
                <xsl:choose>
                  <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                    <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                  </xsl:when>
                  <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                    <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                  </xsl:when>
                  <xsl:when test="not(w:rPr/w:u[@w:val])">
                    <!-- 27-Nov-18:Added underline rule, if no @w:val; UNDERLINE-test-2018-0002_Sirpal.docx(find "donor may provide a") -->
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                      <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                    </xsl:if>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:if>
              <xsl:if
                test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                <xsl:text disable-output-escaping="yes">&lt;/i&gt;</xsl:text>
              </xsl:if>
              <xsl:if
                test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
                <xsl:text disable-output-escaping="yes">&lt;/b&gt;</xsl:text>
              </xsl:if>
              <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                <xsl:text disable-output-escaping="yes">&lt;/sub&gt;</xsl:text>
              </xsl:if>
              <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                <xsl:text disable-output-escaping="yes">&lt;/sup&gt;</xsl:text>
              </xsl:if>
              <xsl:if test="w:rPr/w:rPrChange">
                <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
              </xsl:if>


              <!-- mahesh -->
              <!--                        <xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0']">
                          <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal;"&gt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0']">
                          <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal;"&gt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="w:rPr/w:caps[@w:val = '0']">
                          <xsl:text disable-output-escaping="yes">&lt;span style="text-transform: none;"&gt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="w:rPr/w:smallCaps[@w:val = '0']">
                          <xsl:text disable-output-escaping="yes">&lt;span style="font-variant: none;"&gt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="w:rPr/w:strike[@w:val = '0']">
                          <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="w:rPr/w:u[@w:val = 'none']">
                          <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                        </xsl:if>
                        <xsl:if test="w:rPr/w:vertAlign[@w:val = 'baseline']">
                          <xsl:text disable-output-escaping="yes">&lt;span style="vertical-align: baseline;"&gt;</xsl:text>
                        </xsl:if><!-\- seeeeee -\->
                        <xsl:apply-templates/>
                        <xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0'] | w:rPr/w:smallCaps[@w:val = '0'] | w:rPr/w:caps[@w:val = '0'] 
                          | w:rPr/w:strike[@w:val = '0'] | w:rPr/w:vertAlign[@w:val = 'baseline'] | w:rPr/w:u[@w:val = 'none']">
                          <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                        </xsl:if>-->
            </xsl:element>
          </xsl:otherwise>
        </xsl:choose>

      </xsl:when>


      <xsl:when
        test="w:rPr/w:i | w:rPr/w:b | w:rPr/w:rFonts | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:rPr/w:smallCaps | w:rPr/w:u | w:rPr/w:strike | w:rPr/w:caps | w:rPr/w:dstrike | w:rPr/w:vertAlign | w:rPr/w:highlight">
        <xsl:if test="w:rPr/w:rPrChange">
          <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal !msorm'"&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
          <xsl:text disable-output-escaping="yes">&lt;sup&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
          <xsl:text disable-output-escaping="yes">&lt;sub&gt;</xsl:text>
        </xsl:if>
        <xsl:if
          test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
          <xsl:text disable-output-escaping="yes">&lt;b&gt;</xsl:text>
        </xsl:if>
        <xsl:if
          test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
          <xsl:text disable-output-escaping="yes">&lt;i&gt;</xsl:text>
        </xsl:if>
        <!--<xsl:if test="w:rPr/w:u and not(w:rPr/w:u/@w:val = 'false')">
          <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
        </xsl:if>-->
        <xsl:if test="w:rPr/w:u">
          <xsl:if test="w:rPr/w:u">
            <xsl:choose>
              <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                <xsl:text disable-output-escaping="yes">&lt;span class="DUnderline"&gt;</xsl:text>
              </xsl:when>
              <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
              </xsl:when>

              <!--Updated for "w:u" contain no value means remove that 17-7-2019-->
              <xsl:when test="w:rPr/w:u[not(@w:val)]"/>
              <!--End-->

              <xsl:otherwise>
                <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                  <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
        </xsl:if>
        <xsl:if test="w:rPr/w:strike">
          <xsl:text disable-output-escaping="yes">&lt;s&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
          <xsl:text disable-output-escaping="yes">&lt;small&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:dstrike">
          <xsl:text disable-output-escaping="yes">&lt;span class="double-strike"&gt;</xsl:text>
          <xsl:text disable-output-escaping="yes">&lt;div class="the-lines"/&gt;</xsl:text>
        </xsl:if>

        <!-- Group SPAN tag -->
        <xsl:if
          test="
            w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:u | w:rPr/w:smallCaps | w:rPr/w:highlight | w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false']
            | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false']">
          <xsl:text disable-output-escaping="yes">&lt;span</xsl:text>

          <xsl:if test="w:rPr/w:rFonts">
            <xsl:choose>
              <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                <xsl:text disable-output-escaping="yes"> style="font-family:</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="mso-fareast-font-family:</xsl:text>
              </xsl:otherwise>
            </xsl:choose>


            <xsl:choose>
              <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
              </xsl:when>
              <xsl:when test="w:rPr/w:rFonts/@w:cs">
                <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
              </xsl:when>
              <xsl:when test="w:rPr/w:rFonts/@w:eastAsia">
                <xsl:value-of select="w:rPr/w:rFonts/@w:eastAsia"/>
              </xsl:when>
              <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                <xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"
                />
              </xsl:when>
              <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                <xsl:value-of
                  select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>
              </xsl:when>
              <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                <xsl:value-of
                  select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of
                  select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>
              </xsl:otherwise>
            </xsl:choose>

            <!-- 13-May-18: Added  LANG attribute -->
            <xsl:if test="w:rPr/w:lang">
              <xsl:text>;mso-fareast-language:</xsl:text>
              <xsl:value-of select="upper-case(w:rPr/w:lang/@w:eastAsia)"/>
            </xsl:if>
            <xsl:text/>
          </xsl:if>
          <!-- check for un-bold -->
          <xsl:if test="w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
            <xsl:if test="w:rPr/w:rFonts">
              <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when test="w:rPr/w:rFonts">
                <xsl:text disable-output-escaping="yes"> font-weight:</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="font-weight:</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="child::w:rPr/w:b[@w:val = '0']">
                <xsl:text> normal</xsl:text>
              </xsl:when>
              <xsl:when test="child::w:rPr/w:b[@w:val = 'false']">
                <xsl:text> normal</xsl:text>
              </xsl:when>
              <!--<xsl:otherwise>
                    <xsl:text> bold</xsl:text>
                  </xsl:otherwise>-->
            </xsl:choose>
          </xsl:if>
          <!-- check for un-italic -->
          <xsl:if test="w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
            <xsl:if test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
              <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                <xsl:text disable-output-escaping="yes"> font-style:</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="font-style:</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="child::w:rPr/w:i[@w:val = '0']">
                <xsl:text> normal</xsl:text>
              </xsl:when>
              <xsl:when test="child::w:rPr/w:i[@w:val = 'false']">
                <xsl:text> normal</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <!--  <xsl:text> italic</xsl:text>-->
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>

          <xsl:if test="w:rPr/w:szCs and not(w:rPr/w:sz)">
            <xsl:if
              test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
              <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when
                test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                <xsl:text disable-output-escaping="yes"> font-size:'</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
            <xsl:value-of select="(w:rPr/w:szCs/@w:val) div 2"/>
            <xsl:text>pt'</xsl:text>
          </xsl:if>
          <xsl:if test="w:rPr/w:sz">
            <xsl:if
              test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
              <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when
                test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                <xsl:text disable-output-escaping="yes"> font-size:</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="font-size:</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
            <xsl:value-of select="(w:rPr/w:sz/@w:val) div 2"/>
            <xsl:text>pt</xsl:text>
          </xsl:if>

          <xsl:if test="w:rPr/w:color">
            <xsl:if
              test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts">
              <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when
                test="w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                <xsl:text disable-output-escaping="yes"> color:#</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="$color = 'auto'">
                <xsl:value-of select="'000000'"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                <xsl:value-of select="$color"/>
              </xsl:otherwise>
            </xsl:choose>
            <!--<xsl:value-of select="$color"/>-->
            <xsl:text/>
          </xsl:if>
          <!-- END of COLOR -->
          <!-- HIGHLIGHT -->
          <xsl:if test="w:rPr/w:highlight">
            <xsl:if
              test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color">
              <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when
                test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color">
                <xsl:text disable-output-escaping="yes"> </xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="$hcolor = 'auto'">
                <xsl:text disable-output-escaping="yes">background-color: #</xsl:text>
                <xsl:value-of select="'000000'"/>
              </xsl:when>
              <xsl:when test="$hcolor = 'lightGray'">
                <xsl:text disable-output-escaping="yes">background-color: #</xsl:text>
                <xsl:value-of select="'E8E8E8'"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                <xsl:value-of select="$hcolor"/>
              </xsl:otherwise>
            </xsl:choose>
            <!--<xsl:value-of select="$color"/>-->
            <xsl:text/>
          </xsl:if>
          <!-- END of HIGHLIGHT -->
          <!-- position -->
          <xsl:if test="w:rPr/w:position">
            <xsl:if
              test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight">
              <xsl:text>; </xsl:text>
            </xsl:if>
            <xsl:if
              test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight)">
              <xsl:text> style="</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when test="child::w:rPr/w:position">
                <xsl:variable name="val" select="child::w:rPr/w:position/@w:val"/>
                <xsl:choose>
                  <xsl:when test="contains($val, '-')">
                    <xsl:text>position:relative;top:</xsl:text>
                    <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                    <xsl:text>pt;mso-text-raise:-</xsl:text>
                    <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                    <xsl:text>pt</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>position:relative;top:-</xsl:text>
                    <xsl:value-of select="number($val) div 2"/>
                    <xsl:text>pt;mso-text-raise:</xsl:text>
                    <xsl:value-of select="number($val) div 2"/>
                    <xsl:text>pt</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
            </xsl:choose>
          </xsl:if>
          <!-- SMALLCAPS -->
          <xsl:if test="w:rPr/w:smallCaps">
            <xsl:if
              test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight">
              <xsl:text>; </xsl:text>
            </xsl:if>
            <xsl:if
              test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight)">
              <xsl:text> style="</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when test="child::w:rPr/w:smallCaps[not(@w:val = '0')]">
                <xsl:text>font-variant: 'small-caps';</xsl:text>
              </xsl:when>
            </xsl:choose>
          </xsl:if>
          <!-- END SMALLCAPS -->
          <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
        </xsl:if>
        <!-- Group SPAN tag END-->
        <!-- 27-sep-16 prasanth asked to give class name also -->
        <xsl:variable name="classname" select="child::w:rPr/w:rStyle[1]/@w:val"/>
        <xsl:choose>
          <xsl:when test="string-length($classname) > 0">
            <xsl:choose>
              <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'CommentReference'">
                <!--<span contenteditable="false" data-selected="true" data-track-changes-ignore="true"
                    name="cmd2"><img data-selected="true" data-track-changes-ignore="true" id="cmd2"
                      src="icon.png" style="width:15px;height:15px;"
                      title="Mariselvam:asd fasdfMariselvam:asd fasdf dsaf"/>-->

                <xsl:variable name="commentID" select="child::w:commentReference[1]/@w:id"/>

                <xsl:element name="span">
                  <xsl:attribute name="class">
                    <xsl:value-of select="'CommentReference'"/>
                  </xsl:attribute>
                  <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
                  <xsl:attribute name="name">
                    <xsl:text>cmtref</xsl:text>
                    <xsl:value-of select="$commentID + 1"/>
                  </xsl:attribute>
                  <!--<xsl:attribute name="style" select="'display:none'"/>-->
                  <xsl:apply-templates/>
                </xsl:element>

              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                      
                      <xsl:value-of select="upper-case(.)"/>
                    </xsl:when>-->
                  <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                    <xsl:element name="span">
                      <xsl:attribute name="style">
                        <xsl:value-of select="'text-transform: uppercase'"/>
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:element>
                    <!--<xsl:value-of select="upper-case(.)"/>-->
                  </xsl:when>
                  <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                    <xsl:element name="span">
                      <xsl:attribute name="style">
                        <xsl:value-of select="'font-variant: small-caps'"/>
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
                    <xsl:apply-templates/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:element name="span">
                      <xsl:attribute name="class">
                        <!--<xsl:value-of select="child::w:rPr/w:rStyle/@w:val"/>-->
                        <xsl:value-of
                          select="replace(child::w:rPr/w:rStyle[1]/@w:val, '^([0-9]+)', '')"/>
                      </xsl:attribute>
                      <!-- mahesh -->
                      <!--                            <xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0']">
                              <xsl:text disable-output-escaping="yes">&lt;spanA style="font-style:normal;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:caps[@w:val = '0']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="text-transform: none;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:smallCaps[@w:val = '0']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="font-variant: none;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:strike[@w:val = '0']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:u[@w:val = 'none']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:vertAlign[@w:val = 'baseline']">
                              <xsl:text disable-output-escaping="yes">&lt;span style="vertical-align: baseline;"&gt;</xsl:text>
                            </xsl:if>-->
                      <xsl:choose>
                        <xsl:when
                          test="w:rPr/w:i | w:rPr/w:b | w:rPr/w:rFonts | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:rPr/w:smallCaps | w:rPr/w:u | w:rPr/w:strike | w:rPr/w:caps | w:rPr/w:dstrike | w:rPr/w:vertAlign | w:rPr/w:highlight">

                          <xsl:if test="w:rPr/w:rPrChange">
                            <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal !msorm'"&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                            <xsl:text disable-output-escaping="yes">&lt;sup&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                            <xsl:text disable-output-escaping="yes">&lt;sub&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if
                            test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
                            <xsl:text disable-output-escaping="yes">&lt;b&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if
                            test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                            <xsl:text disable-output-escaping="yes">&lt;i&gt;</xsl:text>
                          </xsl:if>
                          <!--<xsl:if test="w:rPr/w:u and not(w:rPr/w:u/@w:val = 'false')">
          <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
        </xsl:if>-->
                          <xsl:if test="w:rPr/w:u">
                            <xsl:if test="w:rPr/w:u">
                              <xsl:choose>
                                <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                                  <xsl:text disable-output-escaping="yes">&lt;span class="DUnderline"&gt;</xsl:text>
                                </xsl:when>
                                <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                                  <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                                    <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                                  </xsl:if>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:strike">
                            <xsl:text disable-output-escaping="yes">&lt;s&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                            <xsl:text disable-output-escaping="yes">&lt;small&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:dstrike">
                            <xsl:text disable-output-escaping="yes">&lt;span class="double-strike"&gt;</xsl:text>
                            <xsl:text disable-output-escaping="yes">&lt;div class="the-lines"/&gt;</xsl:text>
                          </xsl:if>

                          <!-- Group SPAN tag -->
                          <xsl:if
                            test="
                              w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:u | w:rPr/w:smallCaps | w:rPr/w:highlight | w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false']
                              | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false']">
                            <xsl:text disable-output-escaping="yes">&lt;span</xsl:text>

                            <xsl:if test="w:rPr/w:rFonts">
                              <xsl:choose>
                                <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                                  <xsl:text disable-output-escaping="yes"> style="font-family:</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="mso-fareast-font-family:</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>

                              <xsl:choose>
                                <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                                  <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                                </xsl:when>
                                <xsl:when test="w:rPr/w:rFonts/@w:cs">
                                  <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                                </xsl:when>
                                <xsl:when test="w:rPr/w:rFonts/@w:eastAsia">
                                  <xsl:value-of select="w:rPr/w:rFonts/@w:eastAsia"/>
                                </xsl:when>
                                <xsl:when
                                  test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                                  <xsl:value-of
                                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"
                                  />
                                </xsl:when>
                                <xsl:when
                                  test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                                  <xsl:value-of
                                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                                  />
                                </xsl:when>
                                <xsl:when
                                  test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                                  <xsl:value-of
                                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                                  />
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of
                                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                                  />
                                </xsl:otherwise>
                              </xsl:choose>

                              <!-- 13-May-18: Added  LANG attribute -->
                              <xsl:if test="w:rPr/w:lang">
                                <xsl:text>;mso-fareast-language:</xsl:text>
                                <xsl:value-of select="upper-case(w:rPr/w:lang/@w:eastAsia)"/>
                              </xsl:if>
                              <xsl:text/>
                            </xsl:if>
                            <!-- check for un-bold -->
                            <xsl:if test="w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                              <xsl:if test="w:rPr/w:rFonts">
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when test="w:rPr/w:rFonts">
                                  <xsl:text disable-output-escaping="yes"> font-weight:</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="font-weight:</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                              <xsl:choose>
                                <xsl:when test="child::w:rPr/w:b[@w:val = '0']">
                                  <xsl:text> normal</xsl:text>
                                </xsl:when>
                                <xsl:when test="child::w:rPr/w:b[@w:val = 'false']">
                                  <xsl:text> normal</xsl:text>
                                </xsl:when>
                                <!--<xsl:otherwise>
                <xsl:text> bold</xsl:text>
              </xsl:otherwise>-->
                              </xsl:choose>
                            </xsl:if>
                            <!-- check for un-italic -->
                            <xsl:if test="w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                              <xsl:if
                                test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when
                                  test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                                  <xsl:text disable-output-escaping="yes"> font-style:</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="font-style:</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                              <xsl:choose>
                                <xsl:when test="child::w:rPr/w:i[@w:val = '0']">
                                  <xsl:text> normal</xsl:text>
                                </xsl:when>
                                <xsl:when test="child::w:rPr/w:i[@w:val = 'false']">
                                  <xsl:text> normal</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <!--  <xsl:text> italic</xsl:text>-->
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>

                            <xsl:if test="w:rPr/w:szCs and not(w:rPr/w:sz)">
                              <xsl:if
                                test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when
                                  test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                                  <xsl:text disable-output-escaping="yes"> font-size:'</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                              <xsl:value-of select="(w:rPr/w:szCs/@w:val) div 2"/>
                              <xsl:text>pt'</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:sz">
                              <xsl:if
                                test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when
                                  test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                                  <xsl:text disable-output-escaping="yes"> font-size:</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="font-size:</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                              <xsl:value-of select="(w:rPr/w:sz/@w:val) div 2"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:if>

                            <xsl:if test="w:rPr/w:color">
                              <xsl:if
                                test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position">
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when
                                  test="w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                                  <xsl:text disable-output-escaping="yes"> </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <xsl:value-of select="'000000'"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                  <xsl:value-of select="$color"/>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--<xsl:value-of select="$color"/>-->
                              <xsl:text/>
                            </xsl:if>
                            <!-- END of COLOR -->
                            <!-- HIGHLIGHT -->
                            <xsl:if test="w:rPr/w:highlight">
                              <xsl:if
                                test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position | w:rPr/w:color">
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when
                                  test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position | w:rPr/w:color">
                                  <xsl:text disable-output-escaping="yes"> </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                              <xsl:choose>
                                <xsl:when test="$hcolor = 'auto'">
                                  <xsl:text disable-output-escaping="yes">background-color: #</xsl:text>
                                  <xsl:value-of select="'000000'"/>
                                </xsl:when>
                                <xsl:when test="$hcolor = 'lightGray'">
                                  <xsl:text disable-output-escaping="yes">background-color: #</xsl:text>
                                  <xsl:value-of select="'E8E8E8'"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes">background-color: #</xsl:text>
                                  <xsl:value-of select="$hcolor"/>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--<xsl:value-of select="$color"/>-->
                              <xsl:text/>
                            </xsl:if>
                            <!-- END of HIGHLIGHT -->
                            <!-- position -->
                            <xsl:if test="w:rPr/w:position">
                              <xsl:if
                                test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight">
                                <xsl:text>; </xsl:text>
                              </xsl:if>
                              <xsl:if
                                test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight)">
                                <xsl:text> style="</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when test="child::w:rPr/w:position">
                                  <xsl:variable name="val" select="child::w:rPr/w:position/@w:val"/>
                                  <xsl:choose>
                                    <xsl:when test="contains($val, '-')">
                                      <xsl:text>position:relative;top:</xsl:text>
                                      <xsl:value-of
                                        select="number(substring-after($val, '-')) div 2"/>
                                      <xsl:text>pt;mso-text-raise:-</xsl:text>
                                      <xsl:value-of
                                        select="number(substring-after($val, '-')) div 2"/>
                                      <xsl:text>pt</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:text>position:relative;top:-</xsl:text>
                                      <xsl:value-of select="number($val) div 2"/>
                                      <xsl:text>pt;mso-text-raise:</xsl:text>
                                      <xsl:value-of select="number($val) div 2"/>
                                      <xsl:text>pt</xsl:text>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <!-- SMALLCAPS -->
                            <xsl:if test="w:rPr/w:smallCaps">
                              <xsl:if
                                test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight">
                                <xsl:text>; </xsl:text>
                              </xsl:if>
                              <xsl:if
                                test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight)">
                                <xsl:text> style="</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when test="child::w:rPr/w:smallCaps[not(@w:val = '0')]">
                                  <xsl:text>font-variant: 'small-caps';</xsl:text>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <!-- END SMALLCAPS -->
                            <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                          </xsl:if>
                          <xsl:apply-templates/>

                          <xsl:if
                            test="w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false'] | w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:position | w:rPr/w:color | w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:highlight">

                            <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                          </xsl:if>

                          <xsl:if test="w:rPr/w:dstrike">
                            <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                            <xsl:text disable-output-escaping="yes">&lt;/small&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:strike">
                            <xsl:text disable-output-escaping="yes">&lt;/s&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:u">
                            <xsl:choose>
                              <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                                <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                              </xsl:when>
                              <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                                <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                                  <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                                </xsl:if>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:if>
                          <xsl:if
                            test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                            <xsl:text disable-output-escaping="yes">&lt;/i&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if
                            test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
                            <xsl:text disable-output-escaping="yes">&lt;/b&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                            <xsl:text disable-output-escaping="yes">&lt;/sub&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                            <xsl:text disable-output-escaping="yes">&lt;/sup&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:rPrChange">
                            <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                          </xsl:if>
                        </xsl:when>

                        <!-- ***********w:b********** -->
                        <xsl:when
                          test="w:rPr/w:b | w:rPr/w:i | w:rPr/w:rFonts | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:rPr/w:smallCaps | w:rPr/w:u | w:rPr/w:strike | w:rPr/w:caps | w:rPr/w:dstrike | w:rPr/w:vertAlign">

                          <xsl:if test="w:rPr/w:rPrChange">
                            <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal !msorm'"&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                            <xsl:text disable-output-escaping="yes">&lt;sup&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                            <xsl:text disable-output-escaping="yes">&lt;sub&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if
                            test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                            <xsl:text disable-output-escaping="yes">&lt;i&gt;</xsl:text>
                          </xsl:if>

                          <!--<xsl:if test="w:rPr/w:u and not(w:rPr/w:u/@w:val = 'false')">
          <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
        </xsl:if>-->
                          <xsl:if test="w:rPr/w:u">
                            <xsl:if test="w:rPr/w:u">
                              <xsl:choose>
                                <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                                  <xsl:text disable-output-escaping="yes">&lt;span class="DUnderline"&gt;</xsl:text>
                                </xsl:when>
                                <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                                  <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                                    <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                                  </xsl:if>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:strike">
                            <xsl:text disable-output-escaping="yes">&lt;s&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                            <xsl:text disable-output-escaping="yes">&lt;small&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:dstrike">
                            <xsl:text disable-output-escaping="yes">&lt;span class="double-strike"&gt;</xsl:text>
                            <xsl:text disable-output-escaping="yes">&lt;div class="the-lines"/&gt;</xsl:text>
                          </xsl:if>

                          <!-- Group SPAN tag -->
                          <xsl:if
                            test="
                              w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:u | w:rPr/w:smallCaps
                              | w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false']">
                            <xsl:text disable-output-escaping="yes">&lt;span</xsl:text>
                            <xsl:if test="w:rPr/w:rFonts">
                              <xsl:choose>
                                <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                                  <xsl:text disable-output-escaping="yes"> style="font-family:</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="mso-fareast-font-family:</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>

                              <xsl:choose>
                                <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                                  <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                                </xsl:when>
                                <xsl:when test="w:rPr/w:rFonts/@w:cs">
                                  <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                                </xsl:when>
                                <xsl:when test="w:rPr/w:rFonts/@w:eastAsia">
                                  <xsl:value-of select="w:rPr/w:rFonts/@w:eastAsia"/>
                                </xsl:when>
                                <xsl:when
                                  test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                                  <xsl:value-of
                                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"
                                  />
                                </xsl:when>
                                <xsl:when
                                  test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                                  <xsl:value-of
                                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                                  />
                                </xsl:when>
                                <xsl:when
                                  test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                                  <xsl:value-of
                                    select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                                  />
                                </xsl:when>
                                <xsl:otherwise>
                                  <!--<xsl:value-of select="w:rPr/w:rFonts/@w:asciiTheme"/>-->
                                </xsl:otherwise>
                              </xsl:choose>

                              <!-- 13-May-18: Added  LANG attribute -->
                              <xsl:if test="w:rPr/w:lang">
                                <xsl:text>;mso-fareast-language:</xsl:text>
                                <xsl:value-of select="upper-case(w:rPr/w:lang/@w:eastAsia)"/>
                              </xsl:if>
                              <xsl:text/>
                            </xsl:if>
                            <!-- check for un-bold -->
                            <xsl:if test="w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                              <xsl:if test="w:rPr/w:rFonts">
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when test="w:rPr/w:rFonts">
                                  <xsl:text disable-output-escaping="yes"> font-weight:</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="font-weight:</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                              <xsl:choose>
                                <xsl:when test="child::w:rPr/w:b[@w:val = '0']">
                                  <xsl:text> normal;</xsl:text>
                                </xsl:when>
                                <xsl:when test="child::w:rPr/w:b[@w:val = 'false']">
                                  <xsl:text> normal;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text> bold</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>
                            <!-- check for un-italic -->
                            <xsl:if test="w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                              <xsl:if
                                test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when
                                  test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                                  <xsl:text disable-output-escaping="yes"> font-style:</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="font-style:</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                              <xsl:choose>
                                <xsl:when test="child::w:rPr/w:i[@w:val = '0']">
                                  <xsl:text> normal;</xsl:text>
                                </xsl:when>
                                <xsl:when test="child::w:rPr/w:i[@w:val = 'false']">
                                  <xsl:text> normal;</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text> italic;</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:if>

                            <xsl:if test="w:rPr/w:szCs and not(w:rPr/w:sz)">
                              <xsl:if
                                test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when
                                  test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                                  <xsl:text disable-output-escaping="yes"> font-size:'</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                              <xsl:value-of select="(w:rPr/w:szCs/@w:val) div 2"/>
                              <xsl:text>pt'</xsl:text>
                            </xsl:if>
                            <xsl:if test="w:rPr/w:sz">
                              <xsl:if
                                test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when
                                  test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                                  <xsl:text disable-output-escaping="yes"> font-size:</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="font-size:</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                              <xsl:value-of select="(w:rPr/w:sz/@w:val) div 2"/>
                              <xsl:text>pt</xsl:text>
                            </xsl:if>


                            <xsl:if test="w:rPr/w:color">
                              <xsl:if
                                test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position">
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when
                                  test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:rFonts | w:rPr/w:position">
                                  <xsl:text disable-output-escaping="yes"> </xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes"> style="</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--<xsl:text disable-output-escaping="yes"> style="'</xsl:text>  -->

                              <xsl:choose>
                                <xsl:when test="$color = 'auto'">
                                  <xsl:value-of select="'000000'"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                                  <xsl:value-of select="$color"/>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--<xsl:value-of select="$color"/>-->
                            </xsl:if>
                            <!-- position -->
                            <xsl:if test="w:rPr/w:position">
                              <xsl:if
                                test="w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                                <xsl:text>; </xsl:text>
                              </xsl:if>
                              <xsl:if
                                test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:rFonts | w:rPr/w:color)">
                                <xsl:text> style="</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when test="child::w:rPr/w:position">
                                  <xsl:variable name="val" select="child::w:rPr/w:position/@w:val"/>
                                  <xsl:choose>
                                    <xsl:when test="contains($val, '-')">
                                      <xsl:text>position:relative;top:</xsl:text>
                                      <xsl:value-of
                                        select="number(substring-after($val, '-')) div 2"/>
                                      <xsl:text>pt;mso-text-raise:-</xsl:text>
                                      <xsl:value-of
                                        select="number(substring-after($val, '-')) div 2"/>
                                      <xsl:text>pt</xsl:text>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:text>position:relative;top:-</xsl:text>
                                      <xsl:value-of select="number($val) div 2"/>
                                      <xsl:text>pt;mso-text-raise:</xsl:text>
                                      <xsl:value-of select="number($val) div 2"/>
                                      <xsl:text>pt</xsl:text>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <!-- end POSITION -->
                            <!-- SMALLCAPS -->
                            <xsl:if test="w:rPr/w:smallCaps">
                              <xsl:if
                                test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position">
                                <xsl:text>; </xsl:text>
                              </xsl:if>
                              <xsl:if
                                test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position)">
                                <xsl:text> style="</xsl:text>
                              </xsl:if>
                              <xsl:choose>
                                <xsl:when test="child::w:rPr/w:smallCaps[not(@w:val = '0')]">
                                  <xsl:text>font-variant: 'small-caps';</xsl:text>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <!-- END SMALLCAPS -->

                            <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                          </xsl:if>
                          <!-- Group SPAN tag END-->

                          <!-- 27-sep-16 prasanth asked to give class name also -->
                          <xsl:variable name="classname" select="child::w:rPr/w:rStyle/@w:val"/>
                          <xsl:choose>
                            <xsl:when test="string-length($classname) > 0">
                              <xsl:choose>
                                <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'CommentReference'">
                                  <!--<span contenteditable="false" data-selected="true" data-track-changes-ignore="true"
                    name="cmd2"><img data-selected="true" data-track-changes-ignore="true" id="cmd2"
                      src="icon.png" style="width:15px;height:15px;"
                      title="Mariselvam:asd fasdfMariselvam:asd fasdf dsaf"/>-->



                                  <xsl:element name="span">
                                    <xsl:attribute name="class">
                                      <xsl:value-of select="'CommentReference'"/>
                                    </xsl:attribute>
                                    <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
                                    <xsl:attribute name="name">
                                      <xsl:text>cmtref</xsl:text>
                                      <xsl:value-of select="child::w:commentReference/@w:id + 1"/>
                                    </xsl:attribute>
                                    <!--<xsl:attribute name="style" select="'display:none'"/>-->
                                    <xsl:apply-templates/>
                                  </xsl:element>

                                </xsl:when>
                                <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
                                  <xsl:apply-templates/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:element name="span">
                                    <xsl:attribute name="class">
                                      <!--<xsl:value-of select="child::w:rPr/w:rStyle/@w:val"/>-->
                                      <xsl:value-of
                                        select="replace(child::w:rPr/w:rStyle/@w:val, '^([0-9]+)', '')"
                                      />
                                    </xsl:attribute>
                                    <!-- mahesh -->
                                    <!--                      <xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:caps[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="text-transform: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:smallCaps[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-variant: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:strike[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:u[@w:val = 'none']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'baseline']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="vertical-align: baseline;"&gt;</xsl:text>
                      </xsl:if>-->
                                    <xsl:apply-templates/>

                                    <!--<xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0'] | w:rPr/w:smallCaps[@w:val = '0'] | w:rPr/w:caps[@w:val = '0'] 
                    | w:rPr/w:strike[@w:val = '0'] | w:rPr/w:vertAlign[@w:val = 'baseline'] | w:rPr/w:u[@w:val = 'none']">
                    <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                  </xsl:if>-->
                                  </xsl:element>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
              <xsl:apply-templates/> 
            </span>-->
                            </xsl:when>
                            <xsl:otherwise>
                              <!--<xsl:choose>
              <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">
                <xsl:value-of select="upper-case(.)"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:apply-templates/>    
              </xsl:otherwise>
            </xsl:choose>     -->
                              <xsl:choose>
                                <xsl:when test="string-length($classname) > 0">
                                  <xsl:choose>
                                    <xsl:when
                                      test="child::w:rPr/w:rStyle/@w:val = 'CommentReference'">
                                      <!--<span contenteditable="false" data-selected="true" data-track-changes-ignore="true"
                    name="cmd2"><img data-selected="true" data-track-changes-ignore="true" id="cmd2"
                      src="icon.png" style="width:15px;height:15px;"
                      title="Mariselvam:asd fasdfMariselvam:asd fasdf dsaf"/>-->



                                      <xsl:element name="span">
                                        <xsl:attribute name="class">
                                          <xsl:value-of select="'CommentReference'"/>
                                        </xsl:attribute>
                                        <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
                                        <xsl:attribute name="name">
                                          <xsl:text>cmtref</xsl:text>
                                          <xsl:value-of select="child::w:commentReference/@w:id + 1"
                                          />
                                        </xsl:attribute>
                                        <!--<xsl:attribute name="style" select="'display:none'"/>-->
                                        <xsl:apply-templates/>
                                      </xsl:element>

                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:choose>
                                        <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                      
                      <xsl:value-of select="upper-case(.)"/>
                    </xsl:when>-->
                                        <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                                          <xsl:element name="span">
                                            <xsl:attribute name="style">
                                              <xsl:value-of select="'text-transform: uppercase'"/>
                                            </xsl:attribute>
                                            <xsl:apply-templates/>
                                          </xsl:element>
                                          <!--<xsl:value-of select="upper-case(.)"/>-->
                                        </xsl:when>
                                        <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                                          <xsl:element name="span">
                                            <xsl:attribute name="style">
                                              <xsl:value-of select="'font-variant: small-caps'"/>
                                            </xsl:attribute>
                                            <xsl:apply-templates/>
                                          </xsl:element>
                                        </xsl:when>
                                        <xsl:when
                                          test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
                                          <xsl:apply-templates/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:element name="span">
                                            <xsl:attribute name="class">
                                              <!--<xsl:value-of select="child::w:rPr/w:rStyle/@w:val"/>-->
                                              <xsl:value-of
                                                select="replace(child::w:rPr/w:rStyle/@w:val, '^([0-9]+)', '')"
                                              />
                                            </xsl:attribute>
                                            <!-- mahesh -->
                                            <xsl:if
                                              test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0']">
                                              <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal;"&gt;</xsl:text>
                                            </xsl:if>
                                            <xsl:if
                                              test="w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0']">
                                              <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal;"&gt;</xsl:text>
                                            </xsl:if>
                                            <xsl:if test="w:rPr/w:caps[@w:val = '0']">
                                              <xsl:text disable-output-escaping="yes">&lt;span style="text-transform: none;"&gt;</xsl:text>
                                            </xsl:if>
                                            <xsl:if test="w:rPr/w:smallCaps[@w:val = '0']">
                                              <xsl:text disable-output-escaping="yes">&lt;span style="font-variant: none;"&gt;</xsl:text>
                                            </xsl:if>
                                            <xsl:if test="w:rPr/w:strike[@w:val = '0']">
                                              <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                                            </xsl:if>
                                            <xsl:if test="w:rPr/w:u[@w:val = 'none']">
                                              <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                                            </xsl:if>
                                            <xsl:if test="w:rPr/w:vertAlign[@w:val = 'baseline']">
                                              <xsl:text disable-output-escaping="yes">&lt;span style="vertical-align: baseline;"&gt;</xsl:text>
                                            </xsl:if>
                                            <xsl:apply-templates/>

                                            <xsl:if
                                              test="
                                                w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0'] | w:rPr/w:smallCaps[@w:val = '0'] | w:rPr/w:caps[@w:val = '0']
                                                | w:rPr/w:strike[@w:val = '0'] | w:rPr/w:vertAlign[@w:val = 'baseline'] | w:rPr/w:u[@w:val = 'none']">
                                              <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                                            </xsl:if>
                                          </xsl:element>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                  <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
              <xsl:apply-templates/> 
            </span>-->
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                
                    <xsl:value-of select="upper-case(.)"/>
                  </xsl:when>-->
                                    <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                                      <xsl:element name="span">
                                        <xsl:attribute name="style">
                                          <xsl:value-of select="'text-transform: uppercase'"/>
                                        </xsl:attribute>
                                        <xsl:apply-templates/>
                                      </xsl:element>
                                      <!--<xsl:value-of select="upper-case(.)"/>-->
                                    </xsl:when>
                                    <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                                      <xsl:element name="span">
                                        <xsl:attribute name="style">
                                          <xsl:value-of select="'font-variant: small-caps'"/>
                                        </xsl:attribute>
                                        <xsl:apply-templates/>
                                      </xsl:element>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:apply-templates/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:otherwise>
                          </xsl:choose>

                          <xsl:if
                            test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:position | w:rPr/w:color | w:rPr/w:smallCaps[not(@w:val = '0')]">
                            <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                          </xsl:if>


                          <xsl:if test="w:rPr/w:dstrike">
                            <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                            <xsl:text disable-output-escaping="yes">&lt;/small&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:strike">
                            <xsl:text disable-output-escaping="yes">&lt;/s&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:u">
                            <xsl:choose>
                              <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                                <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                              </xsl:when>
                              <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                                <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                                  <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                                </xsl:if>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:if>
                          <xsl:if
                            test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                            <xsl:text disable-output-escaping="yes">&lt;/i&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if
                            test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
                            <xsl:text disable-output-escaping="yes">&lt;/b&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                            <xsl:text disable-output-escaping="yes">&lt;/sub&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                            <xsl:text disable-output-escaping="yes">&lt;/sup&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:rPrChange">
                            <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                          </xsl:if>
                        </xsl:when>
                        <xsl:otherwise>

                          <xsl:apply-templates/>
                        </xsl:otherwise>
                      </xsl:choose>
                      <!--<xsl:apply-templates/>-->

                      <!--<xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0'] | w:rPr/w:smallCaps[@w:val = '0'] | w:rPr/w:caps[@w:val = '0'] 
                        | w:rPr/w:strike[@w:val = '0'] | w:rPr/w:vertAlign[@w:val = 'baseline'] | w:rPr/w:u[@w:val = 'none']">
                        <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                      </xsl:if>-->
                    </xsl:element>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
            <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
              <xsl:apply-templates/> 
            </span>-->
          </xsl:when>
          <xsl:otherwise>
            <xsl:choose>
              <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                
                    <xsl:value-of select="upper-case(.)"/>
                  </xsl:when>-->
              <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                <xsl:element name="span">
                  <xsl:attribute name="style">
                    <xsl:value-of select="'text-transform: uppercase'"/>
                  </xsl:attribute>
                  <xsl:apply-templates/>
                </xsl:element>
                <!--<xsl:value-of select="upper-case(.)"/>-->
              </xsl:when>
              <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                <xsl:element name="span">
                  <xsl:attribute name="style">
                    <xsl:value-of select="'font-variant: small-caps'"/>
                  </xsl:attribute>
                  <xsl:apply-templates/>
                </xsl:element>
              </xsl:when>
              <xsl:otherwise>
                <xsl:apply-templates/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
        <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
          <xsl:apply-templates/>
        </span>-->
        <xsl:if
          test="w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false'] | w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:position | w:rPr/w:color | w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:highlight">
          <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
        </xsl:if>

        <xsl:if test="w:rPr/w:dstrike">
          <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
          <xsl:text disable-output-escaping="yes">&lt;/small&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:strike">
          <xsl:text disable-output-escaping="yes">&lt;/s&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:u">
          <xsl:choose>
            <xsl:when test="w:rPr/w:u[@w:val = 'double']">
              <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
            </xsl:when>
            <xsl:when test="w:rPr/w:u[@w:val = 'single']">
              <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
            </xsl:when>
            <!--Updated for "w:u" contain no value means remove that 17-7-2019-->
            <xsl:when test="w:rPr/w:u[not(@w:val)]"/>
            <!--End-->
            <xsl:otherwise>
              <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
        <xsl:if
          test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
          <xsl:text disable-output-escaping="yes">&lt;/i&gt;</xsl:text>
        </xsl:if>
        <xsl:if
          test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
          <xsl:text disable-output-escaping="yes">&lt;/b&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
          <xsl:text disable-output-escaping="yes">&lt;/sub&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
          <xsl:text disable-output-escaping="yes">&lt;/sup&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:rPrChange">
          <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
        </xsl:if>

      </xsl:when>

      <!-- ***********w:b********** -->
      <xsl:when
        test="w:rPr/w:b | w:rPr/w:i | w:rPr/w:rFonts | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:rPr/w:smallCaps | w:rPr/w:u | w:rPr/w:strike | w:rPr/w:caps | w:rPr/w:dstrike | w:rPr/w:vertAlign">
        <xsl:if test="w:rPr/w:rPrChange">
          <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal !msorm'"&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
          <xsl:text disable-output-escaping="yes">&lt;sup&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
          <xsl:text disable-output-escaping="yes">&lt;sub&gt;</xsl:text>
        </xsl:if>
        <xsl:if
          test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
          <xsl:text disable-output-escaping="yes">&lt;i&gt;</xsl:text>
        </xsl:if>

        <!--<xsl:if test="w:rPr/w:u and not(w:rPr/w:u/@w:val = 'false')">
          <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
        </xsl:if>-->
        <xsl:if test="w:rPr/w:u">
          <xsl:if test="w:rPr/w:u">
            <xsl:choose>
              <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                <xsl:text disable-output-escaping="yes">&lt;span class="DUnderline"&gt;</xsl:text>
              </xsl:when>
              <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                  <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                </xsl:if>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
        </xsl:if>
        <xsl:if test="w:rPr/w:strike">
          <xsl:text disable-output-escaping="yes">&lt;s&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
          <xsl:text disable-output-escaping="yes">&lt;small&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:dstrike">
          <xsl:text disable-output-escaping="yes">&lt;span class="double-strike"&gt;</xsl:text>
          <xsl:text disable-output-escaping="yes">&lt;div class="the-lines"/&gt;</xsl:text>
        </xsl:if>

        <!-- Group SPAN tag -->
        <xsl:if
          test="
            w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:u | w:rPr/w:smallCaps
            | w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false']">
          <xsl:text disable-output-escaping="yes">&lt;span</xsl:text>
          <xsl:if test="w:rPr/w:rFonts">
            <xsl:choose>
              <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                <xsl:text disable-output-escaping="yes"> style="font-family:</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="mso-fareast-font-family:</xsl:text>
              </xsl:otherwise>
            </xsl:choose>

            <xsl:choose>
              <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
              </xsl:when>
              <xsl:when test="w:rPr/w:rFonts/@w:cs">
                <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
              </xsl:when>
              <xsl:when test="w:rPr/w:rFonts/@w:eastAsia">
                <xsl:value-of select="w:rPr/w:rFonts/@w:eastAsia"/>
              </xsl:when>
              <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                <xsl:value-of select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"
                />
              </xsl:when>
              <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                <xsl:value-of
                  select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>
              </xsl:when>
              <xsl:when test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                <xsl:value-of
                  select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"/>
              </xsl:when>
              <xsl:otherwise>
                <!--<xsl:value-of select="w:rPr/w:rFonts/@w:asciiTheme"/>-->
              </xsl:otherwise>
            </xsl:choose>

            <!-- 13-May-18: Added  LANG attribute -->
            <xsl:if test="w:rPr/w:lang">
              <xsl:text>;mso-fareast-language:</xsl:text>
              <xsl:value-of select="upper-case(w:rPr/w:lang/@w:eastAsia)"/>
            </xsl:if>
            <xsl:text/>
          </xsl:if>
          <!-- check for un-bold -->
          <xsl:if test="w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
            <xsl:if test="w:rPr/w:rFonts">
              <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when test="w:rPr/w:rFonts">
                <xsl:text disable-output-escaping="yes"> font-weight:</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="font-weight:</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="child::w:rPr/w:b[@w:val = '0']">
                <xsl:text> normal;</xsl:text>
              </xsl:when>
              <xsl:when test="child::w:rPr/w:b[@w:val = 'false']">
                <xsl:text> normal;</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text> bold</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
          <!-- check for un-italic -->
          <xsl:if test="w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
            <xsl:if test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
              <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                <xsl:text disable-output-escaping="yes"> font-style:</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="font-style:</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
              <xsl:when test="child::w:rPr/w:i[@w:val = '0']">
                <xsl:text> normal;</xsl:text>
              </xsl:when>
              <xsl:when test="child::w:rPr/w:i[@w:val = 'false']">
                <xsl:text> normal;</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text> italic;</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>

          <xsl:if test="w:rPr/w:szCs and not(w:rPr/w:sz)">
            <xsl:if
              test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
              <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when
                test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                <xsl:text disable-output-escaping="yes"> font-size:'</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
            <xsl:value-of select="(w:rPr/w:szCs/@w:val) div 2"/>
            <xsl:text>pt'</xsl:text>
          </xsl:if>
          <xsl:if test="w:rPr/w:sz">
            <xsl:if
              test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
              <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when
                test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                <xsl:text disable-output-escaping="yes"> font-size:</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="font-size:</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
            <xsl:value-of select="(w:rPr/w:sz/@w:val) div 2"/>
            <xsl:text>pt</xsl:text>
          </xsl:if>


          <xsl:if test="w:rPr/w:color">
            <xsl:if
              test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts">
              <xsl:text>;</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when
                test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:rFonts">
                <xsl:text disable-output-escaping="yes"> </xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes"> style="</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
            <!--<xsl:text disable-output-escaping="yes"> style="'</xsl:text>  -->

            <xsl:choose>
              <xsl:when test="$color = 'auto'">
                <xsl:value-of select="'000000'"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                <xsl:value-of select="$color"/>
              </xsl:otherwise>
            </xsl:choose>
            <!--<xsl:value-of select="$color"/>-->
          </xsl:if>
          <!-- position -->
          <xsl:if test="w:rPr/w:position">
            <xsl:if
              test="w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
              <xsl:text>; </xsl:text>
            </xsl:if>
            <xsl:if
              test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:rFonts | w:rPr/w:color)">
              <xsl:text> style="</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when test="child::w:rPr/w:position">
                <xsl:variable name="val" select="child::w:rPr/w:position/@w:val"/>
                <xsl:choose>
                  <xsl:when test="contains($val, '-')">
                    <xsl:text>position:relative;top:</xsl:text>
                    <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                    <xsl:text>pt;mso-text-raise:-</xsl:text>
                    <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                    <xsl:text>pt</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>position:relative;top:-</xsl:text>
                    <xsl:value-of select="number($val) div 2"/>
                    <xsl:text>pt;mso-text-raise:</xsl:text>
                    <xsl:value-of select="number($val) div 2"/>
                    <xsl:text>pt</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
            </xsl:choose>
          </xsl:if>
          <!-- end POSITION -->
          <!-- SMALLCAPS -->
          <xsl:if test="w:rPr/w:smallCaps">
            <xsl:if
              test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position">
              <xsl:text>; </xsl:text>
            </xsl:if>
            <xsl:if
              test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position)">
              <xsl:text> style="</xsl:text>
            </xsl:if>
            <xsl:choose>
              <xsl:when test="child::w:rPr/w:smallCaps[not(@w:val = '0')]">
                <xsl:text>font-variant: 'small-caps';</xsl:text>
              </xsl:when>
            </xsl:choose>
          </xsl:if>
          <!-- END SMALLCAPS -->

          <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
        </xsl:if>
        <!-- Group SPAN tag END-->

        <!-- 27-sep-16 prasanth asked to give class name also -->
        <xsl:variable name="classname" select="child::w:rPr/w:rStyle/@w:val"/>
        <xsl:choose>
          <xsl:when test="string-length($classname) > 0">
            <xsl:choose>
              <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'CommentReference'">
                <!--<span contenteditable="false" data-selected="true" data-track-changes-ignore="true"
                    name="cmd2"><img data-selected="true" data-track-changes-ignore="true" id="cmd2"
                      src="icon.png" style="width:15px;height:15px;"
                      title="Mariselvam:asd fasdfMariselvam:asd fasdf dsaf"/>-->



                <xsl:element name="span">
                  <xsl:attribute name="class">
                    <xsl:value-of select="'CommentReference'"/>
                  </xsl:attribute>
                  <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
                  <xsl:attribute name="name">
                    <xsl:text>cmtref</xsl:text>
                    <xsl:value-of select="child::w:commentReference/@w:id + 1"/>
                  </xsl:attribute>
                  <!--<xsl:attribute name="style" select="'display:none'"/>-->
                  <xsl:apply-templates/>
                </xsl:element>

              </xsl:when>
              <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
                <xsl:apply-templates/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:element name="span">
                  <xsl:attribute name="class">
                    <!--<xsl:value-of select="child::w:rPr/w:rStyle/@w:val"/>-->
                    <xsl:value-of select="replace(child::w:rPr/w:rStyle/@w:val, '^([0-9]+)', '')"/>
                  </xsl:attribute>
                  <!-- mahesh -->
                  <!--                      <xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:caps[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="text-transform: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:smallCaps[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-variant: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:strike[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:u[@w:val = 'none']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'baseline']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="vertical-align: baseline;"&gt;</xsl:text>
                      </xsl:if>-->


                  <xsl:choose>
                    <xsl:when
                      test="w:rPr/w:i | w:rPr/w:b | w:rPr/w:rFonts | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:rPr/w:smallCaps | w:rPr/w:u | w:rPr/w:strike | w:rPr/w:caps | w:rPr/w:dstrike | w:rPr/w:vertAlign | w:rPr/w:highlight">

                      <xsl:if test="w:rPr/w:rPrChange">
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal !msorm'"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                        <xsl:text disable-output-escaping="yes">&lt;sup&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                        <xsl:text disable-output-escaping="yes">&lt;sub&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if
                        test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
                        <xsl:text disable-output-escaping="yes">&lt;b&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if
                        test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                        <xsl:text disable-output-escaping="yes">&lt;i&gt;</xsl:text>
                      </xsl:if>
                      <!--<xsl:if test="w:rPr/w:u and not(w:rPr/w:u/@w:val = 'false')">
          <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
        </xsl:if>-->
                      <xsl:if test="w:rPr/w:u">
                        <xsl:if test="w:rPr/w:u">
                          <xsl:choose>
                            <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                              <xsl:text disable-output-escaping="yes">&lt;span class="DUnderline"&gt;</xsl:text>
                            </xsl:when>
                            <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                              <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                                <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                              </xsl:if>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:strike">
                        <xsl:text disable-output-escaping="yes">&lt;s&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                        <xsl:text disable-output-escaping="yes">&lt;small&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:dstrike">
                        <xsl:text disable-output-escaping="yes">&lt;span class="double-strike"&gt;</xsl:text>
                        <xsl:text disable-output-escaping="yes">&lt;div class="the-lines"/&gt;</xsl:text>
                      </xsl:if>

                      <!-- Group SPAN tag -->
                      <xsl:if
                        test="
                          w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:u | w:rPr/w:smallCaps | w:rPr/w:highlight | w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false']
                          | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false']">
                        <xsl:text disable-output-escaping="yes">&lt;span</xsl:text>

                        <xsl:if test="w:rPr/w:rFonts">
                          <xsl:choose>
                            <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                              <xsl:text disable-output-escaping="yes"> style="font-family:</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="mso-fareast-font-family:</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>

                          <xsl:choose>
                            <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                              <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                            </xsl:when>
                            <xsl:when test="w:rPr/w:rFonts/@w:cs">
                              <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                            </xsl:when>
                            <xsl:when test="w:rPr/w:rFonts/@w:eastAsia">
                              <xsl:value-of select="w:rPr/w:rFonts/@w:eastAsia"/>
                            </xsl:when>
                            <xsl:when
                              test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                              <xsl:value-of
                                select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"
                              />
                            </xsl:when>
                            <xsl:when
                              test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                              <xsl:value-of
                                select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                              />
                            </xsl:when>
                            <xsl:when
                              test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                              <xsl:value-of
                                select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of
                                select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                              />
                            </xsl:otherwise>
                          </xsl:choose>

                          <!-- 13-May-18: Added  LANG attribute -->
                          <xsl:if test="w:rPr/w:lang">
                            <xsl:text>;mso-fareast-language:</xsl:text>
                            <xsl:value-of select="upper-case(w:rPr/w:lang/@w:eastAsia)"/>
                          </xsl:if>
                          <xsl:text/>
                        </xsl:if>
                        <!-- check for un-bold -->
                        <xsl:if test="w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                          <xsl:if test="w:rPr/w:rFonts">
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when test="w:rPr/w:rFonts">
                              <xsl:text disable-output-escaping="yes"> font-weight:</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="font-weight:</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                          <xsl:choose>
                            <xsl:when test="child::w:rPr/w:b[@w:val = '0']">
                              <xsl:text> normal</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:rPr/w:b[@w:val = 'false']">
                              <xsl:text> normal</xsl:text>
                            </xsl:when>
                            <!--<xsl:otherwise>
                <xsl:text> bold</xsl:text>
              </xsl:otherwise>-->
                          </xsl:choose>
                        </xsl:if>
                        <!-- check for un-italic -->
                        <xsl:if test="w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                          <xsl:if
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when
                              test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                              <xsl:text disable-output-escaping="yes"> font-style:</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="font-style:</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                          <xsl:choose>
                            <xsl:when test="child::w:rPr/w:i[@w:val = '0']">
                              <xsl:text> normal</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:rPr/w:i[@w:val = 'false']">
                              <xsl:text> normal</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <!--  <xsl:text> italic</xsl:text>-->
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>

                        <xsl:if test="w:rPr/w:szCs and not(w:rPr/w:sz)">
                          <xsl:if
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when
                              test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                              <xsl:text disable-output-escaping="yes"> font-size:'</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                          <xsl:value-of select="(w:rPr/w:szCs/@w:val) div 2"/>
                          <xsl:text>pt'</xsl:text>
                        </xsl:if>
                        <xsl:if test="w:rPr/w:sz">
                          <xsl:if
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when
                              test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                              <xsl:text disable-output-escaping="yes"> font-size:</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="font-size:</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                          <xsl:value-of select="(w:rPr/w:sz/@w:val) div 2"/>
                          <xsl:text>pt</xsl:text>
                        </xsl:if>

                        <xsl:if test="w:rPr/w:color">
                          <xsl:if
                            test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position">
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when
                              test="w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                              <xsl:text disable-output-escaping="yes"> </xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                          <xsl:choose>
                            <xsl:when test="$color = 'auto'">
                              <xsl:value-of select="'000000'"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                              <xsl:value-of select="$color"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!--<xsl:value-of select="$color"/>-->
                          <xsl:text/>
                        </xsl:if>
                        <!-- END of COLOR -->
                        <!-- HIGHLIGHT -->
                        <xsl:if test="w:rPr/w:highlight">
                          <xsl:if
                            test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position | w:rPr/w:color">
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when
                              test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position | w:rPr/w:color">
                              <xsl:text disable-output-escaping="yes"> </xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                          <xsl:choose>
                            <xsl:when test="$hcolor = 'auto'">
                              <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                              <xsl:value-of select="'000000'"/>
                            </xsl:when>
                            <xsl:when test="$hcolor = 'lightGray'">
                              <xsl:text disable-output-escaping="yes">background-color: #</xsl:text>
                              <xsl:value-of select="'E8E8E8'"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                              <xsl:value-of select="$hcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!--<xsl:value-of select="$color"/>-->
                          <xsl:text/>
                        </xsl:if>
                        <!-- END of HIGHLIGHT -->
                        <!-- position -->
                        <xsl:if test="w:rPr/w:position">
                          <xsl:if
                            test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight">
                            <xsl:text>; </xsl:text>
                          </xsl:if>
                          <xsl:if
                            test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:highlight)">
                            <xsl:text> style="</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when test="child::w:rPr/w:position">
                              <xsl:variable name="val" select="child::w:rPr/w:position/@w:val"/>
                              <xsl:choose>
                                <xsl:when test="contains($val, '-')">
                                  <xsl:text>position:relative;top:</xsl:text>
                                  <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                                  <xsl:text>pt;mso-text-raise:-</xsl:text>
                                  <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text>position:relative;top:-</xsl:text>
                                  <xsl:value-of select="number($val) div 2"/>
                                  <xsl:text>pt;mso-text-raise:</xsl:text>
                                  <xsl:value-of select="number($val) div 2"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <!-- SMALLCAPS -->
                        <xsl:if test="w:rPr/w:smallCaps">
                          <xsl:if
                            test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight">
                            <xsl:text>; </xsl:text>
                          </xsl:if>
                          <xsl:if
                            test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position | w:rPr/w:highlight)">
                            <xsl:text> style="</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when test="child::w:rPr/w:smallCaps[not(@w:val = '0')]">
                              <xsl:text>font-variant: 'small-caps';</xsl:text>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <!-- END SMALLCAPS -->
                        <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:apply-templates/>

                      <xsl:if
                        test="w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false'] | w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:position | w:rPr/w:color | w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:highlight">
                        <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                      </xsl:if>

                      <xsl:if test="w:rPr/w:dstrike">
                        <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                        <xsl:text disable-output-escaping="yes">&lt;/small&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:strike">
                        <xsl:text disable-output-escaping="yes">&lt;/s&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:u">
                        <xsl:choose>
                          <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                            <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                          </xsl:when>
                          <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                            <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                              <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                            </xsl:if>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                      <xsl:if
                        test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                        <xsl:text disable-output-escaping="yes">&lt;/i&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if
                        test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
                        <xsl:text disable-output-escaping="yes">&lt;/b&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                        <xsl:text disable-output-escaping="yes">&lt;/sub&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                        <xsl:text disable-output-escaping="yes">&lt;/sup&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:rPrChange">
                        <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                      </xsl:if>
                    </xsl:when>

                    <!-- ***********w:b********** -->
                    <xsl:when
                      test="w:rPr/w:b | w:rPr/w:i | w:rPr/w:rFonts | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:rPr/w:smallCaps | w:rPr/w:u | w:rPr/w:strike | w:rPr/w:caps | w:rPr/w:dstrike | w:rPr/w:vertAlign">

                      <xsl:if test="w:rPr/w:rPrChange">
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal !msorm'"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                        <xsl:text disable-output-escaping="yes">&lt;sup&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                        <xsl:text disable-output-escaping="yes">&lt;sub&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if
                        test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                        <xsl:text disable-output-escaping="yes">&lt;i&gt;</xsl:text>
                      </xsl:if>

                      <!--<xsl:if test="w:rPr/w:u and not(w:rPr/w:u/@w:val = 'false')">
          <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
        </xsl:if>-->
                      <xsl:if test="w:rPr/w:u">
                        <xsl:if test="w:rPr/w:u">
                          <xsl:choose>
                            <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                              <xsl:text disable-output-escaping="yes">&lt;span class="DUnderline"&gt;</xsl:text>
                            </xsl:when>
                            <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                              <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                                <xsl:text disable-output-escaping="yes">&lt;u&gt;</xsl:text>
                              </xsl:if>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:strike">
                        <xsl:text disable-output-escaping="yes">&lt;s&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                        <xsl:text disable-output-escaping="yes">&lt;small&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:dstrike">
                        <xsl:text disable-output-escaping="yes">&lt;span class="double-strike"&gt;</xsl:text>
                        <xsl:text disable-output-escaping="yes">&lt;div class="the-lines"/&gt;</xsl:text>
                      </xsl:if>

                      <!-- Group SPAN tag -->
                      <xsl:if
                        test="
                          w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:color | w:rPr/w:position | w:u | w:rPr/w:smallCaps
                          | w:rPr/w:b[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:i[@w:val = 'false']">
                        <xsl:text disable-output-escaping="yes">&lt;span</xsl:text>
                        <xsl:if test="w:rPr/w:rFonts">
                          <xsl:choose>
                            <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                              <xsl:text disable-output-escaping="yes"> style="font-family:</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="mso-fareast-font-family:</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>

                          <xsl:choose>
                            <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                              <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                            </xsl:when>
                            <xsl:when test="w:rPr/w:rFonts/@w:cs">
                              <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                            </xsl:when>
                            <xsl:when test="w:rPr/w:rFonts/@w:eastAsia">
                              <xsl:value-of select="w:rPr/w:rFonts/@w:eastAsia"/>
                            </xsl:when>
                            <xsl:when
                              test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii">
                              <xsl:value-of
                                select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:ascii"
                              />
                            </xsl:when>
                            <xsl:when
                              test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                              <xsl:value-of
                                select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                              />
                            </xsl:when>
                            <xsl:when
                              test="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia">
                              <xsl:value-of
                                select="//w:styles/w:docDefaults/w:rPrDefault/w:rPr/w:rFonts/@w:eastAsia"
                              />
                            </xsl:when>
                            <xsl:otherwise>
                              <!--<xsl:value-of select="w:rPr/w:rFonts/@w:asciiTheme"/>-->
                            </xsl:otherwise>
                          </xsl:choose>

                          <!-- 13-May-18: Added  LANG attribute -->
                          <xsl:if test="w:rPr/w:lang">
                            <xsl:text>;mso-fareast-language:</xsl:text>
                            <xsl:value-of select="upper-case(w:rPr/w:lang/@w:eastAsia)"/>
                          </xsl:if>
                          <xsl:text/>
                        </xsl:if>
                        <!-- check for un-bold -->
                        <xsl:if test="w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                          <xsl:if test="w:rPr/w:rFonts">
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when test="w:rPr/w:rFonts">
                              <xsl:text disable-output-escaping="yes"> font-weight:</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="font-weight:</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                          <xsl:choose>
                            <xsl:when test="child::w:rPr/w:b[@w:val = '0']">
                              <xsl:text> normal;</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:rPr/w:b[@w:val = 'false']">
                              <xsl:text> normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> bold</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>
                        <!-- check for un-italic -->
                        <xsl:if test="w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                          <xsl:if
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when
                              test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0']">
                              <xsl:text disable-output-escaping="yes"> font-style:</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="font-style:</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                          <xsl:choose>
                            <xsl:when test="child::w:rPr/w:i[@w:val = '0']">
                              <xsl:text> normal;</xsl:text>
                            </xsl:when>
                            <xsl:when test="child::w:rPr/w:i[@w:val = 'false']">
                              <xsl:text> normal;</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text> italic;</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:if>

                        <xsl:if test="w:rPr/w:szCs and not(w:rPr/w:sz)">
                          <xsl:if
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when
                              test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                              <xsl:text disable-output-escaping="yes"> font-size:'</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                          <xsl:value-of select="(w:rPr/w:szCs/@w:val) div 2"/>
                          <xsl:text>pt'</xsl:text>
                        </xsl:if>
                        <xsl:if test="w:rPr/w:sz">
                          <xsl:if
                            test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when
                              test="w:rPr/w:rFonts | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                              <xsl:text disable-output-escaping="yes"> font-size:</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="font-size:</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!--<xsl:text disable-output-escaping="yes"> style="font-size:'</xsl:text>  -->
                          <xsl:value-of select="(w:rPr/w:sz/@w:val) div 2"/>
                          <xsl:text>pt</xsl:text>
                        </xsl:if>


                        <xsl:if test="w:rPr/w:color">
                          <xsl:if
                            test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:position">
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when
                              test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:rFonts | w:rPr/w:position">
                              <xsl:text disable-output-escaping="yes"> </xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes"> style="</xsl:text>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!--<xsl:text disable-output-escaping="yes"> style="'</xsl:text>  -->

                          <xsl:choose>
                            <xsl:when test="$color = 'auto'">
                              <xsl:value-of select="'000000'"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text disable-output-escaping="yes">color: #</xsl:text>
                              <xsl:value-of select="$color"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!--<xsl:value-of select="$color"/>-->
                        </xsl:if>
                        <!-- position -->
                        <xsl:if test="w:rPr/w:position">
                          <xsl:if
                            test="w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0']">
                            <xsl:text>; </xsl:text>
                          </xsl:if>
                          <xsl:if
                            test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:rFonts | w:rPr/w:color)">
                            <xsl:text> style="</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when test="child::w:rPr/w:position">
                              <xsl:variable name="val" select="child::w:rPr/w:position/@w:val"/>
                              <xsl:choose>
                                <xsl:when test="contains($val, '-')">
                                  <xsl:text>position:relative;top:</xsl:text>
                                  <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                                  <xsl:text>pt;mso-text-raise:-</xsl:text>
                                  <xsl:value-of select="number(substring-after($val, '-')) div 2"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:text>position:relative;top:-</xsl:text>
                                  <xsl:value-of select="number($val) div 2"/>
                                  <xsl:text>pt;mso-text-raise:</xsl:text>
                                  <xsl:value-of select="number($val) div 2"/>
                                  <xsl:text>pt</xsl:text>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <!-- end POSITION -->
                        <!-- SMALLCAPS -->
                        <xsl:if test="w:rPr/w:smallCaps">
                          <xsl:if
                            test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position">
                            <xsl:text>; </xsl:text>
                          </xsl:if>
                          <xsl:if
                            test="not(w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:sz | w:rPr/w:szCs | w:rPr/w:rFonts | w:rPr/w:color | w:rPr/w:position)">
                            <xsl:text> style="</xsl:text>
                          </xsl:if>
                          <xsl:choose>
                            <xsl:when test="child::w:rPr/w:smallCaps[not(@w:val = '0')]">
                              <xsl:text>font-variant: 'small-caps';</xsl:text>
                            </xsl:when>
                          </xsl:choose>
                        </xsl:if>
                        <!-- END SMALLCAPS -->

                        <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                      </xsl:if>
                      <!-- Group SPAN tag END-->

                      <!-- 27-sep-16 prasanth asked to give class name also -->
                      <xsl:variable name="classname" select="child::w:rPr/w:rStyle/@w:val"/>
                      <xsl:choose>
                        <xsl:when test="string-length($classname) > 0">
                          <xsl:choose>
                            <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'CommentReference'">
                              <!--<span contenteditable="false" data-selected="true" data-track-changes-ignore="true"
                    name="cmd2"><img data-selected="true" data-track-changes-ignore="true" id="cmd2"
                      src="icon.png" style="width:15px;height:15px;"
                      title="Mariselvam:asd fasdfMariselvam:asd fasdf dsaf"/>-->



                              <xsl:element name="span">
                                <xsl:attribute name="class">
                                  <xsl:value-of select="'CommentReference'"/>
                                </xsl:attribute>
                                <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
                                <xsl:attribute name="name">
                                  <xsl:text>cmtref</xsl:text>
                                  <xsl:value-of select="child::w:commentReference/@w:id + 1"/>
                                </xsl:attribute>
                                <!--<xsl:attribute name="style" select="'display:none'"/>-->
                                <xsl:apply-templates/>
                              </xsl:element>

                            </xsl:when>
                            <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
                              <xsl:apply-templates/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:element name="span">
                                <xsl:attribute name="class">
                                  <!--<xsl:value-of select="child::w:rPr/w:rStyle/@w:val"/>-->
                                  <xsl:value-of
                                    select="replace(child::w:rPr/w:rStyle/@w:val, '^([0-9]+)', '')"
                                  />
                                </xsl:attribute>
                                <!-- mahesh -->
                                <!--                      <xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:caps[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="text-transform: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:smallCaps[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="font-variant: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:strike[@w:val = '0']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:u[@w:val = 'none']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'baseline']">
                        <xsl:text disable-output-escaping="yes">&lt;span style="vertical-align: baseline;"&gt;</xsl:text>
                      </xsl:if>-->
                                <xsl:apply-templates/>

                                <!--<xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0'] | w:rPr/w:smallCaps[@w:val = '0'] | w:rPr/w:caps[@w:val = '0'] 
                    | w:rPr/w:strike[@w:val = '0'] | w:rPr/w:vertAlign[@w:val = 'baseline'] | w:rPr/w:u[@w:val = 'none']">
                    <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                  </xsl:if>-->
                              </xsl:element>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
              <xsl:apply-templates/> 
            </span>-->
                        </xsl:when>
                        <xsl:otherwise>
                          <!--<xsl:choose>
              <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">
                <xsl:value-of select="upper-case(.)"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:apply-templates/>    
              </xsl:otherwise>
            </xsl:choose>     -->
                          <xsl:choose>
                            <xsl:when test="string-length($classname) > 0">
                              <xsl:choose>
                                <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'CommentReference'">
                                  <!--<span contenteditable="false" data-selected="true" data-track-changes-ignore="true"
                    name="cmd2"><img data-selected="true" data-track-changes-ignore="true" id="cmd2"
                      src="icon.png" style="width:15px;height:15px;"
                      title="Mariselvam:asd fasdfMariselvam:asd fasdf dsaf"/>-->



                                  <xsl:element name="span">
                                    <xsl:attribute name="class">
                                      <xsl:value-of select="'CommentReference'"/>
                                    </xsl:attribute>
                                    <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
                                    <xsl:attribute name="name">
                                      <xsl:text>cmtref</xsl:text>
                                      <xsl:value-of select="child::w:commentReference/@w:id + 1"/>
                                    </xsl:attribute>
                                    <!--<xsl:attribute name="style" select="'display:none'"/>-->
                                    <xsl:apply-templates/>
                                  </xsl:element>

                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                      
                      <xsl:value-of select="upper-case(.)"/>
                    </xsl:when>-->
                                    <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                                      <xsl:element name="span">
                                        <xsl:attribute name="style">
                                          <xsl:value-of select="'text-transform: uppercase'"/>
                                        </xsl:attribute>
                                        <xsl:apply-templates/>
                                      </xsl:element>
                                      <!--<xsl:value-of select="upper-case(.)"/>-->
                                    </xsl:when>
                                    <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                                      <xsl:element name="span">
                                        <xsl:attribute name="style">
                                          <xsl:value-of select="'font-variant: small-caps'"/>
                                        </xsl:attribute>
                                        <xsl:apply-templates/>
                                      </xsl:element>
                                    </xsl:when>
                                    <xsl:when
                                      test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
                                      <xsl:apply-templates/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:element name="span">
                                        <xsl:attribute name="class">
                                          <!--<xsl:value-of select="child::w:rPr/w:rStyle/@w:val"/>-->
                                          <xsl:value-of
                                            select="replace(child::w:rPr/w:rStyle/@w:val, '^([0-9]+)', '')"
                                          />
                                        </xsl:attribute>
                                        <!-- mahesh -->
                                        <xsl:if
                                          test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0']">
                                          <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal;"&gt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if
                                          test="w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0']">
                                          <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal;"&gt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="w:rPr/w:caps[@w:val = '0']">
                                          <xsl:text disable-output-escaping="yes">&lt;span style="text-transform: none;"&gt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="w:rPr/w:smallCaps[@w:val = '0']">
                                          <xsl:text disable-output-escaping="yes">&lt;span style="font-variant: none;"&gt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="w:rPr/w:strike[@w:val = '0']">
                                          <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="w:rPr/w:u[@w:val = 'none']">
                                          <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                                        </xsl:if>
                                        <xsl:if test="w:rPr/w:vertAlign[@w:val = 'baseline']">
                                          <xsl:text disable-output-escaping="yes">&lt;span style="vertical-align: baseline;"&gt;</xsl:text>
                                        </xsl:if>
                                        <xsl:apply-templates/>

                                        <xsl:if
                                          test="
                                            w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0'] | w:rPr/w:smallCaps[@w:val = '0'] | w:rPr/w:caps[@w:val = '0']
                                            | w:rPr/w:strike[@w:val = '0'] | w:rPr/w:vertAlign[@w:val = 'baseline'] | w:rPr/w:u[@w:val = 'none']">
                                          <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                                        </xsl:if>
                                      </xsl:element>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
              <xsl:apply-templates/> 
            </span>-->
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:choose>
                                <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                
                    <xsl:value-of select="upper-case(.)"/>
                  </xsl:when>-->
                                <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                                  <xsl:element name="span">
                                    <xsl:attribute name="style">
                                      <xsl:value-of select="'text-transform: uppercase'"/>
                                    </xsl:attribute>
                                    <xsl:apply-templates/>
                                  </xsl:element>
                                  <!--<xsl:value-of select="upper-case(.)"/>-->
                                </xsl:when>
                                <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                                  <xsl:element name="span">
                                    <xsl:attribute name="style">
                                      <xsl:value-of select="'font-variant: small-caps'"/>
                                    </xsl:attribute>
                                    <xsl:apply-templates/>
                                  </xsl:element>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:apply-templates/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:otherwise>
                      </xsl:choose>

                      <xsl:if
                        test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:position | w:rPr/w:color | w:rPr/w:smallCaps[not(@w:val = '0')]">
                        <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                      </xsl:if>


                      <xsl:if test="w:rPr/w:dstrike">
                        <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                        <xsl:text disable-output-escaping="yes">&lt;/small&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:strike">
                        <xsl:text disable-output-escaping="yes">&lt;/s&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:u">
                        <xsl:choose>
                          <xsl:when test="w:rPr/w:u[@w:val = 'double']">
                            <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                          </xsl:when>
                          <xsl:when test="w:rPr/w:u[@w:val = 'single']">
                            <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                              <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
                            </xsl:if>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                      <xsl:if
                        test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
                        <xsl:text disable-output-escaping="yes">&lt;/i&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if
                        test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
                        <xsl:text disable-output-escaping="yes">&lt;/b&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
                        <xsl:text disable-output-escaping="yes">&lt;/sub&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
                        <xsl:text disable-output-escaping="yes">&lt;/sup&gt;</xsl:text>
                      </xsl:if>
                      <xsl:if test="w:rPr/w:rPrChange">
                        <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                      </xsl:if>
                    </xsl:when>
                    <xsl:otherwise>

                      <xsl:apply-templates/>
                    </xsl:otherwise>
                  </xsl:choose>

                  <!--<xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0'] | w:rPr/w:smallCaps[@w:val = '0'] | w:rPr/w:caps[@w:val = '0'] 
                    | w:rPr/w:strike[@w:val = '0'] | w:rPr/w:vertAlign[@w:val = 'baseline'] | w:rPr/w:u[@w:val = 'none']">
                    <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                  </xsl:if>-->
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
            <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
              <xsl:apply-templates/> 
            </span>-->
          </xsl:when>
          <xsl:otherwise>
            <!--<xsl:choose>
              <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">
                <xsl:value-of select="upper-case(.)"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:apply-templates/>    
              </xsl:otherwise>
            </xsl:choose>     -->
            <xsl:choose>
              <xsl:when test="string-length($classname) > 0">
                <xsl:choose>
                  <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'CommentReference'">
                    <!--<span contenteditable="false" data-selected="true" data-track-changes-ignore="true"
                    name="cmd2"><img data-selected="true" data-track-changes-ignore="true" id="cmd2"
                      src="icon.png" style="width:15px;height:15px;"
                      title="Mariselvam:asd fasdfMariselvam:asd fasdf dsaf"/>-->



                    <xsl:element name="span">
                      <xsl:attribute name="class">
                        <xsl:value-of select="'CommentReference'"/>
                      </xsl:attribute>
                      <!--<xsl:attribute name="contenteditable" select="'false'"/>-->
                      <xsl:attribute name="name">
                        <xsl:text>cmtref</xsl:text>
                        <xsl:value-of select="child::w:commentReference/@w:id + 1"/>
                      </xsl:attribute>
                      <!--<xsl:attribute name="style" select="'display:none'"/>-->
                      <xsl:apply-templates/>
                    </xsl:element>

                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:choose>
                      <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                      
                      <xsl:value-of select="upper-case(.)"/>
                    </xsl:when>-->
                      <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                        <xsl:element name="span">
                          <xsl:attribute name="style">
                            <xsl:value-of select="'text-transform: uppercase'"/>
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:element>
                        <!--<xsl:value-of select="upper-case(.)"/>-->
                      </xsl:when>
                      <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                        <xsl:element name="span">
                          <xsl:attribute name="style">
                            <xsl:value-of select="'font-variant: small-caps'"/>
                          </xsl:attribute>
                          <xsl:apply-templates/>
                        </xsl:element>
                      </xsl:when>
                      <xsl:when test="child::w:rPr/w:rStyle/@w:val = 'Nocharacterstyle1'">
                        <xsl:apply-templates/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:element name="span">
                          <xsl:attribute name="class">
                            <!--<xsl:value-of select="child::w:rPr/w:rStyle/@w:val"/>-->
                            <xsl:value-of
                              select="replace(child::w:rPr/w:rStyle/@w:val, '^([0-9]+)', '')"/>
                          </xsl:attribute>
                          <!-- mahesh -->
                          <xsl:if test="w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0']">
                            <xsl:text disable-output-escaping="yes">&lt;span style="font-style:normal;"&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0']">
                            <xsl:text disable-output-escaping="yes">&lt;span style="font-weight:normal;"&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:caps[@w:val = '0']">
                            <xsl:text disable-output-escaping="yes">&lt;span style="text-transform: none;"&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:smallCaps[@w:val = '0']">
                            <xsl:text disable-output-escaping="yes">&lt;span style="font-variant: none;"&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:strike[@w:val = '0']">
                            <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:u[@w:val = 'none']">
                            <xsl:text disable-output-escaping="yes">&lt;span style="text-decoration: none;"&gt;</xsl:text>
                          </xsl:if>
                          <xsl:if test="w:rPr/w:vertAlign[@w:val = 'baseline']">
                            <xsl:text disable-output-escaping="yes">&lt;span style="vertical-align: baseline;"&gt;</xsl:text>
                          </xsl:if>
                          <xsl:apply-templates/>

                          <xsl:if
                            test="
                              w:rPr/w:i[@w:val = 'false'] | w:rPr/w:i[@w:val = '0'] | w:rPr/w:b[@w:val = 'false'] | w:rPr/w:b[@w:val = '0'] | w:rPr/w:smallCaps[@w:val = '0'] | w:rPr/w:caps[@w:val = '0']
                              | w:rPr/w:strike[@w:val = '0'] | w:rPr/w:vertAlign[@w:val = 'baseline'] | w:rPr/w:u[@w:val = 'none']">
                            <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                          </xsl:if>
                        </xsl:element>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:otherwise>
                </xsl:choose>
                <!--<span class="{child::w:rPr/w:rStyle/@w:val}">          
              <xsl:apply-templates/> 
            </span>-->
              </xsl:when>
              <xsl:otherwise>
                <xsl:choose>
                  <!--<xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')] | w:rPr/w:caps[not(@w:val = '0')]">                
                    <xsl:value-of select="upper-case(.)"/>
                  </xsl:when>-->
                  <xsl:when test="w:rPr/w:caps[not(@w:val = '0')]">
                    <xsl:element name="span">
                      <xsl:attribute name="style">
                        <xsl:value-of select="'text-transform: uppercase'"/>
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:element>
                    <!--<xsl:value-of select="upper-case(.)"/>-->
                  </xsl:when>
                  <xsl:when test="w:rPr/w:smallCaps[not(@w:val = '0')]">
                    <xsl:element name="span">
                      <xsl:attribute name="style">
                        <xsl:value-of select="'font-variant: small-caps'"/>
                      </xsl:attribute>
                      <xsl:apply-templates/>
                    </xsl:element>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:apply-templates/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>

        <xsl:if
          test="w:rPr/w:b[@w:val = 'false' or @w:val = '0'] | w:rPr/w:i[@w:val = 'false' or @w:val = '0'] | w:rPr/w:rFonts | w:rPr/w:szCs | w:rPr/w:sz | w:rPr/w:position | w:rPr/w:color | w:rPr/w:smallCaps[not(@w:val = '0')]">
          <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
        </xsl:if>


        <xsl:if test="w:rPr/w:dstrike">
          <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:smallCaps[not(@w:val = '0')]">
          <xsl:text disable-output-escaping="yes">&lt;/small&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:strike">
          <xsl:text disable-output-escaping="yes">&lt;/s&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:u">
          <xsl:choose>
            <xsl:when test="w:rPr/w:u[@w:val = 'double']">
              <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
            </xsl:when>
            <xsl:when test="w:rPr/w:u[@w:val = 'single']">
              <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:if test="not(w:rPr/w:u[@w:val = 'none'])">
                <xsl:text disable-output-escaping="yes">&lt;/u&gt;</xsl:text>
              </xsl:if>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
        <xsl:if
          test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') and not(w:rPr/w:i/@w:val = '0'))">
          <xsl:text disable-output-escaping="yes">&lt;/i&gt;</xsl:text>
        </xsl:if>
        <xsl:if
          test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') and not(w:rPr/w:b/@w:val = '0'))">
          <xsl:text disable-output-escaping="yes">&lt;/b&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:vertAlign[@w:val = 'subscript']">
          <xsl:text disable-output-escaping="yes">&lt;/sub&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:vertAlign[@w:val = 'superscript']">
          <xsl:text disable-output-escaping="yes">&lt;/sup&gt;</xsl:text>
        </xsl:if>
        <xsl:if test="w:rPr/w:rPrChange">
          <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
        </xsl:if>
      </xsl:when>

      <xsl:when
        test="w:rPr/w:b and w:rPr/w:i and (not(w:rPr/w:b/@w:val = 'false') or not(w:rPr/w:b/@w:val = '0')) and (not(w:rPr/w:i/@w:val = 'false') or not(w:rPr/w:i/@w:val = '0'))">
        <xsl:element name="b">
          <xsl:element name="i">
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>
      </xsl:when>

      <xsl:when
        test="w:rPr/w:b and (not(w:rPr/w:b/@w:val = 'false') or not(w:rPr/w:b/@w:val = '0'))">
        <xsl:element name="b">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>

      <xsl:when
        test="w:rPr/w:i and (not(w:rPr/w:i/@w:val = 'false') or not(w:rPr/w:i/@w:val = '0'))">
        <xsl:element name="i">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>

      <!--      
      <xsl:when test="w:rPr/w:b">
        <xsl:element name="b">
          <xsl:apply-templates/>        
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:i">
        <xsl:element name="i">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      -->

      <xsl:when test="$color">
        <xsl:element name="span">
          <xsl:attribute name="style" select="concat('color:#', $color)"/>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <!-- 29-Apr-17: For *********************** KLI NUMP **************************************************************************** NUMP paragraphs and Citations -->
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'xrefmarginal']">
        <xsl:variable name="xrefmarginal" select="."/>
        <xsl:element name="a">
          <xsl:attribute name="href">
            <xsl:value-of select="concat($filename, '.xhtml#nump1')"/>
            <!--<xsl:value-of select="count(preceding::w:p/w:pPr/w:pStyle[@w:val = 'STitle1'])"/>-->
            <xsl:text>_</xsl:text>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <xsl:attribute name="class" select="'citationnumber'"/>
          <xsl:attribute name="itemid">
            <xsl:text>nump1</xsl:text>
            <!-- <xsl:value-of select="count(preceding::w:p/w:pPr/w:pStyle[@w:val = 'STitle1'])"/>-->
            <xsl:text>_</xsl:text>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'NumberCitation'"/>
            <xsl:value-of select="normalize-space($xrefmarginal)"/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'xrefmarginal8']">
        <xsl:variable name="xrefmarginal" select="."/>
        <xsl:element name="a">
          <xsl:attribute name="href">
            <xsl:value-of select="concat($filename, '.xhtml#nump8_')"/>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <xsl:attribute name="class" select="'citationnumber'"/>
          <xsl:attribute name="itemid">
            <xsl:text>nump8_</xsl:text>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'NumberCitation'"/>
            <xsl:value-of select="normalize-space($xrefmarginal)"/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'xrefmarginal7']">
        <xsl:variable name="xrefmarginal" select="."/>
        <xsl:element name="a">
          <xsl:attribute name="href">
            <xsl:value-of select="concat($filename, '.xhtml#nump7_')"/>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <xsl:attribute name="class" select="'citationnumber'"/>
          <xsl:attribute name="itemid">
            <xsl:text>nump7_</xsl:text>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'NumberCitation'"/>
            <xsl:value-of select="normalize-space($xrefmarginal)"/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'xrefmarginal6']">
        <xsl:variable name="xrefmarginal" select="."/>
        <xsl:element name="a">
          <xsl:attribute name="href">
            <xsl:value-of select="concat($filename, '.xhtml#nump6_')"/>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <xsl:attribute name="class" select="'citationnumber'"/>
          <xsl:attribute name="itemid">
            <xsl:text>nump6_</xsl:text>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'NumberCitation'"/>
            <xsl:value-of select="normalize-space($xrefmarginal)"/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'xrefmarginal5']">
        <xsl:variable name="xrefmarginal" select="."/>
        <xsl:element name="a">
          <xsl:attribute name="href">
            <xsl:value-of select="concat($filename, '.xhtml#nump5_')"/>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <xsl:attribute name="class" select="'citationnumber'"/>
          <xsl:attribute name="itemid">
            <xsl:text>nump5_</xsl:text>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'NumberCitation'"/>
            <xsl:value-of select="normalize-space($xrefmarginal)"/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'xrefmarginal4']">
        <xsl:variable name="xrefmarginal" select="."/>
        <xsl:element name="a">
          <xsl:attribute name="href">
            <xsl:value-of select="concat($filename, '.xhtml#nump4_')"/>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <xsl:attribute name="class" select="'citationnumber'"/>
          <xsl:attribute name="itemid">
            <xsl:text>nump4_</xsl:text>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'NumberCitation'"/>
            <xsl:value-of select="normalize-space($xrefmarginal)"/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'xrefmarginal3']">
        <xsl:variable name="xrefmarginal" select="."/>
        <xsl:element name="a">
          <xsl:attribute name="href">
            <xsl:value-of select="concat($filename, '.xhtml#nump3_')"/>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <xsl:attribute name="class" select="'citationnumber'"/>
          <xsl:attribute name="itemid">
            <xsl:text>nump3_</xsl:text>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'NumberCitation'"/>
            <xsl:value-of select="normalize-space($xrefmarginal)"/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr[w:rStyle/@w:val = 'xrefmarginal2']">
        <xsl:variable name="xrefmarginal" select="."/>
        <xsl:element name="a">
          <xsl:attribute name="href">
            <xsl:value-of select="concat($filename, '.xhtml#nump2_')"/>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:attribute name="title">
            <xsl:value-of select="normalize-space(.)"/>
          </xsl:attribute>
          <xsl:attribute name="class" select="'citationnumber'"/>
          <xsl:attribute name="itemid">
            <xsl:text>nump2_</xsl:text>
            <xsl:value-of
              select="normalize-space(translate($xrefmarginal, ' .,;:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-–)(', ''))"
            />
          </xsl:attribute>
          <xsl:element name="span">
            <xsl:attribute name="class" select="'NumberCitation'"/>
            <xsl:value-of select="normalize-space($xrefmarginal)"/>
          </xsl:element>
        </xsl:element>
      </xsl:when>
      <!-- 29-Apr-17: For KLI NUMP paragraphs and Citations END -->
      <!-- ***********************************\\######################################################################################################### -->
      <xsl:otherwise>
        <!--  My <xsl:apply-templates/>   -->
        <xsl:variable name="charStyle" select="child::w:rPr/w:rStyle[1]/@w:val"/>
        <xsl:choose>
          <xsl:when test="$charStyle = 'FootnoteReference'">
            <!--<xsl:apply-templates/>-->
          </xsl:when>
          <xsl:when test="w:rPr/w:rStyle/@w:val">
            <xsl:variable name="charstyle" select="child::w:rPr/w:rStyle/@w:val"/>
            <xsl:choose>
              <xsl:when
                test="
                  contains($charstyle, 'No character style') or contains($charstyle, 'NO CHARACTER STYLE')
                  or contains($charstyle, 'Nocharacterstyle')">
                <xsl:apply-templates/>
              </xsl:when>
              <xsl:otherwise>
                <!--<xsl:value-of select="replace(child::w:rPr/w:rStyle/@w:val, '^([0-9]+)','')"/>-->
                <xsl:element name="span">
                  <xsl:attribute name="class" select="$charStyle"/>
                  <xsl:attribute name="data-name" select="$charStyleName"/>
                  <xsl:apply-templates/>
                </xsl:element>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:apply-templates/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <xsl:template match="//wp:posOffset"/>

  <!-- Global Vaiable -->
  <xsl:variable name="filename" select="substring-before(tokenize(base-uri(.), '/')[last()], '.')"/>
  <xsl:variable name="styleType" select="//w:style/@w:type"/>
  <xsl:variable name="listmulti">
    <xsl:for-each select="//w:abstractNum/w:lvl[w:pStyle[@w:val = 'ListNumberedMultilevel']]">
      <xsl:choose>
        <xsl:when test="w:lvlText">
          <!--<xsl:value-of select="w:lvlText/@w:val"></xsl:value-of>-->
          <xsl:value-of select="translate(w:lvlText/@w:val, '%0123456789', '')"/>
        </xsl:when>
      </xsl:choose>
    </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="listbull1">
    <xsl:for-each select="//w:abstractNum/w:lvl[w:pStyle[@w:val = 'ListLevel1Bullet']]">
      <xsl:choose>
        <xsl:when test="w:lvlText">
          <xsl:value-of select="translate(w:lvlText/@w:val, '%0123456789', '')"/>
        </xsl:when>
      </xsl:choose>
    </xsl:for-each>

  </xsl:variable>

  <xsl:variable name="NL">
    <xsl:for-each select="//w:abstractNum/w:lvl[w:pStyle[@w:val = 'NL']]">
      <xsl:choose>
        <xsl:when test="w:lvlText">
          <xsl:value-of select="translate(w:lvlText/@w:val, '%0123456789', '')"/>
        </xsl:when>
      </xsl:choose>
    </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="OBNL">
    <xsl:for-each select="//w:abstractNum/w:lvl[w:pStyle[@w:val = 'OBNL']]">
      <xsl:choose>
        <xsl:when test="w:lvlText">
          <xsl:value-of select="translate(w:lvlText/@w:val, '%0123456789', '')"/>
        </xsl:when>
      </xsl:choose>
    </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="HANL">
    <xsl:for-each select="//w:abstractNum/w:lvl[w:pStyle[@w:val = 'HANL']]">
      <xsl:choose>
        <xsl:when test="w:lvlText">
          <xsl:value-of select="translate(w:lvlText/@w:val, '%0123456789', '')"/>
        </xsl:when>
      </xsl:choose>
    </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="QNL">
    <xsl:for-each select="//w:abstractNum/w:lvl[w:pStyle[@w:val = 'QNL']]">
      <xsl:choose>
        <xsl:when test="w:lvlText">
          <xsl:value-of select="translate(w:lvlText/@w:val, '%0123456789', '')"/>
        </xsl:when>
      </xsl:choose>
    </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="QNL1">
    <xsl:for-each select="//w:abstractNum/w:lvl[w:pStyle[@w:val = 'QNL1']]">
      <xsl:choose>
        <xsl:when test="w:lvlText">
          <xsl:value-of select="translate(w:lvlText/@w:val, '%0123456789', '')"/>
        </xsl:when>
      </xsl:choose>
    </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
  <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
  <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
  <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
  <xsl:variable name="two">
    <xsl:if test="//w:numbering/w:num/@w:numId = $one">
      <xsl:value-of select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"/>
    </xsl:if>
  </xsl:variable>
  <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
  <xsl:variable name="three">
    <xsl:choose>
      <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
        <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
        <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
        <xsl:choose>
          <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
            <xsl:value-of
              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
            />
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
            />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
        <xsl:value-of
          select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"/>
      </xsl:when>
    </xsl:choose>
  </xsl:variable>
  <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
  <xsl:variable name="bulltype">
    <xsl:choose>
      <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl">
        <xsl:value-of
          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>
      </xsl:when>
      <xsl:when test="//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink">
        <xsl:value-of
          select="lower-case(//w:abstractNum[@w:abstractNumId = $two]/w:numStyleLink/@w:val)"/>
      </xsl:when>
    </xsl:choose>
  </xsl:variable>
  <xsl:variable name="bulltypeFont"
    select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"/>

  <!-- Track changes -->
  <xsl:template match="w:ins[not(parent::w:rPr)]">
    <xsl:element name="span">
      <xsl:attribute name="class" select="'msoIns'"/>
      <xsl:element name="ins">
        <xsl:attribute name="cite">
          <xsl:text>mailto:</xsl:text>
          <xsl:value-of select="@w:author"/>
        </xsl:attribute>
        <xsl:attribute name="datetime" select="@w:date"/>
        <xsl:apply-templates/>
      </xsl:element>
    </xsl:element>
  </xsl:template>
  <xsl:template match="w:moveTo[not(parent::w:rPr)]">
    <xsl:element name="span">
      <xsl:attribute name="class" select="'msoIns'"/>
      <xsl:element name="ins">
        <xsl:attribute name="cite">
          <xsl:text>mailto:</xsl:text>
          <xsl:value-of select="@w:author"/>
        </xsl:attribute>
        <xsl:attribute name="datetime" select="@w:date"/>
        <xsl:apply-templates/>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <xsl:template match="w:del[not(parent::w:rPr)]">
    <xsl:element name="span">
      <xsl:attribute name="class" select="'msoDel'"/>

      <xsl:element name="del">
        <xsl:attribute name="cite">
          <xsl:text>mailto:</xsl:text>
          <xsl:value-of select="@w:author"/>
        </xsl:attribute>
        <xsl:attribute name="datetime" select="@w:date"/>
        <!--<xsl:value-of select="w:r/w:delText"/>-->
        <xsl:apply-templates/>
      </xsl:element>

    </xsl:element>
  </xsl:template>

  <xsl:template match="w:delText">
    <xsl:apply-templates/>
  </xsl:template>

  <!-- 02-Feb-17 As per Santa's requirement i've included the below -->
  <xsl:template match="w:del[parent::w:rPr]">
    <xsl:element name="span">
      <xsl:attribute name="class" select="'msoDel'"/>
      <xsl:element name="del">
        <xsl:attribute name="cite">
          <xsl:text>mailto:</xsl:text>
          <xsl:value-of select="@w:author"/>
        </xsl:attribute>
        <xsl:attribute name="datetime" select="@w:date"/>
        <xsl:value-of select="w:r/w:delText"/>
      </xsl:element>
    </xsl:element>
  </xsl:template>
  <xsl:template match="w:ins[parent::w:rPr]">
    <xsl:element name="span">
      <xsl:attribute name="class" select="'msoIns'"/>
      <xsl:element name="ins">
        <xsl:attribute name="cite">
          <xsl:text>mailto:</xsl:text>
          <xsl:value-of select="@w:author"/>
        </xsl:attribute>
        <xsl:attribute name="datetime" select="@w:date"/>
        <xsl:apply-templates/>
      </xsl:element>
    </xsl:element>
  </xsl:template>
  <!-- END Santa's requirement i've included the below -->
  <xsl:template match="w:moveFrom[not(parent::w:rPr)]">
    <xsl:element name="span">
      <xsl:attribute name="class" select="'msoDel'"/>

      <xsl:element name="del">
        <xsl:attribute name="cite">
          <xsl:text>mailto:</xsl:text>
          <xsl:value-of select="@w:author"/>
        </xsl:attribute>
        <xsl:attribute name="datetime" select="@w:date"/>
        <xsl:value-of select="w:r"/>
      </xsl:element>

    </xsl:element>
  </xsl:template>



  <xsl:template match="//w:endnoteRef">
    <xsl:element name="sup">
      <xsl:number from="/" level="any" format="1"/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="w:r/w:tab">
    <xsl:text disable-output-escaping="yes">&lt;span style="padding-left:68px;"&gt;&lt;/span&gt;</xsl:text>
  </xsl:template>
  <xsl:template match="//w:tabs"/>


  <!--<xsl:template match="w:r/w:br">
    <xsl:element name="br"/>
  </xsl:template>-->
  <xsl:template match="w:r/w:br">
    <xsl:choose>
      <xsl:when test="@w:type">
        <xsl:element name="br">
          <xsl:attribute name="type" select="@w:type"/>
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:element name="br"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>



  <!-- &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& Footnotes-Endnotes-Comments &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&-->
  <!-- 03-APR-19: Footnote/endnote tagging and its links, standalized to match with ck xhtml output, due to common update STARTS here-->
  <!-- 01-Apr-17: Comment tagging was updated as per Mari's requirements -->
  <!--<xsl:template match="w:commentReference">
    <xsl:variable name="commentN" select="@w:id"/>
    <CommentReference>
      <xsl:text>[</xsl:text>
      <xsl:value-of select="//w:document/w:comments/w:comment[@w:id=$commentN]/@w:initials"/>
      <xsl:value-of select="$commentN + 1"/>
      <xsl:text>]</xsl:text>
      <xsl:for-each select="//w:document/w:comments/w:comment[@w:id=$commentN]">
        <comment>
          <label>[<xsl:value-of select="@w:initials"/><xsl:value-of select="$commentN + 1"/>]</label>
          <xsl:apply-templates/>
        </comment>
      </xsl:for-each>
    </CommentReference>
  </xsl:template>-->
  <xsl:template match="w:commentRangeStart">
    <xsl:variable name="commentN" select="@w:id"/>

    <xsl:text disable-output-escaping="yes">&lt;span data-commentrange="cmtStart" style="cursor:pointer;font-size:14px;vertical-align:super;" data-comment="cmt</xsl:text>
    <xsl:value-of select="$commentN"/>
    <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
    <!--<xsl:text disable-output-escaping="yes">&lt;img style="width:15px;height:15px;cursor:pointer;" data-commentimg="cmt</xsl:text>
    <xsl:value-of select="$commentN"/>
    <xsl:text disable-output-escaping="yes">" src="ckeditor/images/comment.svg"/&gt;</xsl:text>-->
    <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
  </xsl:template>
  <xsl:template match="w:commentRangeEnd">
    <xsl:variable name="commentN" select="@w:id"/>
    <xsl:text disable-output-escaping="yes">&lt;span data-commentrange="cmtEnd" data-comment="cmt</xsl:text>
    <xsl:value-of select="$commentN"/>
    <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
    <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
    <!--Removed ckeditor/images/comment.svg for suguna (image count problem)30-7-2019-->
    <!--<xsl:text disable-output-escaping="yes">&lt;img style="width:15px;height:15px;cursor:pointer;" data-commentimg="cmt</xsl:text>
    <xsl:value-of select="$commentN"/>
    <xsl:text disable-output-escaping="yes">" src="ckeditor/images/comment.svg"/&gt;</xsl:text>-->
  </xsl:template>

  <xsl:template match="w:commentReference">
    <xsl:variable name="commentN" select="@w:id"/>
    <!-- <span style='cursor:pointer;font-size:14px;vertical-align:super;' data-comment='VALUE'>&#128172;</span> Refer Mail from Mariselvan Sat 8/5/2017 5:48 PM and Wed 8/9/2017 12:15 PM-->
    <xsl:if test="not(//w:commentRangeStart[@w:id = $commentN])">
      <xsl:element name="span">
        <xsl:attribute name="src" select="''"/>
        <xsl:attribute name="style" select="'cursor:pointer;font-size:14px;vertical-align:super;'"/>
        <xsl:attribute name="data-comment">
          <xsl:text>cmt</xsl:text>
          <xsl:value-of select="$commentN"/>
        </xsl:attribute>
        <!--Removed ckeditor/images/comment.svg for suguna (image count problem)30-7-2019-->
        <!--<xsl:element name="img">
          <xsl:attribute name="style" select="'width:15px;height:15px;cursor:pointer;'"/>
          <xsl:attribute name="data-commentimg">
            <xsl:text>cmt</xsl:text>
            <xsl:value-of select="$commentN"/>          
          </xsl:attribute>  
          <xsl:attribute name="src" select="'ckeditor/images/comment.svg'"/>        
        </xsl:element>-->
      </xsl:element>
    </xsl:if>

    <!--<xsl:element name="img">
        <!-\-<xsl:attribute name="src" select="'ckeditor/images/comment.svg'"/>-\->
        <xsl:attribute name="src" select="''"/>
        <xsl:attribute name="style" select="'width:15px;height:15px;cursor:pointer;'"/>
        <xsl:attribute name="data-comment">
          <xsl:text>cmt</xsl:text>
          <xsl:value-of select="$commentN"/>          
        </xsl:attribute>  
        
      </xsl:element>-->
  </xsl:template>



  <xsl:template match="w:comments">

    <xsl:element name="div">
      <xsl:attribute name="id" select="'comment_'"/>
      <xsl:attribute name="style" select="'display:none'"/>

      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="w:comment">
    <xsl:variable name="commentN" select="@w:id"/>
    <xsl:variable name="commentValue">
      <xsl:apply-templates/>
    </xsl:variable>
    <xsl:variable name="paragraphStyle" select="w:p[1]/w:pPr/w:pStyle/@w:val"/>
    <xsl:variable name="paragraphStyleName">
      <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
    </xsl:variable>


    <xsl:element name="CommentReference">
      <xsl:attribute name="data-commentvalue">
        <xsl:text>cmt</xsl:text>
        <xsl:value-of select="$commentN"/>
      </xsl:attribute>
      <!-- Added for Mahi in html to idml 10-aug-17 -->
      <xsl:attribute name="cDate" select="@w:date"/>
      <xsl:attribute name="author" select="@w:author"/>
      <xsl:attribute name="initial" select="@w:initials"/>
      <!--<xsl:for-each select="//w:document/w:comments/w:comment[@w:id=$commentN]">-->

      <xsl:element name="Comment">
        <xsl:attribute name="data-commentid">
          <xsl:value-of select="generate-id()"/>
        </xsl:attribute>
        <xsl:attribute name="data-user"
          select="translate(substring-before($commentValue, ':'), '&quot;&amp;#x0027;', '')"/>
        <xsl:for-each select="//w:document/w:comments/w:comment[@w:id = $commentN]/w:p">

          <xsl:choose>
            <xsl:when test="child::w:pPr/w:numPr">
              <xsl:variable name="one" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
              <xsl:variable name="indent" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
              <xsl:variable name="indent2" select="child::w:pPr/w:ind/@w:val"/>
              <xsl:variable name="ilvl" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
              <xsl:variable name="ilvlCount">
                <xsl:variable name="a" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                <xsl:choose>
                  <xsl:when test="$a = 0">
                    <xsl:value-of select="'1'"/>
                  </xsl:when>
                  <xsl:when test="$a = 1">
                    <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '0'])"/>
                  </xsl:when>
                  <xsl:when test="$a = 2">
                    <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '1'])"/>
                  </xsl:when>
                  <xsl:when test="$a = 3">
                    <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '2'])"/>
                  </xsl:when>
                  <xsl:when test="$a = 4">
                    <xsl:value-of select="count(ancestor::w:pPr/w:numPr/w:ilvl[@w:val = '3'])"/>
                  </xsl:when>
                </xsl:choose>
              </xsl:variable>
              <xsl:variable name="two">
                <xsl:if test="//w:numbering/w:num/@w:numId = $one">
                  <xsl:value-of select="//w:numbering/w:num[@w:numId = $one]/w:abstractNumId/@w:val"
                  />
                </xsl:if>
              </xsl:variable>
              <xsl:variable name="numhead"
                select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>

              <!-- 26-July-17: Added for para frame POP -->

              <xsl:if
                test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' or w:bottom/@w:val = 'none' or w:left/@w:val = 'none' or w:right/@w:val = 'none')]">
                <!-- w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]) -->
                <xsl:if test="w:pPr/w:pBdr[w:top]">

                  <xsl:text disable-output-escaping="yes">&lt;div style="border-top: 1px solid black; padding:</xsl:text>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
                  <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>

                </xsl:if>
              </xsl:if>
              <xsl:if test="w:pPr/w:pBdr[not(w:left/@w:val = 'none' or w:right/@w:val = 'none')]">
                <xsl:choose>
                  <xsl:when test="w:pPr/w:pBdr[w:left and w:right]">
                    <xsl:text disable-output-escaping="yes">&lt;div style="border-left: 1px solid black; padding:5pt 5pt 5pt 5pt;border-right: 1px solid black; padding:5pt 5pt 5pt 5pt;"&gt;</xsl:text>
                  </xsl:when>
                  <xsl:when test="w:pPr/w:pBdr[w:left]">
                    <xsl:text disable-output-escaping="yes">&lt;div style="border-left: 1px solid black; padding:5pt 5pt 5pt 5pt;"&gt;</xsl:text>
                  </xsl:when>
                  <xsl:when test="w:pPr/w:pBdr[w:right]">
                    <xsl:text disable-output-escaping="yes">&lt;div style="border-right: 1px solid black; padding:5pt 5pt 5pt 5pt;"&gt;</xsl:text>
                  </xsl:when>
                </xsl:choose>
              </xsl:if>
              <!-- 26-July-17: Added for para frame END POP-->
              <xsl:choose>
                <xsl:when test="//w:abstractNum/@w:abstractNumId = $two">
                  <!--<xsl:variable name="three" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                  <!-- 28-Dec-18: If no ilvl in document.xml, i take the first w:lvl in numbering.xml -->

                  <xsl:variable name="three">
                    <xsl:choose>
                      <xsl:when test="$ilvl != ''">
                        <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                        <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                        <xsl:choose>
                          <xsl:when
                            test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"
                            />
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                            />
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of
                          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:numFmt/@w:val"
                        />
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <!--<xsl:variable name="bulltype" select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"/>-->
                  <xsl:variable name="bulltype">
                    <xsl:choose>
                      <xsl:when test="$ilvl != ''">
                        <!--<xsl:value-of select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:numFmt/@w:val"/>-->
                        <!-- 31-Dec-18: If no ilvl num matches in numbering.xml, then i take the first w:lvl in numbering.xml -->
                        <xsl:choose>
                          <xsl:when
                            test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:lvlText/@w:val"
                            />
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:lvlText/@w:val"
                            />
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of
                          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:lvlText/@w:val"
                        />
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="bulltypeFont">
                    <xsl:choose>
                      <xsl:when
                        test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:ascii">
                        <xsl:value-of
                          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:ascii"
                        />
                      </xsl:when>
                      <xsl:when
                        test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs">
                        <xsl:value-of
                          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:cs"
                        />
                      </xsl:when>
                      <xsl:when
                        test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:hAnsi">
                        <xsl:value-of
                          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:hAnsi"
                        />
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:value-of
                          select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:rPr/w:rFonts/@w:eastAsia"
                        />
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:variable>
                  <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
                  <xsl:variable name="paragraphStyleName">
                    <xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>
                  </xsl:variable>

                  <xsl:choose>
                    <xsl:when test="$three = 'upperRoman'">
                      <xsl:element name="ol">
                        <xsl:attribute name="type">
                          <xsl:value-of select="'I'"/>
                        </xsl:attribute>

                        <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                              <xsl:text>opencloseParen-I</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, '(')">
                              <xsl:text>openParen-I</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, ')')">
                              <xsl:text>closeParen-I</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, '[')">
                              <xsl:text>openSParen-I</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, ']')">
                              <xsl:text>closeSParen-I</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'Normal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:variable name="restart">
                          <xsl:if
                            test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                            />
                          </xsl:if>
                        </xsl:variable>
                        <xsl:attribute name="start">
                          <xsl:variable name="start">
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:variable>

                          <xsl:choose>
                            <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                            <xsl:when test="$start = ''">
                              <xsl:value-of select="$restart"/>
                            </xsl:when>
                            <!-- 29-Nov-18: If no value in $start ENDS-->
                            <xsl:when test="$start = 1">
                              <xsl:value-of select="$restart"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="$start"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:element name="li">
                          <xsl:attribute name="class" select="$paragraphStyle"/>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                          <xsl:if test="child::w:pPr/w:ind">
                            <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                            <xsl:choose>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                              </xsl:when>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                <xsl:attribute name="style">
                                  <xsl:if test="child::w:pPr/w:ind/@w:left">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:right">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:left">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-left:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:right">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                <xsl:attribute name="style">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                <xsl:attribute name="style">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:attribute>
                              </xsl:when>
                            </xsl:choose>
                          </xsl:if>

                          <!-- 26-JUNE-18: Added rpr info. inside ppr ENDS -->
                          <!-- 15-JUNE-18: to get the bookmark start -->
                          <!--<xsl:if test="child::w:bookmarkStart">
                                <xsl:for-each select="child::w:bookmarkStart">
                                  <xsl:variable name="bmId" select="@w:id"/>
                                  <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                  <!-\-<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-\->
                                  <xsl:value-of select="@w:name"/>
                                  <xsl:text disable-output-escaping="yes">"</xsl:text>
                                  <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>   
                                  <xsl:if test="$bmId = //w:bookmarkEnd/@w:id">
                                  </xsl:if>
                                </xsl:for-each>
                              </xsl:if>-->
                          <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                          <xsl:if test="contains($bulltype, '.%')">
                            <xsl:element name="span">
                              <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                              <xsl:call-template name="AutoNumbering">
                                <xsl:with-param name="numId"
                                  select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                <xsl:with-param name="numLevel"
                                  select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:call-template>
                              <xsl:variable name="numID">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                              </xsl:variable>
                              <xsl:variable name="ilvl">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:variable>
                              <xsl:number
                                count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                level="any"/>
                            </xsl:element>
                          </xsl:if>
                          <xsl:apply-templates/>
                          <!-- 15-JUNE-18: to get the bookmark end -->
                          <!--<xsl:if test="child::w:bookmarkEnd">
                                <xsl:for-each select="child::w:bookmarkEnd">
                                  <xsl:variable name="bmId" select="@w:id"/>                                      
                                  <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                  <xsl:value-of select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                                  <xsl:text disable-output-escaping="yes">"</xsl:text>
                                  <xsl:if test="contains(@w:name, 'BM')">
                                    <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                                  </xsl:if>    
                                  <!-\- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-\->
                                  <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>        
                                </xsl:for-each>
                              </xsl:if>-->
                          <!-- to get the bookmark end ENDS-->
                        </xsl:element>
                      </xsl:element>
                      <!--</xsl:element>-->
                    </xsl:when>
                    <xsl:when test="$three = 'lowerRoman'">
                      <xsl:element name="ol">
                        <xsl:attribute name="type">
                          <xsl:value-of select="'i'"/>
                        </xsl:attribute>

                        <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                              <xsl:text>opencloseParen-i</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, '(')">
                              <xsl:text>openParen-i</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, ')')">
                              <xsl:text>closeParen-i</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, '[')">
                              <xsl:text>openSParen-i</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, ']')">
                              <xsl:text>closeSParen-i</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'Normal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:variable name="restart">
                          <xsl:if
                            test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                            />
                          </xsl:if>
                        </xsl:variable>
                        <xsl:attribute name="start">
                          <xsl:variable name="start">
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:variable>

                          <xsl:choose>
                            <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                            <xsl:when test="$start = ''">
                              <xsl:value-of select="$restart"/>
                            </xsl:when>
                            <!-- 29-Nov-18: If no value in $start ENDS-->
                            <xsl:when test="$start = 1">
                              <xsl:value-of select="$restart"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="$start"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:element name="li">
                          <xsl:attribute name="class" select="$paragraphStyle"/>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->
                          <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                          <xsl:if test="child::w:pPr/w:ind">
                            <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                            <xsl:choose>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                              </xsl:when>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                <xsl:attribute name="style">
                                  <xsl:if test="child::w:pPr/w:ind/@w:left">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:right">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:left">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-left:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:right">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                <xsl:attribute name="style">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                <xsl:attribute name="style">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:attribute>
                              </xsl:when>
                            </xsl:choose>
                          </xsl:if>


                          <!-- 26-JUNE-18: Added rpr info. inside ppr ENDS -->
                          <!-- 15-JUNE-18: to get the bookmark start -->
                          <xsl:if test="child::w:bookmarkXXXStart">
                            <xsl:for-each select="child::w:bookmarkStart">
                              <xsl:variable name="bmId" select="@w:id"/>
                              <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                              <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                              <xsl:value-of select="@w:name"/>
                              <xsl:text disable-output-escaping="yes">"</xsl:text>
                              <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                              <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                            </xsl:for-each>
                          </xsl:if>
                          <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                          <xsl:if test="contains($bulltype, '.%')">
                            <xsl:element name="span">
                              <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                              <xsl:call-template name="AutoNumbering">
                                <xsl:with-param name="numId"
                                  select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                <xsl:with-param name="numLevel"
                                  select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:call-template>
                              <xsl:variable name="numID">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                              </xsl:variable>
                              <xsl:variable name="ilvl">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:variable>
                              <xsl:number
                                count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                level="any"/>
                            </xsl:element>
                          </xsl:if>
                          <xsl:apply-templates/>
                          <!-- 15-JUNE-18: to get the bookmark end -->
                          <xsl:if test="child::w:bookmarkXXXEnd">
                            <xsl:for-each select="child::w:bookmarkEnd">
                              <xsl:variable name="bmId" select="@w:id"/>
                              <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                              <xsl:value-of
                                select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                              <xsl:text disable-output-escaping="yes">"</xsl:text>
                              <xsl:if test="contains(@w:name, 'BM')">
                                <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                              </xsl:if>
                              <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                              <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            </xsl:for-each>
                          </xsl:if>
                          <!-- to get the bookmark end ENDS-->
                        </xsl:element>
                      </xsl:element>
                      <!--</xsl:element>-->
                    </xsl:when>
                    <xsl:when test="$three = 'lowerLetter'">
                      <xsl:element name="ol">
                        <xsl:attribute name="type">
                          <xsl:value-of select="'a'"/>
                        </xsl:attribute>

                        <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                              <xsl:text>opencloseParen-a</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, '(')">
                              <xsl:text>openParen-a</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, ')')">
                              <xsl:text>closeParen-a</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, '[')">
                              <xsl:text>openSParen-a</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, ']')">
                              <xsl:text>closeSParen-a</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'Normal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:variable name="restart">
                          <xsl:if
                            test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                            />
                          </xsl:if>
                        </xsl:variable>
                        <xsl:attribute name="start">
                          <xsl:variable name="start">
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:variable>

                          <xsl:choose>
                            <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                            <xsl:when test="$start = ''">
                              <xsl:value-of select="$restart"/>
                            </xsl:when>
                            <!-- 29-Nov-18: If no value in $start ENDS-->
                            <xsl:when test="$start = 1">
                              <xsl:value-of select="$restart"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="$start"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:element name="li">
                          <xsl:attribute name="class" select="$paragraphStyle"/>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->


                          <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                          <xsl:if test="child::w:pPr/w:ind">
                            <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                            <xsl:choose>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                              </xsl:when>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                <xsl:attribute name="style">
                                  <xsl:if test="child::w:pPr/w:ind/@w:left">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:right">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:left">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-left:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:right">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                <xsl:attribute name="style">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                <xsl:attribute name="style">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:attribute>
                              </xsl:when>
                            </xsl:choose>
                          </xsl:if>
                          <!-- 26-JUNE-18: Added rpr info. inside ppr ENDS -->
                          <!-- 15-JUNE-18: to get the bookmark start -->
                          <xsl:if test="child::w:bookmarkXXXStart">
                            <xsl:for-each select="child::w:bookmarkStart">
                              <xsl:variable name="bmId" select="@w:id"/>
                              <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                              <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                              <xsl:value-of select="@w:name"/>
                              <xsl:text disable-output-escaping="yes">"</xsl:text>
                              <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                              <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                            </xsl:for-each>
                          </xsl:if>
                          <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                          <xsl:if test="contains($bulltype, '.%')">
                            <xsl:element name="span">
                              <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                              <xsl:call-template name="AutoNumbering">
                                <xsl:with-param name="numId"
                                  select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                <xsl:with-param name="numLevel"
                                  select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:call-template>
                              <xsl:variable name="numID">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                              </xsl:variable>
                              <xsl:variable name="ilvl">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:variable>
                              <xsl:number
                                count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                level="any"/>
                            </xsl:element>
                          </xsl:if>
                          <xsl:apply-templates/>

                          <!-- 15-JUNE-18: to get the bookmark end -->
                          <xsl:if test="child::w:bookmarkXXXEnd">
                            <xsl:for-each select="child::w:bookmarkEnd">
                              <xsl:variable name="bmId" select="@w:id"/>
                              <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                              <xsl:value-of
                                select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                              <xsl:text disable-output-escaping="yes">"</xsl:text>
                              <xsl:if test="contains(@w:name, 'BM')">
                                <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                              </xsl:if>
                              <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                              <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            </xsl:for-each>
                          </xsl:if>
                          <!-- to get the bookmark end ENDS-->
                        </xsl:element>
                      </xsl:element>
                      <!--</xsl:element>-->
                    </xsl:when>
                    <xsl:when test="$three = 'upperLetter'">
                      <xsl:element name="ol">
                        <xsl:attribute name="type">
                          <xsl:value-of select="'A'"/>
                        </xsl:attribute>

                        <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="contains($bulltype, '(') and contains($bulltype, ')')">
                              <xsl:text>opencloseParen-A</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, '(')">
                              <xsl:text>openParen-A</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, ')')">
                              <xsl:text>closeParen-A</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, '[')">
                              <xsl:text>openSParen-A</xsl:text>
                            </xsl:when>
                            <xsl:when test="contains($bulltype, ']')">
                              <xsl:text>closeSParen-A</xsl:text>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'Normal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:variable name="restart">
                          <xsl:if
                            test="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start">
                            <xsl:value-of
                              select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                            />
                          </xsl:if>
                        </xsl:variable>
                        <xsl:attribute name="start">
                          <xsl:variable name="start">
                            <xsl:number
                              count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                              level="any"/>
                          </xsl:variable>

                          <xsl:choose>
                            <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                            <xsl:when test="$start = ''">
                              <xsl:value-of select="$restart"/>
                            </xsl:when>
                            <!-- 29-Nov-18: If no value in $start ENDS-->
                            <xsl:when test="$start = 1">
                              <xsl:value-of select="$restart"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="$start"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:element name="li">
                          <xsl:attribute name="class" select="$paragraphStyle"/>
                          <xsl:attribute name="data-name">
                            <xsl:choose>
                              <xsl:when test="string-length($paragraphStyleName) > 0">
                                <xsl:value-of select="$paragraphStyleName"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="'MsoNormal'"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:attribute>
                          <!-- 7-May-19 -->

                          <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                          <xsl:if test="child::w:pPr/w:ind">
                            <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                            <xsl:choose>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                              </xsl:when>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                <xsl:attribute name="style">
                                  <xsl:if test="child::w:pPr/w:ind/@w:left">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:right">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:left">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-left:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:right">
                                <xsl:attribute name="style">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                  <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:if>
                                  <xsl:if test="child::w:pPr/w:jc">
                                    <xsl:text>text-align:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                    <xsl:text>;</xsl:text>
                                  </xsl:if>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                <xsl:attribute name="style">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:attribute>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                <xsl:attribute name="style">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:attribute>
                              </xsl:when>
                            </xsl:choose>
                          </xsl:if>

                          <!-- 26-JUNE-18: Added rpr info. inside ppr ENDS -->
                          <!-- 15-JUNE-18: to get the bookmark start -->
                          <xsl:if test="child::w:bookmarkXXXStart">
                            <xsl:for-each select="child::w:bookmarkStart">
                              <xsl:variable name="bmId" select="@w:id"/>
                              <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                              <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                              <xsl:value-of select="@w:name"/>
                              <xsl:text disable-output-escaping="yes">"</xsl:text>
                              <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                              <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                            </xsl:for-each>
                          </xsl:if>
                          <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                          <xsl:if test="contains($bulltype, '.%')">
                            <xsl:element name="span">
                              <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                              <xsl:call-template name="AutoNumbering">
                                <xsl:with-param name="numId"
                                  select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                <xsl:with-param name="numLevel"
                                  select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:call-template>
                              <xsl:variable name="numID">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                              </xsl:variable>
                              <xsl:variable name="ilvl">
                                <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                              </xsl:variable>
                              <xsl:number
                                count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                level="any"/>
                            </xsl:element>
                          </xsl:if>
                          <xsl:apply-templates/>
                          <!-- 15-JUNE-18: to get the bookmark end -->
                          <xsl:if test="child::w:bookmarkXXXEnd">
                            <xsl:for-each select="child::w:bookmarkEnd">
                              <xsl:variable name="bmId" select="@w:id"/>
                              <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                              <xsl:value-of
                                select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                              <xsl:text disable-output-escaping="yes">"</xsl:text>
                              <xsl:if test="contains(@w:name, 'BM')">
                                <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                              </xsl:if>
                              <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                              <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                            </xsl:for-each>
                          </xsl:if>
                          <!-- to get the bookmark end ENDS-->
                        </xsl:element>
                      </xsl:element>
                    </xsl:when>
                    <xsl:when test="$three = 'decimal'">
                      <xsl:choose>
                        <xsl:when test="contains($bulltype, '.%')">
                          <xsl:element name="p">
                            <xsl:if test="w:pPr/w:jc | w:pPr/w:ind">

                              <xsl:if test="child::w:pPr/w:ind">
                                <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                                <xsl:choose>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                    <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                  </xsl:when>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                    <xsl:attribute name="style">
                                      <xsl:if test="child::w:pPr/w:ind/@w:left">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:right">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:left">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:right">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                </xsl:choose>
                              </xsl:if>

                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:attribute name="type">
                                  <xsl:value-of select="$indent"/>
                                </xsl:attribute>
                              </xsl:if>
                            </xsl:if>

                            <xsl:attribute name="class" select="$paragraphStyle"/>
                            <xsl:attribute name="data-name">
                              <xsl:choose>
                                <xsl:when test="string-length($paragraphStyleName) > 0">
                                  <xsl:value-of select="$paragraphStyleName"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'MsoNormal'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>
                            <!-- 7-May-19 -->

                            <xsl:if test="contains($bulltype, '.%')">

                              <!--<span><xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>
                                      .<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>
                                    </span>-->

                              <xsl:element name="spanDigit">
                                <!-- This is actually coded as spanDigit -->
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="prevCounts">
                                  <xsl:value-of>
                                    <xsl:number
                                      count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                      level="any"/>
                                  </xsl:value-of>
                                </xsl:variable>
                                <xsl:value-of select="$indent + 1"/>
                                <!--<xsl:call-template name="AutoNumbering">
                                        <xsl:with-param name="numId" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                        <xsl:with-param name="numLevel" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                        <xsl:with-param name="numhead1" select="//w:abstractNum/w:lvl[@w:ilvl = $ilvl]/w:pStyle/@w:val"/>
                                        <xsl:with-param name="count" select="$ilvlCount"/>
                                      </xsl:call-template>-->
                                <xsl:variable name="numID">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                </xsl:variable>
                                <xsl:variable name="ilvl">
                                  <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                </xsl:variable>
                                <xsl:text>.</xsl:text>
                                <xsl:variable name="secondDigit">
                                  <!--<xsl:number count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val =$ilvl]" level="any" />-->
                                  <!-- 4-FEB-19: Commented due to CJCHE_2017_1087_Original_V0 - Manuscript CJCE.docx -->
                                  <xsl:number
                                    count="w:p[w:pPr/w:pStyle[@w:val = $paragraphStyle] and w:pPr/w:numPr/w:numId[@w:val = $one]]"
                                    from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]"
                                    level="any"/>
                                </xsl:variable>

                                <xsl:value-of select="number($secondDigit)"/>
                                <!--<xsl:number count="w:p[w:pPr/w:numPr/w:numId/@w:val =$numID and w:pPr/w:numPr/w:ilvl/@w:val =$ilvl]" level="any" />-->
                                <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paragraphStyle]]" from="w:p[w:pPr/w:pStyle/w:pPr/w:numPr/w:ilvl[@w:val = '0']]" level="any"/>-->
                              </xsl:element>
                              <span style="padding-left:5px;"/>
                            </xsl:if>
                            <xsl:apply-templates/>

                          </xsl:element>

                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:element name="ol">
                            <!-- 15-JUNE-18: Added OL number type (1. or 1) or (1) etc -->
                            <xsl:attribute name="class">
                              <xsl:choose>
                                <xsl:when
                                  test="contains($bulltype, '(') and contains($bulltype, ')')">
                                  <xsl:text>opencloseParen</xsl:text>
                                </xsl:when>
                                <xsl:when
                                  test="contains($bulltype, '[') and contains($bulltype, ']')">
                                  <xsl:text>opencloseSParen</xsl:text>
                                </xsl:when>
                                <xsl:when test="contains($bulltype, '(')">
                                  <xsl:text>openParen</xsl:text>
                                </xsl:when>
                                <xsl:when test="contains($bulltype, ')')">
                                  <xsl:text>closeParen</xsl:text>
                                </xsl:when>
                                <xsl:when test="contains($bulltype, '[')">
                                  <xsl:text>openSParen</xsl:text>
                                </xsl:when>
                                <xsl:when test="contains($bulltype, ']')">
                                  <xsl:text>closeSParen</xsl:text>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:choose>
                                    <xsl:when test="string-length($paragraphStyleName) > 0">
                                      <xsl:value-of select="$paragraphStyleName"/>
                                    </xsl:when>
                                    <xsl:otherwise>
                                      <xsl:value-of select="'Normal'"/>
                                    </xsl:otherwise>
                                  </xsl:choose>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>


                            <xsl:attribute name="type">
                              <xsl:value-of select="'1'"/>
                            </xsl:attribute>
                            <xsl:if test="child::w:pPr/w:ind">
                              <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                              <xsl:choose>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                  <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                </xsl:when>
                                <xsl:when
                                  test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                  <xsl:attribute name="style">
                                    <xsl:if test="child::w:pPr/w:ind/@w:left">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:right">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:left">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:right">
                                  <xsl:attribute name="style">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                                <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:attribute name="style">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:attribute>
                                </xsl:when>
                              </xsl:choose>
                            </xsl:if>
                            <!-- calculating the ansester count of ilvl-/-to give start attribute if any ancester found -->
                            <!--<xsl:if test="$one = preceding::w:p/w:pPr/w:numPr/w:numId/@w:val">-->
                            <xsl:variable name="restart">
                              <xsl:choose>
                                <xsl:when test="$ilvl != ''">
                                  <xsl:value-of
                                    select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[@w:ilvl = $ilvl]/w:start/@w:val"
                                  />
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of
                                    select="//w:abstractNum[@w:abstractNumId = $two]/w:lvl[1]/w:start/@w:val"
                                  />
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:variable>
                            <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                            <xsl:attribute name="start">
                              <xsl:variable name="start">
                                <xsl:number
                                  count="w:p[w:pPr/w:numPr/w:numId/@w:val = $one and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                  level="any"/>
                              </xsl:variable>

                              <xsl:choose>
                                <!-- 29-Nov-18: If no value in $start, caught in AJAY feedback "Ajay-7531431v1-no-conversion.docx"-->
                                <xsl:when test="$start = ''">
                                  <xsl:value-of select="$restart"/>
                                </xsl:when>
                                <!-- 29-Nov-18: If no value in $start ENDS-->
                                <xsl:when test="$start = 1">
                                  <xsl:value-of select="$restart"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="$start"/>
                                </xsl:otherwise>
                              </xsl:choose>
                            </xsl:attribute>

                            <xsl:element name="li">
                              <xsl:attribute name="class" select="$paragraphStyleName"/>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->


                              <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                              <xsl:if test="child::w:pPr/w:ind">
                                <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                                <xsl:choose>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                    <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                  </xsl:when>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                    <xsl:attribute name="style">
                                      <xsl:if test="child::w:pPr/w:ind/@w:left">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:right">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:left">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:right">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                </xsl:choose>
                              </xsl:if>

                              <xsl:if test="contains($bulltype, '.%')">
                                <xsl:element name="span">
                                  <!--                            <xsl:value-of select="substring-before($bulltype, '%')"/>-->
                                  <xsl:call-template name="AutoNumbering">
                                    <xsl:with-param name="numId"
                                      select="child::w:pPr/w:numPr/w:numId/@w:val"/>
                                    <xsl:with-param name="numLevel"
                                      select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:call-template>
                                  <xsl:variable name="numID">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:numId/@w:val"/>
                                  </xsl:variable>
                                  <xsl:variable name="ilvl">
                                    <xsl:value-of select="self::w:p/w:pPr/w:numPr/w:ilvl/@w:val"/>
                                  </xsl:variable>
                                  <xsl:number
                                    count="w:p[w:pPr/w:numPr/w:numId/@w:val = $numID and w:pPr/w:numPr/w:ilvl/@w:val = $ilvl]"
                                    level="any"/>
                                </xsl:element>
                              </xsl:if>
                              <xsl:apply-templates/>
                              <!-- to get the bookmark end -->
                              <xsl:if test="child::w:bookmarkXXXEnd">
                                <xsl:for-each select="child::w:bookmarkEnd">
                                  <xsl:variable name="bmId" select="@w:id"/>
                                  <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                  <xsl:value-of
                                    select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                                  <xsl:text disable-output-escaping="yes">"</xsl:text>
                                  <xsl:if test="contains(@w:name, 'BM')">
                                    <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                                  </xsl:if>
                                  <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                                  <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                                </xsl:for-each>
                              </xsl:if>
                            </xsl:element>
                          </xsl:element>

                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:when test="$three = 'bullet'">

                      <xsl:element name="ul">
                        <xsl:attribute name="style">
                          <xsl:choose>
                            <xsl:when test="$bulltype = '•'">
                              <xsl:value-of select="'list-style-type: disc'"/>
                            </xsl:when>
                            <xsl:when test="$bulltype = 'o'">
                              <xsl:value-of select="'list-style-type: circle'"/>
                            </xsl:when>
                            <xsl:when test="$bulltype = ''">
                              <xsl:value-of select="'list-style-type: square'"/>
                            </xsl:when>
                            <!--<xsl:when test="$bulltype = ''">
                                  <xsl:value-of select="$bulltype"/>  
                                </xsl:when>-->
                            <xsl:otherwise>
                              <xsl:choose>
                                <xsl:when test="$bulltype != ''">
                                  <xsl:value-of select="$bulltype"/>
                                </xsl:when>
                                <xsl:otherwise>
                                  <xsl:value-of select="'list-style-type: none'"/>
                                </xsl:otherwise>
                              </xsl:choose>
                              <!--<xsl:value-of select="'list-style-type: none'"/>  -->
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="class">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyle) > 0">
                              <xsl:value-of select="$paragraphStyle"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'Normal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->

                        <xsl:choose>
                          <xsl:when test="$bulltype = '•'">
                            <xsl:element name="li">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'Normal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->


                              <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                              <xsl:if test="child::w:pPr/w:ind">
                                <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                                <xsl:choose>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                    <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                  </xsl:when>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                    <xsl:attribute name="style">
                                      <xsl:if test="child::w:pPr/w:ind/@w:left">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:right">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:left">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:right">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                </xsl:choose>
                              </xsl:if>

                              <!-- 26-JUNE-18: Added rpr info. inside ppr ENDS -->
                              <!-- 15-JUNE-18: to get the bookmark start -->
                              <xsl:if test="child::w:bookmarkXXXStart">
                                <xsl:for-each select="child::w:bookmarkStart">
                                  <xsl:variable name="bmId" select="@w:id"/>
                                  <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                  <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                                  <xsl:value-of select="@w:name"/>
                                  <xsl:text disable-output-escaping="yes">"</xsl:text>
                                  <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                                  <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                                </xsl:for-each>
                              </xsl:if>
                              <!-- 15-JUNE-18: to get the bookmark start ENDS -->
                              <xsl:apply-templates/>

                              <!-- 15-JUNE-18: to get the bookmark end -->
                              <xsl:if test="child::w:bookmarkXXXEnd">
                                <xsl:for-each select="child::w:bookmarkEnd">
                                  <xsl:variable name="bmId" select="@w:id"/>
                                  <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                                  <xsl:value-of
                                    select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                                  <xsl:text disable-output-escaping="yes">"</xsl:text>
                                  <xsl:if test="contains(@w:name, 'BM')">
                                    <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                                  </xsl:if>
                                  <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                                  <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                                </xsl:for-each>
                              </xsl:if>
                              <!-- to get the bookmark end ENDS-->
                            </xsl:element>
                          </xsl:when>
                          <xsl:when test="$bulltype = 'o'">
                            <xsl:element name="li">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'Normal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->


                              <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                              <xsl:if test="child::w:pPr/w:ind">
                                <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                                <xsl:choose>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                    <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                  </xsl:when>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                    <xsl:attribute name="style">
                                      <xsl:if test="child::w:pPr/w:ind/@w:left">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:right">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:left">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:right">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                </xsl:choose>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:when test="$bulltype = ''">
                            <xsl:element name="li">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'Normal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->


                              <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                              <xsl:if test="child::w:pPr/w:ind">
                                <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                                <xsl:choose>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                    <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                  </xsl:when>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                    <xsl:attribute name="style">
                                      <xsl:if test="child::w:pPr/w:ind/@w:left">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:right">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:left">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:right">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                </xsl:choose>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:element name="li">
                              <xsl:attribute name="class">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyle) > 0">
                                    <xsl:value-of select="$paragraphStyle"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'Normal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <xsl:attribute name="data-name">
                                <xsl:choose>
                                  <xsl:when test="string-length($paragraphStyleName) > 0">
                                    <xsl:value-of select="$paragraphStyleName"/>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:value-of select="'MsoNormal'"/>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:attribute>
                              <!-- 7-May-19 -->



                              <!-- 26-JUNE-18: Added rpr info. inside ppr -->
                              <xsl:if test="child::w:pPr/w:ind">
                                <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                                <xsl:choose>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                    <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                  </xsl:when>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">
                                    <xsl:attribute name="style">
                                      <xsl:if test="child::w:pPr/w:ind/@w:left">
                                        <xsl:text>margin-left:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:right">
                                        <xsl:text>margin-right:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:left">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:right">
                                    <xsl:attribute name="style">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                      <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                        <xsl:text>text-indent:</xsl:text>
                                        <xsl:value-of
                                          select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                        <xsl:text>pt;</xsl:text>
                                      </xsl:if>
                                      <xsl:if test="child::w:pPr/w:jc">
                                        <xsl:text>text-align:</xsl:text>
                                        <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                        <xsl:text>;</xsl:text>
                                      </xsl:if>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:attribute name="style">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:attribute>
                                  </xsl:when>
                                </xsl:choose>
                              </xsl:if>
                              <xsl:apply-templates/>
                            </xsl:element>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:element>

                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:element name="p">
                        <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                        <xsl:attribute name="class" select="$paragraphStyle"/>
                        <xsl:attribute name="data-name">
                          <xsl:choose>
                            <xsl:when test="string-length($paragraphStyleName) > 0">
                              <xsl:value-of select="$paragraphStyleName"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:value-of select="'MsoNormal'"/>
                            </xsl:otherwise>
                          </xsl:choose>
                        </xsl:attribute>
                        <!-- 7-May-19 -->
                        <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                        <xsl:choose>
                          <xsl:when
                            test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                            <xsl:attribute name="style">
                              <xsl:text>mso-style-name:</xsl:text>
                              <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                              <xsl:text> !msorm;</xsl:text>

                              <xsl:if test="child::w:pPr/w:shd">
                                <xsl:text> background:#</xsl:text>
                                <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                                <xsl:text>;</xsl:text>
                              </xsl:if>
                              <!--****** new -->
                              <xsl:if test="child::w:pPr/w:ind">
                                <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                                <xsl:choose>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                    <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                                  </xsl:when>
                                  <xsl:when
                                    test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">

                                    <xsl:if test="child::w:pPr/w:ind/@w:left">
                                      <xsl:text>margin-left:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:right">
                                      <xsl:text>margin-right:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>

                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:left">
                                    <xsl:text>margin-left:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of
                                        select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:right">
                                    <xsl:text>margin-right:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                    <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                      <xsl:text>text-indent:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                      <xsl:text>pt;</xsl:text>
                                    </xsl:if>
                                    <xsl:if test="child::w:pPr/w:jc">
                                      <xsl:text>text-align:</xsl:text>
                                      <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                      <xsl:text>;</xsl:text>
                                    </xsl:if>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:when>
                                  <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                    <xsl:text>text-indent:</xsl:text>
                                    <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                    <xsl:text>pt;</xsl:text>
                                  </xsl:when>
                                </xsl:choose>
                              </xsl:if>



                              <!-- new end -->
                              <!-- 16-feb-18: to set override styles -->
                              <xsl:if test="child::w:pPr/w:rPr/w:b">
                                <xsl:choose>
                                  <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                                    <xsl:text> font-weight:normal;</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:text> font-weight:bold;</xsl:text>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:if>
                              <xsl:if test="child::w:pPr/w:rPr/w:i">
                                <xsl:choose>
                                  <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                                    <xsl:text> font-style:normal;</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:text> font-style:italic;</xsl:text>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:if>
                              <xsl:if test="child::w:pPr/w:rPr/w:caps">
                                <xsl:choose>
                                  <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                                    <xsl:text> text-transform: none !important;</xsl:text>
                                  </xsl:when>
                                  <xsl:otherwise>
                                    <xsl:text> text-transform:uppercase;</xsl:text>
                                  </xsl:otherwise>
                                </xsl:choose>
                              </xsl:if>
                              <!-- 16-feb-18: to set override styles -->
                            </xsl:attribute>
                            <xsl:if test="contains($bulltype, '.%')">
                              <xsl:attribute name="type">
                                <xsl:value-of select="$indent"/>
                              </xsl:attribute>
                            </xsl:if>
                            <xsl:apply-templates/>
                          </xsl:when>
                          <xsl:when test="child::w:sdt">
                            <xsl:apply-templates/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:apply-templates/>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:element>

                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:element name="p">
                    <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                    <xsl:attribute name="class" select="$paragraphStyle"/>
                    <xsl:attribute name="data-name">
                      <xsl:choose>
                        <xsl:when test="string-length($paragraphStyleName) > 0">
                          <xsl:value-of select="$paragraphStyleName"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'MsoNormal'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                    <!-- 7-May-19 -->
                    <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                    <xsl:choose>
                      <xsl:when
                        test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind">
                        <xsl:attribute name="style">
                          <xsl:text>mso-style-name:</xsl:text>
                          <xsl:value-of select="w:pPr/w:pPrChange/w:pPr/w:pStyle/@w:val"/>
                          <xsl:text> !msorm;</xsl:text>

                          <xsl:if test="child::w:pPr/w:shd">
                            <xsl:text> background:#</xsl:text>
                            <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                            <xsl:text>;</xsl:text>
                          </xsl:if>
                          <!--****** new -->
                          <xsl:if test="child::w:pPr/w:ind">
                            <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                            <xsl:choose>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                                <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                              </xsl:when>
                              <xsl:when
                                test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">

                                <xsl:if test="child::w:pPr/w:ind/@w:left">
                                  <xsl:text>margin-left:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:right">
                                  <xsl:text>margin-right:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>

                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:left">
                                <xsl:text>margin-left:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:right">
                                <xsl:text>margin-right:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                                <xsl:text>pt;</xsl:text>
                                <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                                  <xsl:text>text-indent:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                  <xsl:text>pt;</xsl:text>
                                </xsl:if>
                                <xsl:if test="child::w:pPr/w:jc">
                                  <xsl:text>text-align:</xsl:text>
                                  <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                                  <xsl:text>;</xsl:text>
                                </xsl:if>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:when>
                              <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                                <xsl:text>text-indent:</xsl:text>
                                <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                                <xsl:text>pt;</xsl:text>
                              </xsl:when>
                            </xsl:choose>
                          </xsl:if>



                          <!-- new end -->
                          <!-- 16-feb-18: to set override styles -->
                          <xsl:if test="child::w:pPr/w:rPr/w:b">
                            <xsl:choose>
                              <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                                <xsl:text> font-weight:normal;</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:text> font-weight:bold;</xsl:text>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:if>
                          <xsl:if test="child::w:pPr/w:rPr/w:i">
                            <xsl:choose>
                              <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                                <xsl:text> font-style:normal;</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:text> font-style:italic;</xsl:text>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:if>
                          <xsl:if test="child::w:pPr/w:rPr/w:caps">
                            <xsl:choose>
                              <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                                <xsl:text> text-transform: none !important;</xsl:text>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:text> text-transform:uppercase;</xsl:text>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:if>
                          <!-- 16-feb-18: to set override styles -->
                        </xsl:attribute>
                        <xsl:if test="contains($bulltype, '.%')">
                          <xsl:attribute name="type">
                            <xsl:value-of select="$indent"/>
                          </xsl:attribute>
                        </xsl:if>
                        <xsl:apply-templates/>
                      </xsl:when>
                      <xsl:when test="child::w:sdt">
                        <xsl:apply-templates/>
                      </xsl:when>
                      <xsl:otherwise>
                        <xsl:apply-templates/>
                      </xsl:otherwise>
                    </xsl:choose>
                  </xsl:element>

                </xsl:otherwise>
              </xsl:choose>
              <xsl:if test="w:pPr/w:pBdr[not(w:left/@w:val = 'none' or w:right/@w:val = 'none')]">
                <xsl:choose>
                  <xsl:when test="w:pPr/w:pBdr[w:left and w:right]">
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
                  </xsl:when>
                  <xsl:when test="w:pPr/w:pBdr[w:left]">
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
                  </xsl:when>
                  <xsl:when test="w:pPr/w:pBdr[w:right]">
                    <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>
                  </xsl:when>
                </xsl:choose>
              </xsl:if>
              <!-- 26-July-17: Added for para frame -->
              <!--13-AUG-18: xsl:if test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')]
                    and (not(following-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]))" -->
              <xsl:if test="w:pPr/w:pBdr[not(w:bottom/@w:val = 'none')]">
                <!-- w:pPr/w:pBdr[not(w:top/@w:val = 'none' and w:bottom/@w:val = 'none' and w:left/@w:val = 'none' and w:right/@w:val = 'none')] and not(preceding-sibling::*[1][self::w:p/w:pPr/w:pStyle[@w:val = 'ListParagraph']]) -->
                <xsl:if test="w:pPr/w:pBdr[w:bottom]">

                  <xsl:text disable-output-escaping="yes">&lt;div style="border-bottom: 1px solid black; padding:</xsl:text>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt ')"/>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
                  <xsl:text disable-output-escaping="yes">"/&gt;</xsl:text>

                </xsl:if>
              </xsl:if>
              <!-- 26-July-17: Added for para frame END-->
            </xsl:when>
            <xsl:otherwise>
              <!-- Checking for dummy paragraphs -->
              <!-- 26-July-17: Added for para frame @@@@ POP-->
              <xsl:if
                test="w:pPr/w:pBdr[not(w:top/@w:val = 'none' or w:bottom/@w:val = 'none' or w:left/@w:val = 'none' or w:right/@w:val = 'none')]">
                <!-- 10-JAN-19: New logic -->
                <xsl:text disable-output-escaping="yes">&lt;div style="</xsl:text>
                <xsl:if test="w:pPr/w:pBdr[w:top]">
                  <xsl:text>border-top:1px solid black; padding:</xsl:text>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:top/@w:space, 'pt')"/>
                  <xsl:text disable-output-escaping="yes">;</xsl:text>
                </xsl:if>
                <xsl:if test="w:pPr/w:pBdr[w:bottom]">
                  <xsl:text>border-bottom:1px solid black; padding:</xsl:text>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:bottom/@w:space, 'pt')"/>
                  <xsl:text disable-output-escaping="yes">;</xsl:text>
                </xsl:if>
                <xsl:if test="w:pPr/w:pBdr[w:left]">
                  <xsl:text>border-left:1px solid black; padding:</xsl:text>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:left/@w:space, 'pt')"/>
                  <xsl:text disable-output-escaping="yes">;</xsl:text>
                </xsl:if>
                <xsl:if test="w:pPr/w:pBdr[w:right]">
                  <xsl:text>border-right:1px solid black; padding:</xsl:text>
                  <xsl:value-of select="concat(w:pPr/w:pBdr/w:right/@w:space, 'pt')"/>
                  <xsl:text disable-output-escaping="yes">;</xsl:text>
                </xsl:if>
                <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
              </xsl:if>
              <!-- 26-July-17: Added for para frame END POP-->
              <xsl:element name="p">
                <xsl:variable name="color" select="w:pPr/w:rPr/w:color/@w:val"/>
                <xsl:attribute name="class" select="$paragraphStyle"/>
                <xsl:attribute name="data-name">
                  <xsl:choose>
                    <xsl:when test="string-length($paragraphStyleName) > 0">
                      <xsl:value-of select="$paragraphStyleName"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="'MsoNormal'"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <!-- 7-May-19 -->
                <!-- 19-08-16 Check for w:pPrChange to identify the previous style while track changes is ON -->
                <xsl:choose>
                  <xsl:when
                    test="child::w:pPr/w:pPrChange | child::w:pPr/w:shd | child::w:pPr/w:jc | child::w:pPr/w:ind | child::w:pPr/w:rPr/w:b">
                    <xsl:attribute name="style">
                      <xsl:if test="child::w:pPr/w:shd">
                        <xsl:text> background:#</xsl:text>
                        <xsl:value-of select="child::w:pPr/w:shd/@w:fill"/>
                        <xsl:text>;</xsl:text>
                      </xsl:if>
                      <!--****** new -->
                      <xsl:if test="child::w:pPr/w:ind">
                        <!-- 31-Dec-18: to delete duplicate "text-align" attribute and remove duplicat style attribute -->
                        <xsl:choose>
                          <xsl:when
                            test="child::w:pPr/w:ind/@w:hanging = child::w:pPr/w:ind/@w:left">
                            <!-- 29-NOV-18: List number issue in "6401450" for num ref, given by Ajay -->
                          </xsl:when>
                          <xsl:when
                            test="child::w:pPr/w:ind/@w:left and child::w:pPr/w:ind/@w:right | w:pPr/w:jc">

                            <xsl:if test="child::w:pPr/w:ind/@w:left">
                              <xsl:text>margin-left:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:ind/@w:right">
                              <xsl:text>margin-right:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>

                          </xsl:when>
                          <xsl:when test="child::w:pPr/w:ind/@w:left">
                            <xsl:text>margin-left:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:left) div 20"/>
                            <xsl:text>pt;</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:ind/@w:firstLine">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:when>
                          <xsl:when test="child::w:pPr/w:ind/@w:right">
                            <xsl:text>margin-right:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:right) div 20"/>
                            <xsl:text>pt;</xsl:text>
                            <xsl:if test="child::w:pPr/w:ind/@w:hanging">
                              <xsl:text>text-indent:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                              <xsl:text>pt;</xsl:text>
                            </xsl:if>
                            <xsl:if test="child::w:pPr/w:jc">
                              <xsl:text>text-align:</xsl:text>
                              <xsl:value-of select="(child::w:pPr/w:jc/@w:val)"/>
                              <xsl:text>;</xsl:text>
                            </xsl:if>
                          </xsl:when>
                          <xsl:when test="child::w:pPr/w:ind/@w:firstLine">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:firstLine) div 20"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:when>
                          <xsl:when test="child::w:pPr/w:ind/@w:hanging">
                            <xsl:text>text-indent:</xsl:text>
                            <xsl:value-of select="(child::w:pPr/w:ind/@w:hanging) div 20"/>
                            <xsl:text>pt;</xsl:text>
                          </xsl:when>
                        </xsl:choose>
                      </xsl:if>
                      <!-- 14-Feb-19: Added para aligment -->
                      <xsl:if test="./w:pPr/w:jc">
                        <xsl:variable name="basetextAlign" select="./w:pPr/w:jc/@w:val"/>
                        <xsl:text>text-align:</xsl:text>
                        <xsl:choose>
                          <xsl:when test="$basetextAlign = 'both'">
                            <xsl:text>justify</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:value-of select="$basetextAlign"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <xsl:text>;</xsl:text>
                      </xsl:if>

                      <!-- new end -->
                      <!-- 16-feb-18: to set override styles -->
                      <xsl:if test="child::w:pPr/w:rPr/w:b">
                        <xsl:choose>
                          <xsl:when test="child::w:pPr/w:rPr/w:b[@w:val = '0']">
                            <xsl:text> font-weight:normal;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text> font-weight:bold;</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                      <xsl:if test="child::w:pPr/w:rPr/w:i">
                        <xsl:choose>
                          <xsl:when test="child::w:pPr/w:rPr/w:i[@w:val = '0']">
                            <xsl:text> font-style:normal;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text> font-style:italic;</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                      <xsl:if test="child::w:pPr/w:rPr/w:caps">
                        <xsl:choose>
                          <xsl:when test="child::w:pPr/w:rPr/w:caps[@w:val = '0']">
                            <xsl:text> text-transform: none !important;</xsl:text>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text> text-transform:uppercase;</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                      <!-- 16-feb-18: to set override styles -->
                    </xsl:attribute>

                    <xsl:if test="contains($bulltype, '.%')">
                      <xsl:attribute name="type">
                        <xsl:value-of select="$indent"/>
                      </xsl:attribute>
                    </xsl:if>
                    <xsl:apply-templates/>
                  </xsl:when>
                  <xsl:when test="child::w:sdt">
                    <xsl:apply-templates/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:apply-templates/>
                  </xsl:otherwise>
                </xsl:choose>

              </xsl:element>
              <xsl:if
                test="w:pPr/w:pBdr[not(w:left/@w:val = 'none' or w:right/@w:val = 'none' or w:top/@w:val = 'none' or w:bottom/@w:val = 'none')]">
                <xsl:text disable-output-escaping="yes">&lt;/div&gt;</xsl:text>

              </xsl:if>


            </xsl:otherwise>
          </xsl:choose>
        </xsl:for-each>
      </xsl:element>

    </xsl:element>

  </xsl:template>



  <xsl:template match="w:footnoteReference">

    <xsl:variable name="footnoteClass">
      <xsl:choose>
        <xsl:when test="ancestor::w:del">
          <xsl:value-of select="'footnotecitationdeleted'"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="'footnotecitation'"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:element name="a">
      <xsl:attribute name="class" select="$footnoteClass"/>
      <xsl:attribute name="style">
        <xsl:text>mso-footnote-id:ftn</xsl:text>
        <xsl:choose>
          <xsl:when test="ancestor::w:del">
            <xsl:value-of select="@w:id"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="@w:id"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:attribute>
      <xsl:attribute name="href">
        <xsl:text>#_ftn</xsl:text>
        <xsl:choose>
          <xsl:when test="ancestor::w:del">
            <xsl:value-of select="@w:id"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="@w:id"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:attribute>
      <xsl:attribute name="id">
        <!-- 24-Sep-18: Commonly changed like comment,FT,EN -->
        <xsl:text>_ftnref</xsl:text>
        <xsl:choose>
          <xsl:when test="ancestor::w:del">
            <xsl:value-of select="@w:id"/>
          </xsl:when>
          <xsl:otherwise>
            <!--<xsl:number level="any" count="w:footnoteReference[not(ancestor::w:del)]"/>-->
            <xsl:value-of select="@w:id"/>
          </xsl:otherwise>
        </xsl:choose>

        <!--<xsl:value-of select="@w:id"/>-->
      </xsl:attribute>
      <xsl:element name="span">
        <xsl:attribute name="class" select="'MsoFootnoteReference'"/>
        <!--<xsl:choose>
            <xsl:when test="@w:customMarkFollows">
              <xsl:value-of select="following-sibling::"></xsl:value-of>
            </xsl:when>
          </xsl:choose>-->
        <!-- Commented on 20-Mar-18 -->
        <xsl:choose>
          <xsl:when test="ancestor::w:del">
            <xsl:value-of select="concat('', @w:id, '')"/>
          </xsl:when>
          <xsl:when test="following::w:sectPr[1]/w:footnotePr/w:numFmt[@w:val = 'chicago']">
            <xsl:choose>
              <xsl:when test="not(preceding::w:footnoteReference)">
                <xsl:text>*</xsl:text>
              </xsl:when>
              <xsl:when test="count(preceding::w:footnoteReference) = 1">
                <xsl:text>†</xsl:text>
              </xsl:when>
              <xsl:when test="count(preceding::w:footnoteReference) = 2">
                <xsl:text>‡</xsl:text>
              </xsl:when>
              <xsl:when test="count(preceding::w:footnoteReference) = 3">
                <xsl:text>§</xsl:text>
              </xsl:when>
              <xsl:when test="count(preceding::w:footnoteReference) = 4">
                <xsl:text>††</xsl:text>
              </xsl:when>
              <xsl:when test="count(preceding::w:footnoteReference) = 5">
                <xsl:text>‡‡</xsl:text>
              </xsl:when>
              <xsl:when test="count(preceding::w:footnoteReference) = 6">
                <xsl:text>§§</xsl:text>
              </xsl:when>
              <xsl:when test="count(preceding::w:footnoteReference) = 7">
                <xsl:text>†††</xsl:text>
              </xsl:when>
              <xsl:when test="count(preceding::w:footnoteReference) = 8">
                <xsl:text>‡‡‡</xsl:text>
              </xsl:when>
              <xsl:when test="count(preceding::w:footnoteReference) = 9">
                <xsl:text>§§§</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>*</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text/>
            <xsl:choose>
              <xsl:when test="//w:sectPr/w:footnotePr/w:numFmt[@w:val = 'upperRoman']">
                <xsl:number level="any" count="w:footnoteReference[not(ancestor::w:del)]" format="I"
                />
              </xsl:when>
              <xsl:when test="//w:sectPr/w:footnotePr/w:numFmt[@w:val = 'lowerAlpha']">
                <xsl:number level="any" count="w:footnoteReference[not(ancestor::w:del)]" format="a"
                />
              </xsl:when>
              <xsl:when test="//w:sectPr/w:footnotePr/w:numFmt[@w:val = 'upperAlpha']">
                <xsl:number level="any" count="w:footnoteReference[not(ancestor::w:del)]" format="A"
                />
              </xsl:when>
              <xsl:otherwise>
                <xsl:number level="any" count="w:footnoteReference[not(ancestor::w:del)]"/>
              </xsl:otherwise>
            </xsl:choose>


            <!--<xsl:number level="any" count="w:footnoteReference[not(ancestor::w:del)]"/>-->
            <xsl:text/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <!-- FOOTNOTE captions -->
  <xsl:template match="w:footnotes" mode="footnotes">
    <xsl:if test="count(w:footnote) > 2">

      <xsl:element name="div">
        <xsl:attribute name="id" select="'footnote_'"/>
        <!-- 24-Sep-18: Commonly changed like comment,FT,EN -->
        <xsl:apply-templates select="w:footnote" mode="footnote"/>
      </xsl:element>

    </xsl:if>
  </xsl:template>


  <!-- @@@FOOTNOTE $$$$-->
  <xsl:template match="//w:footnote" mode="footnote">
    <xsl:choose>
      <xsl:when test="@w:type = 'continuationSeparator'"/>
      <xsl:when test="@w:type = 'separator'"/>
      <xsl:when test="@w:type = 'continuationNotice'"/>
      <xsl:otherwise>

        <xsl:element name="div">
          <xsl:attribute name="style" select="'mso-element:footnote'"/>
          <xsl:attribute name="id">
            <xsl:text>ftn</xsl:text>
            <xsl:choose>
              <xsl:when
                test="
                  ancestor-or-self::w:footnote[@w:type = 'separator'] and ancestor-or-self::w:footnote[@w:type = 'continuationSeparator']
                  and ancestor-or-self::w:footnote[@w:type = 'continuationNotice']">
                <xsl:value-of select="@w:id - 1"/>
              </xsl:when>
              <!-- w:footnoteReference w:customMarkFollows -->
              <xsl:when test="ancestor-or-self::w:footnoteReference/@w:customMarkFollows">
                <xsl:value-of select="@w:id - $custFootnote"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="@w:id"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>

          <xsl:for-each select="w:p">
            <xsl:variable name="paragraphStyle" select="w:pPr/w:pStyle/@w:val"/>
            <xsl:variable name="paragraphStyleName">
              <xsl:value-of
                select="/w:document/w:styles/w:style[@w:styleId = $paragraphStyle][1]/w:name/@w:val"
              />
            </xsl:variable>

            <xsl:element name="p">
              <xsl:attribute name="class">
                <xsl:choose>
                  <xsl:when test="descendant::w:pStyle[1]/@w:val">
                    <xsl:value-of select="descendant::w:pStyle[1]/@w:val"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoFootnoteText'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:attribute name="data-name">
                <xsl:choose>
                  <xsl:when test="descendant::w:pStyle[1]/@w:val">
                    <xsl:value-of select="descendant::w:pStyle[1]/@w:val"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoFootnoteText'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>

              <xsl:element name="a">
                <xsl:attribute name="style">
                  <xsl:text>mso-footnote-id:ftn</xsl:text>
                  <xsl:choose>
                    <xsl:when
                      test="ancestor-or-self::w:footnote[@w:type = 'separator'] and ancestor-or-self::w:footnote[@w:type = 'continuationSeparator'] and ancestor-or-self::w:footnote[@w:type = 'continuationNotice']">
                      <xsl:value-of select="ancestor-or-self::w:footnote/@w:id - 1"/>
                    </xsl:when>
                    <xsl:when test="ancestor-or-self::w:footnoteReference/@w:customMarkFollows">
                      <xsl:value-of select="ancestor-or-self::w:footnote/@w:id - $custFootnote"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="ancestor-or-self::w:footnote/@w:id"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <xsl:attribute name="href">
                  <xsl:text>#_ftnref</xsl:text>
                  <xsl:choose>
                    <xsl:when
                      test="ancestor-or-self::w:footnote[@w:type = 'separator'] and ancestor-or-self::w:footnote[@w:type = 'continuationSeparator'] and ancestor-or-self::w:footnote[@w:type = 'continuationNotice']">
                      <xsl:value-of select="ancestor-or-self::w:footnote/@w:id - 1"/>
                    </xsl:when>
                    <xsl:when test="ancestor-or-self::w:footnoteReference/@w:customMarkFollows">
                      <xsl:value-of select="ancestor-or-self::w:footnote/@w:id - $custFootnote"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="ancestor-or-self::w:footnote/@w:id"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <xsl:attribute name="name">
                  <xsl:text>_ftn</xsl:text>
                  <xsl:choose>
                    <xsl:when
                      test="ancestor-or-self::w:footnote[@w:type = 'separator'] and ancestor-or-self::w:footnote[@w:type = 'continuationSeparator'] and ancestor-or-self::w:footnote[@w:type = 'continuationNotice']">
                      <xsl:value-of select="ancestor-or-self::w:footnote/@w:id - 1"/>
                    </xsl:when>
                    <xsl:when test="ancestor-or-self::w:footnoteReference/@w:customMarkFollows">
                      <xsl:value-of select="ancestor-or-self::w:footnote/@w:id - $custFootnote"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="ancestor-or-self::w:footnote/@w:id"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
                <xsl:element name="sup">
                  <xsl:choose>
                    <xsl:when
                      test="
                        ancestor-or-self::w:footnote[@w:type = 'separator'] and ancestor-or-self::w:footnote[@w:type = 'continuationSeparator']
                        and ancestor-or-self::w:footnote[@w:type = 'continuationNotice']">
                      <xsl:value-of select="ancestor-or-self::w:footnote/@w:id - 1"/>
                    </xsl:when>
                    <xsl:when test="ancestor-or-self::w:footnoteReference/@w:customMarkFollows">
                      <xsl:value-of select="ancestor-or-self::w:footnote/@w:id - $custFootnote"/>
                    </xsl:when>
                    <xsl:when test="//w:sectPr[1]/w:footnotePr/w:numFmt[@w:val = 'chicago']">

                      <xsl:choose>
                        <xsl:when
                          test="
                            ancestor-or-self::w:footnote[@w:type = 'separator'] and ancestor-or-self::w:footnote[@w:type = 'continuationSeparator']
                            and ancestor-or-self::w:footnote[@w:type = 'continuationNotice']"> </xsl:when>
                        <xsl:when test="ancestor-or-self::w:footnote[@w:id = '1']">
                          <xsl:text>*</xsl:text>
                        </xsl:when>
                        <xsl:when test="ancestor-or-self::w:footnote[@w:id = '2']">
                          <xsl:text>†</xsl:text>
                        </xsl:when>
                        <xsl:when test="ancestor-or-self::w:footnote[@w:id = '3']">
                          <xsl:text>‡</xsl:text>
                        </xsl:when>
                        <xsl:when test="ancestor-or-self::w:footnote[@w:id = '4']">
                          <xsl:text>§</xsl:text>
                        </xsl:when>
                        <xsl:when test="ancestor-or-self::w:footnote[@w:id = '5']">
                          <xsl:text>††</xsl:text>
                        </xsl:when>
                        <xsl:when test="ancestor-or-self::w:footnote[@w:id = '6']">
                          <xsl:text>‡‡</xsl:text>
                        </xsl:when>
                        <xsl:when test="ancestor-or-self::w:footnote[@w:id = '7']">
                          <xsl:text>§§</xsl:text>
                        </xsl:when>
                        <xsl:when test="ancestor-or-self::w:footnote[@w:id = '8']">
                          <xsl:text>†††</xsl:text>
                        </xsl:when>
                        <xsl:when test="ancestor-or-self::w:footnote[@w:id = '9']">
                          <xsl:text>‡‡‡</xsl:text>
                        </xsl:when>
                        <xsl:when test="ancestor-or-self::w:footnote[@w:id = '10']">
                          <xsl:text>§§§</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text>*</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <!--<xsl:value-of select="@w:id"/>-->

                      <xsl:choose>
                        <xsl:when test="//w:sectPr/w:footnotePr/w:numFmt[@w:val = 'upperRoman']">
                          <xsl:number count="w:footnote[xs:integer(@w:id) > 0]" level="any"
                            format="I"/>
                        </xsl:when>
                        <xsl:when test="//w:sectPr/w:footnotePr/w:numFmt[@w:val = 'lowerRoman']">
                          <xsl:number count="w:footnote[xs:integer(@w:id) > 0]" level="any"
                            format="i"/>
                        </xsl:when>
                        <xsl:when test="//w:sectPr/w:footnotePr/w:numFmt[@w:val = 'lowerAlpha']">
                          <xsl:number count="w:footnote[xs:integer(@w:id) > 0]" level="any"
                            format="a"/>
                        </xsl:when>
                        <xsl:when test="//w:sectPr/w:footnotePr/w:numFmt[@w:val = 'upperAlpha']">
                          <xsl:number count="w:footnote[xs:integer(@w:id) > 0]" level="any"
                            format="A"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="ancestor::w:footnote/@w:id"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:element>
              </xsl:element>
              <xsl:apply-templates/>
            </xsl:element>
          </xsl:for-each>
        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template match="w:footnotes"/>

  <xsl:template match="w:endnoteReference">
    <xsl:variable name="referenced-id" select="@w:id"/>
    <xsl:variable name="endnoteID" select="@w:id"/>
    <xsl:variable name="endnoteID2" select="($endnoteID - 1)"/>
    <xsl:element name="a">
      <xsl:attribute name="id">
        <xsl:value-of select="'eref'"/>
        <xsl:number format="1" count="w:endnoteReference" level="any"/>
      </xsl:attribute>
      <xsl:attribute name="href" select="concat('#e', $referenced-id)"/>

      <!-- 28-Sep-18: giving @data-numval  for endnote restarts based on section page break-->
      <xsl:if test="preceding::w:sectPr/w:endnotePr/w:numRestart">
        <xsl:attribute name="data-numval">
          <xsl:choose>
            <xsl:when test="preceding::w:sectPr/w:endnotePr/w:numRestart">
              <xsl:number level="any" from="//w:sectPr/w:endnotePr/w:numRestart"/>
            </xsl:when>
            <xsl:otherwise>
              <xsl:value-of select="@w:id"/>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:attribute>
      </xsl:if>
      <xsl:choose>
        <!-- 28-Sep-18: giving @data-numval  for endnote restarts based on section page break-->
        <xsl:when test="preceding::w:sectPr/w:endnotePr/w:numRestart">
          <xsl:number level="any" from="//w:sectPr/w:endnotePr/w:numRestart"/>
        </xsl:when>
        <xsl:when test="following::w:sectPr[1]/w:endnotePr/w:numFmt[@w:val = 'chicago']">
          <xsl:choose>
            <xsl:when test="not(preceding::w:endnoteReference)">
              <xsl:text>*</xsl:text>
            </xsl:when>
            <xsl:when test="count(preceding::w:endnoteReference) = 1">
              <xsl:text>†</xsl:text>
            </xsl:when>
            <xsl:when test="count(preceding::w:endnoteReference) = 2">
              <xsl:text>‡</xsl:text>
            </xsl:when>
            <xsl:when test="count(preceding::w:endnoteReference) = 3">
              <xsl:text>§</xsl:text>
            </xsl:when>
            <xsl:when test="count(preceding::w:endnoteReference) = 4">
              <xsl:text>††</xsl:text>
            </xsl:when>
            <xsl:when test="count(preceding::w:endnoteReference) = 5">
              <xsl:text>‡‡</xsl:text>
            </xsl:when>
            <xsl:when test="count(preceding::w:endnoteReference) = 6">
              <xsl:text>§§</xsl:text>
            </xsl:when>
            <xsl:when test="count(preceding::w:endnoteReference) = 7">
              <xsl:text>†††</xsl:text>
            </xsl:when>
            <xsl:when test="count(preceding::w:endnoteReference) = 8">
              <xsl:text>‡‡‡</xsl:text>
            </xsl:when>
            <xsl:when test="count(preceding::w:endnoteReference) = 9">
              <xsl:text>§§§</xsl:text>
            </xsl:when>
            <xsl:otherwise>
              <xsl:text>*</xsl:text>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="//w:sectPr/w:endnotePr">
              <xsl:value-of select="@w:id"/>
            </xsl:when>
            <xsl:when test="//w:sectPr[1]/w:endnotePr/w:numFmt[@w:val = 'chicago']">

              <xsl:choose>
                <xsl:when
                  test="
                    ancestor-or-self::w:endnote[@w:type = 'separator'] and ancestor-or-self::w:endnote[@w:type = 'continuationSeparator']
                    and ancestor-or-self::w:endnote[@w:type = 'continuationNotice']"> </xsl:when>
                <xsl:when test="ancestor-or-self::w:endnote[@w:id = '1']">
                  <xsl:text>*</xsl:text>
                </xsl:when>
                <xsl:when test="ancestor-or-self::w:endnote[@w:id = '2']">
                  <xsl:text>†</xsl:text>
                </xsl:when>
                <xsl:when test="ancestor-or-self::w:endnote[@w:id = '3']">
                  <xsl:text>‡</xsl:text>
                </xsl:when>
                <xsl:when test="ancestor-or-self::w:endnote[@w:id = '4']">
                  <xsl:text>§</xsl:text>
                </xsl:when>
                <xsl:when test="ancestor-or-self::w:endnote[@w:id = '5']">
                  <xsl:text>††</xsl:text>
                </xsl:when>
                <xsl:when test="ancestor-or-self::w:endnote[@w:id = '6']">
                  <xsl:text>‡‡</xsl:text>
                </xsl:when>
                <xsl:when test="ancestor-or-self::w:endnote[@w:id = '7']">
                  <xsl:text>§§</xsl:text>
                </xsl:when>
                <xsl:when test="ancestor-or-self::w:endnote[@w:id = '8']">
                  <xsl:text>†††</xsl:text>
                </xsl:when>
                <xsl:when test="ancestor-or-self::w:endnote[@w:id = '9']">
                  <xsl:text>‡‡‡</xsl:text>
                </xsl:when>
                <xsl:when test="ancestor-or-self::w:endnote[@w:id = '10']">
                  <xsl:text>§§§</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>*</xsl:text>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
              <xsl:choose>
                <xsl:when test="//w:sectPr/w:endnotePr/w:numFmt[@w:val = 'upperRoman']">
                  <xsl:number level="any" format="I"/>
                </xsl:when>
                <xsl:when test="//w:sectPr/w:endnotePr/w:numFmt[@w:val = 'lowerAlpha']">
                  <xsl:number level="any" format="a"/>
                </xsl:when>
                <xsl:when test="//w:sectPr/w:endnotePr/w:numFmt[@w:val = 'upperAlpha']">
                  <xsl:number level="any" format="A"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:number level="any" format="i"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
        <!-- 28-Sep-18: giving @data-numval  for endnote restarts based on section page break-->
      </xsl:choose>
    </xsl:element>
    <!--</xsl:element>-->
  </xsl:template>

  <xsl:template match="w:endnotes" mode="endnotes">
    <xsl:if test="count(w:endnote) > 2">
      <xsl:element name="div">
        <xsl:attribute name="id" select="'endnote_'"/>
        <!-- 24-Sep-18: Commonly changed like comment,FT,EN -->
        <!--<xsl:text disable-output-escaping="yes">&lt;hr align="left" size="1" width="33%"/&gt;</xsl:text>-->

        <xsl:apply-templates select="w:endnote" mode="endnote"/>
      </xsl:element>

    </xsl:if>
  </xsl:template>
  <xsl:template match="//w:endnoteRef">
    <xsl:element name="sup">
      <xsl:element name="a">
        <xsl:attribute name="href">
          <!--<a id="eref2" href="#e2">-->
          <xsl:text>#eref</xsl:text>
          <xsl:number from="/" level="any" format="1"/>
        </xsl:attribute>
        <xsl:choose>
          <!--<xsl:when test="//w:sectPr/w:endnotePr">
            <xsl:number from="/" level="any" format="1"/>
          </xsl:when>-->
          <xsl:when test="//w:sectPr[1]/w:endnotePr/w:numFmt[@w:val = 'chicago']">
            <xsl:choose>
              <xsl:when
                test="
                  ancestor-or-self::w:endnote[@w:type = 'separator'] and ancestor-or-self::w:endnote[@w:type = 'continuationSeparator']
                  and ancestor-or-self::w:endnote[@w:type = 'continuationNotice']"> </xsl:when>
              <xsl:when test="ancestor-or-self::w:endnote[@w:id = '1']">
                <xsl:text>*</xsl:text>
              </xsl:when>
              <xsl:when test="ancestor-or-self::w:endnote[@w:id = '2']">
                <xsl:text>†</xsl:text>
              </xsl:when>
              <xsl:when test="ancestor-or-self::w:endnote[@w:id = '3']">
                <xsl:text>‡</xsl:text>
              </xsl:when>
              <xsl:when test="ancestor-or-self::w:endnote[@w:id = '4']">
                <xsl:text>§</xsl:text>
              </xsl:when>
              <xsl:when test="ancestor-or-self::w:endnote[@w:id = '5']">
                <xsl:text>††</xsl:text>
              </xsl:when>
              <xsl:when test="ancestor-or-self::w:endnote[@w:id = '6']">
                <xsl:text>‡‡</xsl:text>
              </xsl:when>
              <xsl:when test="ancestor-or-self::w:endnote[@w:id = '7']">
                <xsl:text>§§</xsl:text>
              </xsl:when>
              <xsl:when test="ancestor-or-self::w:endnote[@w:id = '8']">
                <xsl:text>†††</xsl:text>
              </xsl:when>
              <xsl:when test="ancestor-or-self::w:endnote[@w:id = '9']">
                <xsl:text>‡‡‡</xsl:text>
              </xsl:when>
              <xsl:when test="ancestor-or-self::w:endnote[@w:id = '10']">
                <xsl:text>§§§</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>*</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>

            <xsl:choose>
              <xsl:when test="//w:sectPr/w:endnotePr/w:numFmt[@w:val = 'upperRoman']">
                <xsl:number from="/" level="any" format="I"/>
              </xsl:when>
              <xsl:when test="//w:sectPr/w:endnotePr/w:numFmt[@w:val = 'lowerAlpha']">
                <xsl:number from="/" level="any" format="a"/>
              </xsl:when>
              <xsl:when test="//w:sectPr/w:endnotePr/w:numFmt[@w:val = 'upperAlpha']">
                <xsl:number from="/" level="any" format="A"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:number from="/" level="any" format="1"/>
              </xsl:otherwise>
            </xsl:choose>

          </xsl:otherwise>
        </xsl:choose>
        <!--<xsl:number from="/" level="any" format="1"/>-->
      </xsl:element>
    </xsl:element>
  </xsl:template>

  <xsl:template match="//w:endnote" mode="endnote">
    <xsl:variable name="restartID">
      <xsl:if test="@w:type = 'continuationSeparator'">
        <xsl:value-of select="child::w:p/@w:rsidP"/>
      </xsl:if>
    </xsl:variable>

    <xsl:variable name="endnoteID" select="@w:id"/>
    <xsl:variable name="endnoteID2" select="($endnoteID - 1)"/>
    <xsl:choose>
      <xsl:when test="@w:type = 'continuationSeparator'"/>
      <xsl:when test="@w:type = 'separator'"/>
      <xsl:when test="@w:type = 'continuationNotice'"/>
      <xsl:otherwise>
        <xsl:element name="div">
          <xsl:attribute name="style" select="'mso-element:endnote'"/>
          <xsl:attribute name="id">
            <xsl:text>e</xsl:text>
            <xsl:choose>
              <xsl:when
                test="
                  ancestor-or-self::w:endnote[@w:type = 'separator'] and ancestor-or-self::w:endnote[@w:type = 'continuationSeparator']
                  and ancestor-or-self::w:endnote[@w:type = 'continuationNotice']">
                <xsl:value-of select="@w:id - 1"/>
              </xsl:when>
              <xsl:when test="ancestor-or-self::w:endnoteReference/@w:customMarkFollows">
                <xsl:value-of select="@w:id - $custEndnote"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="@w:id"/>
              </xsl:otherwise>
            </xsl:choose>
            <!--
            <xsl:value-of select="$endnoteID"></xsl:value-of>-->
          </xsl:attribute>

          <xsl:for-each select="w:p">
            <!-- 10-Apr-18: If multi para in endnotes, let BR tag for the second w:p onwards -->

            <xsl:element name="p">
              <!-- 03-Apr-18: commented below. Added class and data-name for EndNotes -->
              <!--<xsl:attribute name="class" select="'MsoEndnoteText'"/> -->
              <xsl:variable name="paragraphStyle" select="child::w:pPr/w:pStyle[1]/@w:val"/>
              <xsl:variable name="paragraphStyleName">
                <!-- 04-Apr-18: The below logic changed to resolve the speed issue to applu data-name-->
                <!--<xsl:value-of select="//w:style[@w:styleId = $paragraphStyle]/w:name/@w:val"/>-->
                <xsl:value-of
                  select="//w:document/w:styles/w:style[@w:styleId = $paragraphStyle][1]/w:name/@w:val"
                />
              </xsl:variable>
              <xsl:attribute name="class">
                <xsl:choose>
                  <xsl:when test="child::w:pPr/w:pStyle[1]/@w:val">
                    <xsl:value-of select="child::w:pPr/w:pStyle[1]/@w:val"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoEndnoteText'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:attribute name="data-name">
                <xsl:choose>
                  <xsl:when test="child::w:pPr/w:pStyle[1]/@w:val">
                    <xsl:value-of select="child::w:pPr/w:pStyle[1]/@w:val"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'MsoEndnoteText'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>

              <!-- to get the footnote bookmarks -->

              <xsl:if test="child::w:p/w:bookmarkStart">
                <xsl:for-each select="w:p/w:bookmarkStart">
                  <xsl:variable name="bmId" select="@w:id"/>
                  <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                  <!--<xsl:value-of select="child::w:p/w:bookmarkStart/@w:name"/>-->
                  <xsl:value-of select="@w:name"/>
                  <xsl:text disable-output-escaping="yes">"</xsl:text>
                  <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                  <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
                </xsl:for-each>
              </xsl:if>

              <!-- 8-FEB-19: unwanted -->
              <!--<xsl:if test="not(descendant::w:endnoteRef)">
              <xsl:element name="a">
                <xsl:attribute name="style">
                  <xsl:text>mso-endnote-id:e</xsl:text>
                  <xsl:value-of select="@w:id"/>
                </xsl:attribute>
                <xsl:attribute name="href">
                  <xsl:text>#eref</xsl:text>
                  <xsl:value-of select="$endnoteID2"/>
                </xsl:attribute>
                <xsl:attribute name="name">
                  <xsl:text>_edn</xsl:text>
                  <xsl:value-of select="@w:id"/>
                </xsl:attribute>
                <xsl:if test="not(w:pPr/w:pStyle[contains(@w:val,'Head')])">
                <xsl:element name="span">
                  <xsl:attribute name="class" select="'MsoEndnoteReference'"/>     
                  
                  
                  <xsl:value-of select="concat('',$endnoteID2,'')"/>
                </xsl:element>  
                </xsl:if>
              </xsl:element>
            </xsl:if>-->



              <xsl:apply-templates/>
              <!-- to get the bookmark end -->
              <xsl:if test="child::w:p/w:bookmarkEnd">
                <xsl:for-each select="w:p/w:bookmarkEnd">
                  <!--<xsl:variable name="bmId" select="child::w:p/w:bookmarkEnd/@w:id"/>-->
                  <xsl:variable name="bmId" select="@w:id"/>

                  <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
                  <!--<xsl:value-of select="child::w:p/w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>-->
                  <xsl:value-of select="parent::w:p/w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
                  <xsl:text disable-output-escaping="yes">"</xsl:text>
                  <xsl:if test="contains(@w:name, 'BM')">
                    <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
                  </xsl:if>
                  <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
                  <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
                </xsl:for-each>
              </xsl:if>

            </xsl:element>
          </xsl:for-each>
        </xsl:element>

      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="w:endnotes"/>
  <!-- &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&& Footnotes-Endnotes-Comments &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&-->
  <!-- 03-APR-19: Footnote/endnote tagging and its links, standalized to match with ck xhtml output, due to common update ENDS here-->


  <xsl:template match="//w:drawing">
    <!-- For Hari IDML2Word -->
    <xsl:variable name="imgnameid"
      select="wp:inline/a:graphic/a:graphicData/pic:pic/pic:blipFill/a:blip/@r:embed"/>
    <xsl:variable name="imgnameid2"
      select="wp:anchor/a:graphic/a:graphicData/pic:pic/pic:blipFill/a:blip/@r:embed"/>
    <xsl:choose>
      <xsl:when test="wp:inline/a:graphic/a:graphicData/pic:pic/pic:blipFill/a:blip/@r:embed">
        <xsl:element name="img">
          <xsl:attribute name="src">
            <!--13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-->
            <!--13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-->
            <xsl:choose>
              <xsl:when test="//Relationships/Relationship[@Id = $imgnameid]">
                <xsl:for-each select="//Relationships/Relationship[@Id = $imgnameid]">
                  <xsl:variable name="imageName"
                    select="//Relationships/Relationship[@Id = $imgnameid]/@Target"/>
                  <xsl:value-of
                    select="concat('../images/', substring-after(//Relationships/Relationship[@Id = $imgnameid]/@Target, '/'))"
                  />
                </xsl:for-each>
              </xsl:when>
              <xsl:when test="//Relationships/Relationship[@Id = $imgnameid2]">
                <xsl:for-each select="//Relationships/Relationship[@Id = $imgnameid2]">
                  <xsl:value-of select="concat('../images/', substring-after(@Target, '/'))"/>
                </xsl:for-each>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of
                  select="concat('../images/', replace(replace(replace(wp:inline/a:graphic/a:graphicData/pic:pic/pic:nvPicPr/pic:cNvPr/@name, '.eps', '.jpg'), '.tif', '.jpg'), '%20', '_'))"
                />
              </xsl:otherwise>
            </xsl:choose>


            <!--<xsl:value-of
            select="concat('../images/', replace(replace(replace(wp:inline/a:graphic/a:graphicData/pic:pic/pic:nvPicPr/pic:cNvPr/@name, '.eps', '.jpg'), '.tif', '.jpg'), '%20', '_'))"
          />-->
          </xsl:attribute>
          <xsl:attribute name="alt" select="'image'"/>
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:element name="img">
          <xsl:attribute name="src">
            <!--13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-->
            <!--13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-->
            <xsl:value-of
              select="concat('../images/', replace(replace(replace(wp:inline/a:graphic/a:graphicData/pic:pic/pic:nvPicPr/pic:cNvPr/@name, '.eps', '.jpg'), '.tif', '.jpg'), '%20', '_'))"
            />
          </xsl:attribute>
          <xsl:attribute name="class" select="'_idGenObjectAttribute-1'"/>
          <xsl:attribute name="alt" select="'image'"/>
        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
    <!--</xsl:element>-->
  </xsl:template>


  <!-- <xsl:template match="w:r" name="transformRange">
    <xsl:choose>
      <xsl:when test="w:rPr/w:rStyle">
        <xsl:variable name="characterStyle">
          <xsl:value-of select="w:rPr/w:rStyle/@w:val"/>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="$characterStyle='CommentReference'">
            <xsl:apply-templates/>
          </xsl:when>
          <xsl:otherwise>
            <!-\-<xsl:element name="{$characterStyle}">-\->
              <xsl:call-template name="isRangeBold"/>
            <!-\-</xsl:element>-\->
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="w:rPr/w:sz">
        <xsl:variable name="font-size" select="w:rPr/w:sz/@w:val"/>
        <xsl:variable name="font-size2" select="number($font-size div 2)"/>
          
          <span style="font-size:{$font-size2}pt;">
            <xsl:apply-templates/>
          </span>
        
      </xsl:when>
      <xsl:when test="w:rPr/w:color">
          <xsl:call-template name="isRangeBold"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="isRangeBold"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>-->

  <xsl:template name="isRangeBold">
    <xsl:choose>
      <xsl:when test="w:rPr/w:b">
        <xsl:call-template name="isRangeItalic"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="isRangeItalic"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="isRangeItalic">
    <xsl:choose>

      <xsl:when test="w:rPr/w:b and w:rPr/w:i">

        <xsl:element name="b">
          <xsl:element name="i">
            <xsl:apply-templates/>
          </xsl:element>
        </xsl:element>
      </xsl:when>


      <xsl:when test="w:rPr/w:b">
        <xsl:element name="b">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:i">
        <xsl:element name="i">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>

      <xsl:when test="w:rPr/w:vertAlign[@w:val = 'superscript']">
        <xsl:element name="sup">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:position[number(@w:val) &gt; 2]">
        <xsl:element name="sup">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:vertAlign[@w:val = 'subscript']">
        <xsl:element name="sub">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:position[number(@w:val) &lt; -2]">
        <xsl:element name="sub">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:strike">
        <xsl:element name="strikethrough">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:dstrike">
        <xsl:element name="strikedoublethrough">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr//w:u[@w:val = 'single']">
        <xsl:element name="underline">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:u[@w:val = 'double']">
        <xsl:element name="underdoubleline">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:smallCaps">
        <xsl:element name="small">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:caps">
        <xsl:element name="capsall">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="w:rPr/w:rtl or parent::w:p/w:pPr/w:rPr/w:rtl">
        <xsl:element name="rtl">
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <xsl:template match="w:sym">
    <xsl:choose>
      <xsl:when test="@w:font = 'Symbol' or @w:font = 'MT Symbol'">
        <xsl:choose>
          <xsl:when test="@w:char = 'F022'">&#x2200;</xsl:when>
          <!--	# FOR ALL # universal -->
          <xsl:when test="@w:char = 'F024'">&#x2203;</xsl:when>
          <!--	# THERE EXISTS # existential -->
          <xsl:when test="@w:char = 'F025'">&#x0025;</xsl:when>
          <!--	# PERCENT SIGN # percent -->
          <xsl:when test="@w:char = 'F026'">&#x0026;</xsl:when>
          <!--	# AMPERSAND # ampersand -->
          <xsl:when test="@w:char = 'F027'">&#x220B;</xsl:when>
          <!--	# CONTAINS AS MEMBER	# suchthat -->
          <xsl:when test="@w:char = 'F028'">&#x0028;</xsl:when>
          <!--	# LEFT PARENTHESIS	# parenleft -->
          <xsl:when test="@w:char = 'F029'">&#x0029;</xsl:when>
          <!--	# RIGHT PARENTHESIS	# parenright -->
          <xsl:when test="@w:char = 'F02A'">&#x2217;</xsl:when>
          <!--	# ASTERISK OPERATOR	# asteriskmath -->
          <xsl:when test="@w:char = 'F02B'">&#x002B;</xsl:when>
          <!--	# PLUS SIGN # plus -->
          <xsl:when test="@w:char = 'F02C'">&#x002C;</xsl:when>
          <!--	# COMMA	# comma -->
          <xsl:when test="@w:char = 'F02D'">&#x2212;</xsl:when>
          <!--	# MINUS SIGN # minus -->
          <xsl:when test="@w:char = 'F02E'">&#x002E;</xsl:when>
          <!--	# FULL STOP # period -->
          <xsl:when test="@w:char = 'F02F'">&#x002F;</xsl:when>
          <!--	# SOLIDUS # slash -->
          <xsl:when test="@w:char = 'F030'">&#x0030;</xsl:when>
          <xsl:when test="@w:char = 'F031'">&#x0031;</xsl:when>
          <!--	# DIGIT ONE # one -->
          <xsl:when test="@w:char = 'F032'">&#x0032;</xsl:when>
          <!--	# DIGIT TWO # two -->
          <xsl:when test="@w:char = 'F033'">&#x0033;</xsl:when>
          <!--	# DIGIT THREE # three -->
          <xsl:when test="@w:char = 'F034'">&#x0034;</xsl:when>
          <!--	# DIGIT FOUR # four -->
          <xsl:when test="@w:char = 'F035'">&#x0035;</xsl:when>
          <!--	# DIGIT FIVE # five -->
          <xsl:when test="@w:char = 'F036'">&#x0036;</xsl:when>
          <!--	# DIGIT SIX # six -->
          <xsl:when test="@w:char = 'F037'">&#x0037;</xsl:when>
          <!--	# DIGIT SEVEN # seven -->
          <xsl:when test="@w:char = 'F038'">&#x0038;</xsl:when>
          <xsl:when test="@w:char = 'F039'">&#x0039;</xsl:when>
          <!--	# DIGIT NINE # nine -->
          <xsl:when test="@w:char = 'F03A'">&#x003A;</xsl:when>
          <!--	# COLON	# colon -->
          <xsl:when test="@w:char = 'F03B'">&#x003B;</xsl:when>
          <!--	# SEMICOLON # semicolon -->
          <xsl:when test="@w:char = 'F03C'">&#x003C;</xsl:when>
          <!--	# LESS-THAN SIGN	# less -->
          <xsl:when test="@w:char = 'F03D'">&#x003D;</xsl:when>
          <!--	# EQUALS SIGN # equal -->
          <xsl:when test="@w:char = 'F03E'">&#x003E;</xsl:when>
          <!--	# GREATER-THAN SIGN	# greater -->
          <xsl:when test="@w:char = 'F03F'">&#x003F;</xsl:when>
          <!--	# QUESTION MARK	# question -->
          <xsl:when test="@w:char = 'F040'">&#x2245;</xsl:when>
          <!--	# APPROXIMATELY EQUAL TO	# congruent -->
          <xsl:when test="@w:char = 'F041'">&#x0391;</xsl:when>
          <!--	# GREEK CAPITAL LETTER ALPHA	# Alpha -->
          <xsl:when test="@w:char = 'F042'">&#x0392;</xsl:when>
          <!--	# GREEK CAPITAL LETTER BETA	# Beta -->
          <xsl:when test="@w:char = 'F043'">&#x03A7;</xsl:when>
          <!--	# GREEK CAPITAL LETTER CHI	# Chi -->
          <xsl:when test="@w:char = 'F044'">&#x0394;</xsl:when>
          <!--	# GREEK CAPITAL LETTER DELTA	# Delta -->
          <xsl:when test="@w:char = 'F044'">&#x2206;</xsl:when>
          <!--	# INCREMENT # Delta -->
          <xsl:when test="@w:char = 'F045'">&#x0395;</xsl:when>
          <!--	# GREEK CAPITAL LETTER EPSILON	# Epsilon -->
          <xsl:when test="@w:char = 'F046'">&#x03A6;</xsl:when>
          <!--	# GREEK CAPITAL LETTER PHI	# Phi -->
          <xsl:when test="@w:char = 'F047'">&#x0393;</xsl:when>
          <!--	# GREEK CAPITAL LETTER GAMMA	# Gamma -->
          <xsl:when test="@w:char = 'F048'">&#x0397;</xsl:when>
          <!--	# GREEK CAPITAL LETTER ETA	# Eta -->
          <xsl:when test="@w:char = 'F049'">&#x0399;</xsl:when>
          <!--	# GREEK CAPITAL LETTER IOTA	# Iota -->
          <xsl:when test="@w:char = 'F04A'">&#x03D1;</xsl:when>
          <!--	# GREEK THETA SYMBOL	# theta1 -->
          <xsl:when test="@w:char = 'F04B'">&#x039A;</xsl:when>
          <!--	# GREEK CAPITAL LETTER KAPPA	# Kappa -->
          <xsl:when test="@w:char = 'F04C'">&#x039B;</xsl:when>
          <!--	# GREEK CAPITAL LETTER LAMDA	# Lambda -->
          <xsl:when test="@w:char = 'F04D'">&#x039C;</xsl:when>
          <!--	# GREEK CAPITAL LETTER MU	# Mu -->
          <xsl:when test="@w:char = 'F04E'">&#x039D;</xsl:when>
          <!--	# GREEK CAPITAL LETTER NU	# Nu -->
          <xsl:when test="@w:char = 'F04F'">&#x039F;</xsl:when>
          <!--	# GREEK CAPITAL LETTER OMICRON	# Omicron -->
          <xsl:when test="@w:char = 'F050'">&#x03A0;</xsl:when>
          <!--	# GREEK CAPITAL LETTER PI	# Pi -->
          <xsl:when test="@w:char = 'F051'">&#x0398;</xsl:when>
          <!--	# GREEK CAPITAL LETTER THETA	# Theta -->
          <xsl:when test="@w:char = 'F052'">&#x03A1;</xsl:when>
          <!--	# GREEK CAPITAL LETTER RHO	# Rho -->
          <xsl:when test="@w:char = 'F053'">&#x03A3;</xsl:when>
          <!--	# GREEK CAPITAL LETTER SIGMA	# Sigma -->
          <xsl:when test="@w:char = 'F054'">&#x03A4;</xsl:when>
          <!--	# GREEK CAPITAL LETTER TAU	# Tau -->
          <xsl:when test="@w:char = 'F055'">&#x03A5;</xsl:when>
          <!--	# GREEK CAPITAL LETTER UPSILON	# Upsilon -->
          <xsl:when test="@w:char = 'F056'">&#x03C2;</xsl:when>
          <xsl:when test="@w:char = 'F057'">&#x03A9;</xsl:when>
          <!--	# GREEK CAPITAL LETTER OMEGA	# Omega -->
          <xsl:when test="@w:char = 'F057'">&#x2126;</xsl:when>
          <!--	# OHM SIGN # Omega -->
          <xsl:when test="@w:char = 'F058'">&#x039E;</xsl:when>
          <!--	# GREEK CAPITAL LETTER XI	# Xi -->
          <xsl:when test="@w:char = 'F059'">&#x03A8;</xsl:when>
          <!--	# GREEK CAPITAL LETTER PSI	# Psi -->
          <xsl:when test="@w:char = 'F05A'">&#x0396;</xsl:when>
          <!--	# GREEK CAPITAL LETTER ZETA	# Zeta -->
          <xsl:when test="@w:char = 'F05B'">&#x005B;</xsl:when>
          <!--	# LEFT SQUARE BRACKET	# bracketleft -->
          <xsl:when test="@w:char = 'F05C'">&#x2234;</xsl:when>
          <!--	# THEREFORE # therefore -->
          <xsl:when test="@w:char = 'F05D'">&#x005D;</xsl:when>
          <!--	# RIGHT SQUARE BRACKET	# bracketright -->
          <xsl:when test="@w:char = 'F05E'">&#x22A5;</xsl:when>
          <!--	# UP TACK # perpendicular -->
          <xsl:when test="@w:char = 'F05F'">&#x005F;</xsl:when>
          <!--	# LOW LINE # underscore -->
          <xsl:when test="@w:char = 'F060'">&#xF8E5;</xsl:when>
          <!--	# RADICAL EXTENDER	# radicalex (CUS) -->
          <xsl:when test="@w:char = 'F061'">&#x03B1;</xsl:when>
          <!--	# GREEK SMALL LETTER ALPHA	# alpha -->
          <xsl:when test="@w:char = 'F062'">&#x03B2;</xsl:when>
          <!--	# GREEK SMALL LETTER BETA	# beta -->
          <xsl:when test="@w:char = 'F063'">&#x03C7;</xsl:when>
          <!--	# GREEK SMALL LETTER CHI	# chi -->
          <xsl:when test="@w:char = 'F064'">&#x03B4;</xsl:when>
          <!--	# GREEK SMALL LETTER DELTA	# delta -->
          <xsl:when test="@w:char = 'F065'">&#x03B5;</xsl:when>
          <!--	# GREEK SMALL LETTER EPSILON	# epsilon -->
          <xsl:when test="@w:char = 'F066'">&#x03C6;</xsl:when>
          <!--	# GREEK SMALL LETTER PHI	# phi -->
          <xsl:when test="@w:char = 'F067'">&#x03B3;</xsl:when>
          <!--	# GREEK SMALL LETTER GAMMA	# gamma -->
          <xsl:when test="@w:char = 'F068'">&#x03B7;</xsl:when>
          <!--	# GREEK SMALL LETTER ETA	# eta -->
          <xsl:when test="@w:char = 'F069'">&#x03B9;</xsl:when>
          <!--	# GREEK SMALL LETTER IOTA	# iota -->
          <xsl:when test="@w:char = 'F06A'">&#x03D5;</xsl:when>
          <!--	# GREEK PHI SYMBOL	# phi1 -->
          <xsl:when test="@w:char = 'F06B'">&#x03BA;</xsl:when>
          <!--	# GREEK SMALL LETTER KAPPA	# kappa -->
          <xsl:when test="@w:char = 'F06C'">&#x03BB;</xsl:when>
          <!--	# GREEK SMALL LETTER LAMDA	# lambda -->
          <xsl:when test="@w:char = 'F06D'">&#x00B5;</xsl:when>
          <!--	# MICRO SIGN # mu -->
          <xsl:when test="@w:char = 'F06D'">&#x03BC;</xsl:when>
          <!--	# GREEK SMALL LETTER MU	# mu -->
          <xsl:when test="@w:char = 'F06E'">&#x03BD;</xsl:when>
          <!--	# GREEK SMALL LETTER NU	# nu -->
          <xsl:when test="@w:char = 'F06F'">&#x03BF;</xsl:when>
          <!--	# GREEK SMALL LETTER OMICRON	# omicron -->
          <xsl:when test="@w:char = 'F070'">&#x03C0;</xsl:when>
          <!--	# GREEK SMALL LETTER PI	# pi -->
          <xsl:when test="@w:char = 'F071'">&#x03B8;</xsl:when>
          <xsl:when test="@w:char = 'F072'">&#x03C1;</xsl:when>
          <!--	# GREEK SMALL LETTER RHO	# rho -->
          <xsl:when test="@w:char = 'F073'">&#x03C3;</xsl:when>
          <!--	# GREEK SMALL LETTER SIGMA	# sigma -->
          <xsl:when test="@w:char = 'F074'">&#x03C4;</xsl:when>
          <!--	# GREEK SMALL LETTER TAU	# tau -->
          <xsl:when test="@w:char = 'F075'">&#x03C5;</xsl:when>
          <!--	# GREEK SMALL LETTER UPSILON	# upsilon -->
          <xsl:when test="@w:char = 'F076'">&#x03D6;</xsl:when>
          <!--	# GREEK PI SYMBOL	# omega1 -->
          <xsl:when test="@w:char = 'F077'">&#x03C9;</xsl:when>
          <!--	# GREEK SMALL LETTER OMEGA	# omega -->
          <xsl:when test="@w:char = 'F078'">&#x03BE;</xsl:when>
          <!--	# GREEK SMALL LETTER XI	# xi -->
          <xsl:when test="@w:char = 'F079'">&#x03C8;</xsl:when>
          <!--	# GREEK SMALL LETTER PSI	# psi -->
          <xsl:when test="@w:char = 'F07A'">&#x03B6;</xsl:when>
          <!--	# GREEK SMALL LETTER ZETA	# zeta -->
          <xsl:when test="@w:char = 'F07B'">&#x007B;</xsl:when>
          <!--	# LEFT CURLY BRACKET	# braceleft -->
          <xsl:when test="@w:char = 'F07C'">&#x007C;</xsl:when>
          <!--	# VERTICAL LINE	# bar -->
          <xsl:when test="@w:char = 'F07D'">&#x007D;</xsl:when>
          <!--	# RIGHT CURLY BRACKET	# braceright -->
          <xsl:when test="@w:char = 'F07E'">&#x223C;</xsl:when>
          <!--	# TILDE OPERATOR	# similar -->
          <xsl:when test="@w:char = 'F0A0'">&#x20AC;</xsl:when>
          <!--	# EURO SIGN # Euro -->
          <xsl:when test="@w:char = 'F0A1'">&#x03D2;</xsl:when>
          <!--	# GREEK UPSILON WITH HOOK SYMBOL	# Upsilon1 -->
          <xsl:when test="@w:char = 'F0A2'">&#x2032;</xsl:when>
          <!--	# PRIME	# minute -->
          <xsl:when test="@w:char = 'F0A3'">&#x2264;</xsl:when>
          <!--	# LESS-THAN OR EQUAL TO	# lessequal -->
          <xsl:when test="@w:char = 'F0A4'">&#x2044;</xsl:when>
          <!--	# FRACTION SLASH	# fraction -->
          <xsl:when test="@w:char = 'F0A4'">&#x2215;</xsl:when>
          <!--	# DIVISION SLASH	# fraction -->
          <xsl:when test="@w:char = 'F0A5'">&#x221E;</xsl:when>
          <!--	# INFINITY # infinity -->
          <xsl:when test="@w:char = 'F0A6'">&#x0192;</xsl:when>
          <!--	# LATIN SMALL LETTER F WITH HOOK	# florin -->
          <xsl:when test="@w:char = 'F0A7'">&#x2663;</xsl:when>
          <!--	# BLACK CLUB SUIT	# club -->
          <xsl:when test="@w:char = 'F0A8'">&#x2666;</xsl:when>
          <!--	# BLACK DIAMOND SUIT	# diamond -->
          <xsl:when test="@w:char = 'F0A9'">&#x2665;</xsl:when>
          <!--	# BLACK HEART SUIT	# heart -->
          <xsl:when test="@w:char = 'F0AA'">&#x2660;</xsl:when>
          <!--	# BLACK SPADE SUIT	# spade -->
          <xsl:when test="@w:char = 'F0AB'">&#x2194;</xsl:when>
          <!--	# LEFT RIGHT ARROW	# arrowboth -->
          <xsl:when test="@w:char = 'F0AC'">&#x2190;</xsl:when>
          <!--	# LEFTWARDS ARROW	# arrowleft -->
          <xsl:when test="@w:char = 'F0AD'">&#x2191;</xsl:when>
          <!--	# UPWARDS ARROW	# arrowup -->
          <xsl:when test="@w:char = 'F0AE'">&#x2192;</xsl:when>
          <!--	# RIGHTWARDS ARROW	# arrowright -->
          <xsl:when test="@w:char = 'F0AF'">&#x2193;</xsl:when>
          <!--	# DOWNWARDS ARROW	# arrowdown -->
          <xsl:when test="@w:char = 'F0B0'">&#x00B0;</xsl:when>
          <!--	# DEGREE SIGN # degree -->
          <xsl:when test="@w:char = 'F0B1'">&#x00B1;</xsl:when>
          <!--	# PLUS-MINUS SIGN	# plusminus -->
          <xsl:when test="@w:char = 'F0B2'">&#x2033;</xsl:when>
          <!--	# DOUBLE PRIME # second -->
          <xsl:when test="@w:char = 'F0B3'">&#x2265;</xsl:when>
          <!--	# GREATER-THAN OR EQUAL TO	# greaterequal -->
          <xsl:when test="@w:char = 'F0B4'">&#x00D7;</xsl:when>
          <!--	# MULTIPLICATION SIGN	# multiply -->
          <xsl:when test="@w:char = 'F0B5'">&#x221D;</xsl:when>
          <!--	# PROPORTIONAL TO	# proportional -->
          <xsl:when test="@w:char = 'F0B6'">&#x2202;</xsl:when>
          <!--	# PARTIAL DIFFERENTIAL	# partialdiff -->
          <xsl:when test="@w:char = 'F0B7'">&#x2022;</xsl:when>
          <!--	# BULLET # bullet -->
          <xsl:when test="@w:char = 'F0B8'">&#x00F7;</xsl:when>
          <!--	# DIVISION SIGN	# divide -->
          <xsl:when test="@w:char = 'F0B9'">&#x2260;</xsl:when>
          <!--	# NOT EQUAL TO # notequal -->
          <xsl:when test="@w:char = 'F0BA'">&#x2261;</xsl:when>
          <!--	# IDENTICAL TO # equivalence -->
          <xsl:when test="@w:char = 'F0BB'">&#x2248;</xsl:when>
          <!--	# ALMOST EQUAL TO	# approxequal -->
          <xsl:when test="@w:char = 'F0BC'">&#x2026;</xsl:when>
          <!--	# HORIZONTAL ELLIPSIS	# ellipsis -->
          <xsl:when test="@w:char = 'F0BD'">&#xF8E6;</xsl:when>
          <!--	# VERTICAL ARROW EXTENDER	# arrowvertex (CUS) -->
          <xsl:when test="@w:char = 'F0BE'">&#xF8E7;</xsl:when>
          <!--	# HORIZONTAL ARROW EXTENDER	# arrowhorizex (CUS) -->
          <xsl:when test="@w:char = 'F0BF'">&#x21B5;</xsl:when>
          <!--	# DOWNWARDS ARROW WITH CORNER LEFTWARDS	# carriagereturn -->
          <xsl:when test="@w:char = 'F0C0'">&#x2135;</xsl:when>
          <!--	# ALEF SYMBOL # aleph -->
          <xsl:when test="@w:char = 'F0C1'">&#x2111;</xsl:when>
          <!--	# BLACK-LETTER CAPITAL I	# Ifraktur -->
          <xsl:when test="@w:char = 'F0C2'">&#x211C;</xsl:when>
          <!--	# BLACK-LETTER CAPITAL R	# Rfraktur -->
          <xsl:when test="@w:char = 'F0C3'">&#x2118;</xsl:when>
          <!--	# SCRIPT CAPITAL P	# weierstrass -->
          <xsl:when test="@w:char = 'F0C4'">&#x2297;</xsl:when>
          <!--	# CIRCLED TIMES	# circlemultiply -->
          <xsl:when test="@w:char = 'F0C5'">&#x2295;</xsl:when>
          <!--	# CIRCLED PLUS # circleplus -->
          <xsl:when test="@w:char = 'F0C6'">&#x2205;</xsl:when>
          <!--	# EMPTY SET # emptyset -->
          <xsl:when test="@w:char = 'F0C7'">&#x2229;</xsl:when>
          <!--	# INTERSECTION # intersection -->
          <xsl:when test="@w:char = 'F0C8'">&#x222A;</xsl:when>
          <!--	# UNION	# union -->
          <xsl:when test="@w:char = 'F0C9'">&#x2283;</xsl:when>
          <!--	# SUPERSET OF # propersuperset -->
          <xsl:when test="@w:char = 'F0CA'">&#x2287;</xsl:when>
          <!--	# SUPERSET OF OR EQUAL TO	# reflexsuperset -->
          <xsl:when test="@w:char = 'F0CB'">&#x2284;</xsl:when>
          <!--	# NOT A SUBSET OF	# notsubset -->
          <xsl:when test="@w:char = 'F0CC'">&#x2282;</xsl:when>
          <!--	# SUBSET OF # propersubset -->
          <xsl:when test="@w:char = 'F0CD'">&#x2286;</xsl:when>
          <!--	# SUBSET OF OR EQUAL TO	# reflexsubset -->
          <xsl:when test="@w:char = 'F0CE'">&#x2208;</xsl:when>
          <!--	# ELEMENT OF # element -->
          <xsl:when test="@w:char = 'F0CF'">&#x2209;</xsl:when>
          <!--	# NOT AN ELEMENT OF	# notelement -->
          <xsl:when test="@w:char = 'F0D0'">&#x2220;</xsl:when>
          <!--	# ANGLE	# angle -->
          <xsl:when test="@w:char = 'F0D1'">&#x2207;</xsl:when>
          <!--	# NABLA	# gradient -->
          <xsl:when test="@w:char = 'F0D2'">&#xF6DA;</xsl:when>
          <!--	# REGISTERED SIGN SERIF	# registerserif (CUS) -->
          <xsl:when test="@w:char = 'F0D3'">&#xF6D9;</xsl:when>
          <!--	# COPYRIGHT SIGN SERIF	# copyrightserif (CUS) -->
          <xsl:when test="@w:char = 'F0D4'">&#xF6DB;</xsl:when>
          <!--	# TRADE MARK SIGN SERIF	# trademarkserif (CUS) -->
          <xsl:when test="@w:char = 'F0D5'">&#x220F;</xsl:when>
          <!--	# N-ARY PRODUCT	# product -->
          <xsl:when test="@w:char = 'F0D6'">&#x221A;</xsl:when>
          <!--	# SQUARE ROOT # radical -->
          <xsl:when test="@w:char = 'F0D7'">&#x22C5;</xsl:when>
          <!--	# DOT OPERATOR # dotmath -->
          <xsl:when test="@w:char = 'F0D8'">&#x00AC;</xsl:when>
          <!--	# NOT SIGN # logicalnot -->
          <xsl:when test="@w:char = 'F0D9'">&#x2227;</xsl:when>
          <!--	# LOGICAL AND # logicaland -->
          <xsl:when test="@w:char = 'F0DA'">&#x2228;</xsl:when>
          <!--	# LOGICAL OR # logicalor -->
          <xsl:when test="@w:char = 'F0DB'">&#x21D4;</xsl:when>
          <!--	# LEFT RIGHT DOUBLE ARROW	# arrowdblboth -->
          <xsl:when test="@w:char = 'F0DC'">&#x21D0;</xsl:when>
          <!--	# LEFTWARDS DOUBLE ARROW	# arrowdblleft -->
          <xsl:when test="@w:char = 'F0DD'">&#x21D1;</xsl:when>
          <!--	# UPWARDS DOUBLE ARROW	# arrowdblup -->
          <xsl:when test="@w:char = 'F0DE'">&#x21D2;</xsl:when>
          <!--	# RIGHTWARDS DOUBLE ARROW	# arrowdblright -->
          <xsl:when test="@w:char = 'F0DF'">&#x21D3;</xsl:when>
          <!--	# DOWNWARDS DOUBLE ARROW	# arrowdbldown -->
          <xsl:when test="@w:char = 'F0E0'">&#x25CA;</xsl:when>
          <!--	# LOZENGE # lozenge -->
          <xsl:when test="@w:char = 'F0E1'">&#x2329;</xsl:when>
          <!--	# LEFT-POINTING ANGLE BRACKET	# angleleft -->
          <xsl:when test="@w:char = 'F0E2'">&#xF8E8;</xsl:when>
          <!--	# REGISTERED SIGN SANS SERIF	# registersans (CUS) -->
          <xsl:when test="@w:char = 'F0E3'">&#xF8E9;</xsl:when>
          <!--	# COPYRIGHT SIGN SANS SERIF	# copyrightsans (CUS) -->
          <xsl:when test="@w:char = 'F0E4'">&#xF8EA;</xsl:when>
          <!--	# TRADE MARK SIGN SANS SERIF	# trademarksans (CUS) -->
          <xsl:when test="@w:char = 'F0E5'">&#x2211;</xsl:when>
          <!--	# N-ARY SUMMATION	# summation -->
          <xsl:when test="@w:char = 'F0E6'">&#xF8EB;</xsl:when>
          <!--	# LEFT PAREN TOP	# parenlefttp (CUS) -->
          <xsl:when test="@w:char = 'F0E7'">&#xF8EC;</xsl:when>
          <!--	# LEFT PAREN EXTENDER	# parenleftex (CUS) -->
          <xsl:when test="@w:char = 'F0E8'">&#xF8ED;</xsl:when>
          <!--	# LEFT PAREN BOTTOM	# parenleftbt (CUS) -->
          <xsl:when test="@w:char = 'F0E9'">&#xF8EE;</xsl:when>
          <!--	# LEFT SQUARE BRACKET TOP	# bracketlefttp (CUS) -->
          <xsl:when test="@w:char = 'F0EA'">&#xF8EF;</xsl:when>
          <!--	# LEFT SQUARE BRACKET EXTENDER	# bracketleftex (CUS) -->
          <xsl:when test="@w:char = 'F0EB'">&#xF8F0;</xsl:when>
          <!--	# LEFT SQUARE BRACKET BOTTOM	# bracketleftbt (CUS) -->
          <xsl:when test="@w:char = 'F0EC'">&#xF8F1;</xsl:when>
          <!--	# LEFT CURLY BRACKET TOP	# bracelefttp (CUS) -->
          <xsl:when test="@w:char = 'F0ED'">&#xF8F2;</xsl:when>
          <!--	# LEFT CURLY BRACKET MID	# braceleftmid (CUS) -->
          <xsl:when test="@w:char = 'F0EE'">&#xF8F3;</xsl:when>
          <!--	# LEFT CURLY BRACKET BOTTOM	# braceleftbt (CUS) -->
          <xsl:when test="@w:char = 'F0EF'">&#xF8F4;</xsl:when>
          <!--	# CURLY BRACKET EXTENDER	# braceex (CUS) -->
          <xsl:when test="@w:char = 'F0F1'">&#x232A;</xsl:when>
          <!--	# RIGHT-POINTING ANGLE BRACKET	# angleright -->
          <xsl:when test="@w:char = 'F0F2'">&#x222B;</xsl:when>
          <!--	# INTEGRAL # integral -->
          <xsl:when test="@w:char = 'F0F3'">&#x2320;</xsl:when>
          <!--	# TOP HALF INTEGRAL	# integraltp -->
          <xsl:when test="@w:char = 'F0F4'">&#xF8F5;</xsl:when>
          <!--	# INTEGRAL EXTENDER	# integralex (CUS) -->
          <xsl:when test="@w:char = 'F0F5'">&#x2321;</xsl:when>
          <!--	# BOTTOM HALF INTEGRAL	# integralbt -->
          <xsl:when test="@w:char = 'F0F6'">&#xF8F6;</xsl:when>
          <!--	# RIGHT PAREN TOP	# parenrighttp (CUS) -->
          <xsl:when test="@w:char = 'F0F7'">&#xF8F7;</xsl:when>
          <!--	# RIGHT PAREN EXTENDER	# parenrightex (CUS) -->
          <xsl:when test="@w:char = 'F0F8'">&#xF8F8;</xsl:when>
          <!--	# RIGHT PAREN BOTTOM	# parenrightbt (CUS) -->
          <xsl:when test="@w:char = 'F0F9'">&#xF8F9;</xsl:when>
          <!--	# RIGHT SQUAREBRACKET TOP	# bracketrighttp (CUS) -->
          <xsl:when test="@w:char = 'F0FA'">&#xF8FA;</xsl:when>
          <!--	# RIGHT SQUARE BRACKET EXTENDER	# bracketrightex (CUS) -->
          <xsl:when test="@w:char = 'F0FB'">&#xF8FB;</xsl:when>
          <!--	# RIGHT SQUARE BRACKET BOTTOM	# bracketrightbt (CUS) -->
          <xsl:when test="@w:char = 'F0FC'">&#xF8FC;</xsl:when>
          <!--	# RIGHT CURLY BRACKET TOP	# bracerighttp (CUS) -->
          <xsl:when test="@w:char = 'F0FD'">&#xF8FD;</xsl:when>
          <!--	# RIGHT CURLY BRACKET MID	# bracerightmid (CUS) -->
          <xsl:when test="@w:char = 'F0FE'">&#xF8FE;</xsl:when>
          <!--	# RIGHT CURLY BRACKET BOTTOM	# bracerightbt (CUS) -->
          <xsl:otherwise>
            <!--<Symbol>
              <xsl:value-of select="@w:char"/>
            </Symbol> -->
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:otherwise>
        <span style="font-family:{@w:font};">
          <xsl:value-of select="@w:char"/>
        </span>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <!--NEW TABLE Coding -->
  <xsl:template match="w:tbl" name="table">
    <xsl:variable name="themeName" select="child::w:tblPr/w:tblStyle/@w:val"/>

    <xsl:element name="table">
      <!--<xsl:attribute name="border" select="'1'"/>-->
      <!-- Reading borders from w:tc -->
      <xsl:attribute name="border">
        <!-- For Table Ruler style="border-bottom:1px solid black"-->
        <xsl:choose>
          <xsl:when
            test="
              child::w:tblPr//w:tblBorders/w:bottom[@w:val = 'single'] and child::w:tblPr//w:tblBorders/w:top[@w:val = 'single']
              and child::w:tblPr//w:tblBorders/w:left[@w:val = 'single'] and child::w:tblPr//w:tblBorders/w:right[@w:val = 'single']">
            <xsl:text>1</xsl:text>
          </xsl:when>
          <xsl:when
            test="
              child::w:tblPr//w:tblBorders/w:bottom[@w:val = 'double'] and child::w:tblPr//w:tblBorders/w:top[@w:val = 'double']
              and child::w:tblPr//w:tblBorders/w:left[@w:val = 'double'] and child::w:tblPr//w:tblBorders/w:right[@w:val = 'double']">
            <xsl:text>2</xsl:text>
          </xsl:when>
          <xsl:otherwise>
            <!-- If Table has Theme, check the border inside w:style -->
            <xsl:choose>
              <xsl:when test="string-length($themeName) > 0">
                <xsl:for-each select="/w:document/w:styles/w:style">
                  <xsl:if test="@w:styleId = $themeName">
                    <xsl:if test="child::w:tblPr/w:tblBorders">
                      <xsl:choose>
                        <xsl:when
                          test="
                            child::w:tblPr//w:tblBorders/w:bottom[@w:val = 'single'] and child::w:tblPr//w:tblBorders/w:top[@w:val = 'single']
                            and child::w:tblPr//w:tblBorders/w:left[@w:val = 'single'] and child::w:tblPr//w:tblBorders/w:right[@w:val = 'single']">
                          <xsl:text>1</xsl:text>
                        </xsl:when>
                        <xsl:when
                          test="
                            child::w:tblPr//w:tblBorders/w:bottom[@w:val = 'double'] and child::w:tblPr//w:tblBorders/w:top[@w:val = 'double']
                            and child::w:tblPr//w:tblBorders/w:left[@w:val = 'double'] and child::w:tblPr//w:tblBorders/w:right[@w:val = 'double']">
                          <xsl:text>2</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text>0</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:if>
                  </xsl:if>
                </xsl:for-each>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>0</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>


        <!-- For table ruler ends -->
      </xsl:attribute>
      <!-- Table Border color -->
      <xsl:if test="child::w:tblPr//w:tblBorders or string-length($themeName) > 0">
        <xsl:attribute name="bordercolor">
          <xsl:choose>
            <xsl:when test="child::w:tblPr//w:tblBorders/w:top/@w:color">
              <xsl:text>#</xsl:text>
              <xsl:value-of select="child::w:tblPr//w:tblBorders/w:top/@w:color"/>
            </xsl:when>
            <xsl:when test="child::w:tblPr//w:tblBorders/w:bottom/@w:color">
              <xsl:text>#</xsl:text>
              <xsl:value-of select="child::w:tblPr//w:tblBorders/w:bottom/@w:color"/>
            </xsl:when>
            <xsl:when test="child::w:tblPr//w:tblBorders/w:left/@w:color">
              <xsl:text>#</xsl:text>
              <xsl:value-of select="child::w:tblPr//w:tblBorders/w:left/@w:color"/>
            </xsl:when>
            <xsl:when test="child::w:tblPr//w:tblBorders/w:right/@w:color">
              <xsl:text>#</xsl:text>
              <xsl:value-of select="child::w:tblPr//w:tblBorders/w:right/@w:color"/>
            </xsl:when>
            <xsl:otherwise>
              <!-- If Table has Theme, check the border inside w:style -->
              <xsl:choose>
                <xsl:when test="string-length($themeName) > 0">
                  <xsl:for-each select="/w:document/w:styles/w:style">
                    <xsl:if test="@w:styleId = $themeName">
                      <xsl:if test="child::w:tblPr/w:tblBorders">
                        <xsl:choose>
                          <xsl:when test="child::w:tblPr//w:tblBorders/w:top/@w:color">
                            <xsl:text>#</xsl:text>
                            <xsl:value-of select="child::w:tblPr//w:tblBorders/w:top/@w:color"/>
                          </xsl:when>
                          <xsl:when test="child::w:tblPr//w:tblBorders/w:bottom/@w:color">
                            <xsl:text>#</xsl:text>
                            <xsl:value-of select="child::w:tblPr//w:tblBorders/w:bottom/@w:color"/>
                          </xsl:when>
                          <xsl:when test="child::w:tblPr//w:tblBorders/w:left/@w:color">
                            <xsl:text>#</xsl:text>
                            <xsl:value-of select="child::w:tblPr//w:tblBorders/w:left/@w:color"/>
                          </xsl:when>
                          <xsl:when test="child::w:tblPr//w:tblBorders/w:right/@w:color">
                            <xsl:text>#</xsl:text>
                            <xsl:value-of select="child::w:tblPr//w:tblBorders/w:right/@w:color"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>#000000</xsl:text>
                          </xsl:otherwise>
                        </xsl:choose>
                      </xsl:if>
                    </xsl:if>
                  </xsl:for-each>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>0</xsl:text>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:attribute>
      </xsl:if>
      <!-- Table Bgcolor, for theme tables only -->
      <xsl:if test="string-length($themeName) > 0">
        <xsl:attribute name="bgcolor">
          <xsl:for-each select="/w:document/w:styles/w:style">
            <xsl:if test="@w:styleId = $themeName">
              <xsl:if test="child::w:tcPr/w:shd">
                <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                <!-- Counting the bgcolor value is 6 digit -->
                <xsl:choose>
                  <xsl:when test="string-length($bgcolor) = 6">
                    <xsl:text>#</xsl:text>
                    <xsl:value-of select="$bgcolor"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="$bgcolor"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:if>
            </xsl:if>
          </xsl:for-each>
        </xsl:attribute>
      </xsl:if>
      <!-- Table Bgcolor, for theme tables only -->
      <xsl:attribute name="cellpadding" select="'5'"/>
      <xsl:attribute name="cellspacing" select="'0'"/>

      <!--<tgroup>-->
      <!-- Colgroup -->
      <!--<xsl:attribute name="cols">
          <xsl:value-of select="count(w:tblGrid/w:gridCol)"/>
        </xsl:attribute>
          -->
      <xsl:element name="colgroup">
        <xsl:attribute name="cols">
          <xsl:value-of select="count(w:tblGrid/w:gridCol)"/>
        </xsl:attribute>
        <xsl:for-each select="w:tblGrid/w:gridCol">
          <xsl:element name="col">
            <xsl:attribute name="width">
              <xsl:value-of select="@w:w div 20"/>
              <!--<xsl:value-of select="concat(number(100) div $gridCol, '%')"/>-->
            </xsl:attribute>
          </xsl:element>
        </xsl:for-each>
        <!--<xsl:apply-templates select="w:tblGrid" mode="colspec"/>
            -->
      </xsl:element>
      <!-- THead -->
      <!--<xsl:if test="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
        |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
        |w:tr[descendant::w:pStyle[@w:val = 'AP-TableColumnHead1']]
        |w:tr[descendant::w:pStyle[@w:val = 'CellRowHeader']]">
     
     <xsl:element name="thead">
      <xsl:apply-templates mode="TableHead"
       select="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
       |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
       |w:tr[descendant::w:pStyle[@w:val = 'AP-TableColumnHead1']]
       |w:tr[descendant::w:pStyle[@w:val = 'CellRowHeader']]"/>     
     </xsl:element>
     
    </xsl:if>-->

      <!-- Tbody -->

      <xsl:element name="tbody">

        <xsl:apply-templates/>

      </xsl:element>

      <!--</tgroup>-->

    </xsl:element>
  </xsl:template>
  <xsl:template match="w:tbl-13-May-18-Before-Table-Theme" name="table-13-May-18-Before-Table-Theme">
    <xsl:element name="table">
      <xsl:attribute name="border" select="'1'"/>
      <xsl:attribute name="cellpadding" select="'5'"/>
      <xsl:attribute name="cellspacing" select="'0'"/>
      <!--<tgroup>-->
      <!-- Colgroup -->
      <!--<xsl:attribute name="cols">
          <xsl:value-of select="count(w:tblGrid/w:gridCol)"/>
        </xsl:attribute>
          -->
      <xsl:element name="colgroup">
        <xsl:attribute name="cols">
          <xsl:value-of select="count(w:tblGrid/w:gridCol)"/>
        </xsl:attribute>
        <xsl:for-each select="w:tblGrid/w:gridCol">
          <xsl:element name="cols">
            <xsl:attribute name="width">
              <xsl:value-of select="@w:w div 20"/>
              <!--<xsl:value-of select="concat(number(100) div $gridCol, '%')"/>-->

            </xsl:attribute>
          </xsl:element>
        </xsl:for-each>
        <!--<xsl:apply-templates select="w:tblGrid" mode="colspec"/>
            -->
      </xsl:element>
      <!-- THead -->
      <!--<xsl:if test="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
        |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
        |w:tr[descendant::w:pStyle[@w:val = 'AP-TableColumnHead1']]
        |w:tr[descendant::w:pStyle[@w:val = 'CellRowHeader']]">
     
     <xsl:element name="thead">
      <xsl:apply-templates mode="TableHead"
       select="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
       |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
       |w:tr[descendant::w:pStyle[@w:val = 'AP-TableColumnHead1']]
       |w:tr[descendant::w:pStyle[@w:val = 'CellRowHeader']]"/>     
     </xsl:element>
     
    </xsl:if>-->

      <!-- Tbody -->

      <xsl:element name="tbody">

        <xsl:apply-templates/>

      </xsl:element>

      <!--</tgroup>-->
    </xsl:element>

  </xsl:template>
  <xsl:template match="w:tbl-23-Aug" name="table-23-Aug">
    <xsl:element name="table">
      <xsl:attribute name="border" select="'1'"/>

      <!-- 16-july-17 <tgroup>-->
      <!-- 16-july-17 <xsl:attribute name="cols">
          <xsl:value-of select="count(w:tblGrid/w:gridCol)"/>
        </xsl:attribute>
        <!-\- Colgroup -\->
        <xsl:apply-templates select="w:tblGrid" mode="colspec"/>-->
      <!-- THead -->
      <!--<xsl:if test="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
        |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
        |w:tr[descendant::w:pStyle[@w:val = 'AP-TableColumnHead1']]
        |w:tr[descendant::w:pStyle[@w:val = 'CellRowHeader']]">
     
     <xsl:element name="thead">
      <xsl:apply-templates mode="TableHead"
       select="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
       |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
       |w:tr[descendant::w:pStyle[@w:val = 'AP-TableColumnHead1']]
       |w:tr[descendant::w:pStyle[@w:val = 'CellRowHeader']]"/>     
     </xsl:element>
     
    </xsl:if>-->

      <!-- Tbody -->
      <xsl:element name="tbody">

        <xsl:apply-templates/>

      </xsl:element>

      <!--</tgroup>-->

    </xsl:element>

  </xsl:template>
  <xsl:template match="w:tblOLD">
    <xsl:choose>
      <xsl:when
        test="
          (self::w:tbl/preceding-sibling::w:p[1]/w:pPr/w:pStyle/@w:val = 'TableCaption'
          or self::w:tbl/preceding-sibling::w:p[1]/w:pPr/w:pStyle/@w:val = 'TableCaptionHead'
          and (self::w:tbl/following-sibling::w:p[1]/w:pPr/w:pStyle/@w:val = 'TableSource'
          or self::w:tbl/following-sibling::w:p[1]/w:pPr/w:pStyle/@w:val = 'TableNote'
          or self::w:tbl/following-sibling::w:p[1]/w:pPr/w:pStyle/@w:val = 'TableFootnote'))
          or (not(preceding-sibling::*[1][self::w:p[1][w:pPr/w:pStyle/@w:val = 'TableCaption']])
          or not(preceding-sibling::*[1][self::w:p[1][w:pPr/w:pStyle/@w:val = 'TableCaptionHead']])
          and (self::w:tbl/following-sibling::w:p[1]/w:pPr/w:pStyle/@w:val = 'TableSource'
          or self::w:tbl/following-sibling::w:p[1]/w:pPr/w:pStyle/@w:val = 'TableNote'
          or self::w:tbl/following-sibling::w:p[1]/w:pPr/w:pStyle/@w:val = 'TableFootnote'))">

        <xsl:if
          test="
            self::w:tbl/preceding-sibling::w:p[1]/w:pPr/w:pStyle/@w:val = 'TableCaption'
            or self::w:tbl/preceding-sibling::w:p[1]/w:pPr/w:pStyle/@w:val = 'TableCaptionHead'">
          <xsl:text disable-output-escaping="yes">&#x3C;TABLE-WRAPPER id="</xsl:text>
          <xsl:choose>
            <xsl:when
              test="self::w:tbl/preceding-sibling::w:p[1]/w:r[w:rPr/w:rStyle/@w:val = 'TableNumberChar']">

              <xsl:value-of
                select="
                  concat(lower-case(substring(self::w:tbl/preceding-sibling::w:p[1][w:r/w:rPr/w:rStyle/@w:val = 'TableNumberChar'], 1, 3)),
                  normalize-space(substring-after(self::w:tbl/preceding-sibling::w:p[1]/w:r[w:rPr/w:rStyle/@w:val = 'TableNumberChar'], ' ')))"
              />
            </xsl:when>
            <xsl:when
              test="self::w:tbl/preceding-sibling::w:p[1]/w:r[w:rPr/w:rStyle/@w:val = 'TableNumber']">
              <xsl:value-of
                select="
                  concat(lower-case(substring(self::w:tbl/preceding-sibling::w:p[1][w:r/w:rPr/w:rStyle/@w:val = 'TableNumber'], 1, 3)),
                  normalize-space(substring-after(self::w:tbl/preceding-sibling::w:p[1]/w:r[w:rPr/w:rStyle/@w:val = 'TableNumber'], ' ')))"
              />
            </xsl:when>
          </xsl:choose>
          <xsl:text disable-output-escaping="yes">"&#x3E;</xsl:text>
        </xsl:if>
        <xsl:text disable-output-escaping="yes">&#x3C;table style="width:100%"&#x3E;</xsl:text>

        <xsl:element name="caption">
          <xsl:attribute name="class" select="'TableCaption'"/>
          <xsl:apply-templates
            select="self::w:tbl/preceding-sibling::w:p[1][w:pPr/w:pStyle/@w:val = 'TableCaption']"
            mode="table_moveme"/>
        </xsl:element>
        <xsl:apply-templates select="self::w:tbl/w:tblGrid" mode="colgroup_moveme"/>
        <xsl:apply-templates/>
        <xsl:text disable-output-escaping="yes">&#x3C;/table&#x3E;</xsl:text>


      </xsl:when>

      <xsl:otherwise>
        <table>
          <xsl:apply-templates/>
        </table>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <xsl:template match="w:tblXXXXX" name="tableXXXX">

    <xsl:choose>
      <xsl:when
        test="
          not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
          | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]
          | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'AP-TableCaptionHead']]]
          | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]]
          | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
          | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]])">
        <xsl:variable name="tabtitle" select="self::w:p/w:pPr/w:pStyle/@w:val"/>

        <xsl:element name="table">
          <xsl:attribute name="id">
            <xsl:text>t</xsl:text>
            <xsl:number count="w:tbl" format="1" level="any"/>
          </xsl:attribute>
          <xsl:attribute name="border" select="'1'"/>

          <!--<xsl:element name="tgroup">-->
          <!--<xsl:attribute name="cols">
       <xsl:value-of select="count(w:tblGrid/w:gridCol)"/>
      </xsl:attribute>-->
          <!-- Colgroup -->
          <xsl:apply-templates select="w:tblGrid" mode="colspec"/>
          <!-- THead -->
          <!--<xsl:if test="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
          |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
          |w:tr[descendant::w:pStyle[@w:val = 'TableCaptions']]">
       
       <xsl:element name="thead">         
        <xsl:apply-templates mode="TableHead"
         select="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
         |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
         |w:tr[descendant::w:pStyle[@w:val = 'TableCaptions']]"/>        
       </xsl:element>
       
      </xsl:if>     -->
          <!-- Tbody -->
          <xsl:element name="tbody">

            <!--Panneer Table bookmark code start-->
            <!-- for bookmark open -->
            <xsl:if test="child::w:bookmarkStartX">
              <xsl:for-each select="w:bookmarkStartX">
                <xsl:text disable-output-escaping="yes">&lt;span name="</xsl:text>
                <xsl:value-of select="@w:name"/>
                <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
              </xsl:for-each>
            </xsl:if>
            <xsl:if test="child::w:bookmarkEndX">
              <xsl:if test="not(child::w:bookmarkStartX)">
                <xsl:for-each select="w:bookmarkEndX">
                  <xsl:text disable-output-escaping="yes">&lt;span name="</xsl:text>
                  <xsl:value-of select="@w:name"/>
                  <xsl:text disable-output-escaping="yes">"&gt;</xsl:text>
                </xsl:for-each>
              </xsl:if>
            </xsl:if>
            <!-- bookmark end -->
            <!--Panneer Table bookmark code end-->
            <xsl:apply-templates/>

            <!--Panneer Table bookmark end code start-->
            <xsl:choose>
              <xsl:when test="child::w:bookmarkStartX">
                <xsl:if test="not(child::w:bookmarkEndX)">
                  <xsl:for-each select="w:bookmarkStartX">
                    <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                  </xsl:for-each>
                </xsl:if>
                <xsl:if test="child::w:bookmarkEndX">
                  <xsl:for-each select="w:bookmarkStartX">
                    <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                  </xsl:for-each>
                </xsl:if>
              </xsl:when>
              <xsl:when test="child::w:bookmarkEndX">
                <xsl:for-each select="w:bookmarkEndX">
                  <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
                </xsl:for-each>
              </xsl:when>
            </xsl:choose>
            <!-- bookmark end -->
            <!--Panneer Table bookmark end code start-->
          </xsl:element>

          <!--</xsl:element>-->

        </xsl:element>



        <!--</xsl:element>-->
      </xsl:when>
      <xsl:when
        test="
          preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
          | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]
          | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]]">
        <xsl:text disable-output-escaping="yes">&#x3C;TABLE-WRAPPER ID="</xsl:text>
        <xsl:analyze-string select="$filename"
          regex="([a-zA-Z]+)([_-])([0-9]+)([_-])([a-zA-Z]*)([0-9])([0-9])([0-9])([_-])(.*)">
          <xsl:matching-substring>
            <xsl:value-of
              select="concat(regex-group(1), '-ch', regex-group(6), regex-group(7), regex-group(8), '-untbl')"
            />
          </xsl:matching-substring>
          <xsl:non-matching-substring>
            <xsl:analyze-string select="$filename"
              regex="([a-zA-Z]+)([_-])([0-9]+)([_-])([a-zA-Z]*)([0-9])([0-9])([_-])(.*)">
              <xsl:matching-substring>
                <xsl:value-of
                  select="concat(regex-group(1), '-ch0', regex-group(6), regex-group(7), '-untbl')"
                />
              </xsl:matching-substring>
              <xsl:non-matching-substring>
                <xsl:value-of select="concat(regex-group(1), '-ch00', regex-group(6), '-untbl')"/>
              </xsl:non-matching-substring>
            </xsl:analyze-string>

          </xsl:non-matching-substring>
        </xsl:analyze-string>
        <xsl:number count="w:tbl" level="any" format="001"/>
        <xsl:text disable-output-escaping="yes">" OUTPUT-LABEL="</xsl:text>
        <!--<xsl:value-of select="preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val='TableCaption']]]/w:r[w:rPr/w:rStyle[@w:val = 'TableNumberChar']]"/>-->
        <!--<xsl:value-of select="starts-with($TON, ' ')"/> -->
        <xsl:choose>
          <xsl:when
            test="
              preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]]">
            <xsl:value-of select="'none'"/>
          </xsl:when>
          <xsl:when
            test="
              not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]])">
            <xsl:value-of select="'none'"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="TON2"
              select="
                preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]"/>
            <!--<xsl:analyze-string select="$TON2" regex="([a-zA-Z]+)(\s)(.*)(\.-)(.*)(\s)(.*)">-->
            <xsl:analyze-string select="$TON2" regex="([A-Za-z]*)(\s)([\d]*)(\W)([\d]*)(.*)">
              <xsl:matching-substring>
                <xsl:value-of select="regex-group(1)"/>
              </xsl:matching-substring>
              <xsl:non-matching-substring>
                <xsl:value-of select="'none'"/>
              </xsl:non-matching-substring>
            </xsl:analyze-string>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text disable-output-escaping="yes">" OUTPUT-NUMBER="</xsl:text>
        <!--<xsl:value-of select="preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val='TableCaption']]]/w:r[w:rPr/w:rStyle[@w:val = 'TableNumberChar']]"/>-->
        <xsl:choose>
          <xsl:when
            test="
              preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]]">
            <xsl:value-of select="'none'"/>
          </xsl:when>
          <xsl:when
            test="
              not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]])">
            <xsl:value-of select="'none'"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="TON2"
              select="
                preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]"/>
            <xsl:analyze-string select="$TON2" regex="([A-Za-z]*)(\s)([\d]*)(\W)([\d]*)(.*)">
              <xsl:matching-substring>
                <xsl:value-of select="concat(regex-group(3), regex-group(4), regex-group(5))"/>
              </xsl:matching-substring>
              <xsl:non-matching-substring>
                <xsl:value-of select="'none'"/>
              </xsl:non-matching-substring>
            </xsl:analyze-string>
          </xsl:otherwise>
        </xsl:choose>
        <!--<xsl:value-of select="starts-with($TON2, ' ') and ends-with($TON2, '. ')"/> -->
        <xsl:text disable-output-escaping="yes">" NUMBER="</xsl:text>
        <xsl:choose>
          <xsl:when
            test="
              preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]]">
            <xsl:value-of select="'notnumbered'"/>
          </xsl:when>
          <xsl:when
            test="
              not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]])">
            <xsl:value-of select="'notnumbered'"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="'numbered'"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text disable-output-escaping="yes">"&#x3E;</xsl:text>
        <!-- TabLabel -->
        <xsl:if test="preceding-sibling::*[position() &lt; 4][self::&tablelabel;]">
          <xsl:element name="label">
            <xsl:apply-templates
              select="preceding-sibling::*[position() &lt; 4][self::&tablelabel;]" mode="tablelabel"
            />
          </xsl:element>
        </xsl:if>
        <!-- Caption -->
        <TITLE>
          <xsl:choose>
            <xsl:when
              test="
                preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]">
              <xsl:value-of
                select="
                  preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
                  | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]"
              />
            </xsl:when>
            <xsl:when
              test="
                not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]])"> </xsl:when>
            <xsl:otherwise>
              <xsl:apply-templates
                select="preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]"/>
              <xsl:apply-templates
                select="preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]"
              />
            </xsl:otherwise>
          </xsl:choose>
        </TITLE>

        <xsl:element name="table">

          <tgroup>
            <xsl:attribute name="cols">
              <xsl:value-of select="count(w:tblGrid/w:gridCol)"/>
            </xsl:attribute>
            <!-- Colgroup -->
            <xsl:apply-templates select="w:tblGrid" mode="colspec"/>
            <!-- THead -->
            <!--<xsl:if test="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]|w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]|w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead1']]">
       
       <xsl:element name="thead">
        <xsl:apply-templates mode="TableHead"
         select="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]|w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
         |w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead1']]
         |w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead2']]"/>        
       </xsl:element>
       
      </xsl:if>  -->
            <!-- Tbody -->
            <xsl:element name="tbody">

              <xsl:apply-templates/>

            </xsl:element>

          </tgroup>

        </xsl:element>
      </xsl:when>

      <xsl:when
        test="
          not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]]
          | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
          | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
          | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]])">
        <xsl:text disable-output-escaping="yes">&#x3C;TABLE-WRAPPER ID="</xsl:text>
        <xsl:analyze-string select="$filename"
          regex="([a-zA-Z]+)([_-])([0-9]+)([_-])([a-zA-Z]*)([0-9])([0-9])([0-9])([_-])(.*)">
          <xsl:matching-substring>
            <xsl:value-of
              select="concat(regex-group(1), '-ch', regex-group(6), regex-group(7), regex-group(8), '-untbl')"
            />
          </xsl:matching-substring>
          <xsl:non-matching-substring>
            <xsl:analyze-string select="$filename"
              regex="([a-zA-Z]+)([_-])([0-9]+)([_-])([a-zA-Z]*)([0-9])([0-9])([_-])(.*)">
              <xsl:matching-substring>
                <xsl:value-of
                  select="concat(regex-group(1), '-ch0', regex-group(6), regex-group(7), '-untbl')"
                />
              </xsl:matching-substring>
              <xsl:non-matching-substring>
                <xsl:value-of select="concat(regex-group(1), '-ch00', regex-group(6), '-untbl')"/>
              </xsl:non-matching-substring>
            </xsl:analyze-string>

          </xsl:non-matching-substring>
        </xsl:analyze-string>
        <xsl:number count="w:tbl" level="any" format="001"/>
        <xsl:text disable-output-escaping="yes">" OUTPUT-LABEL="</xsl:text>
        <!--<xsl:value-of select="preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val='TableCaption']]]/w:r[w:rPr/w:rStyle[@w:val = 'TableNumberChar']]"/>-->
        <!--<xsl:value-of select="starts-with($TON, ' ')"/> -->
        <xsl:choose>
          <xsl:when
            test="
              preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]">
            <xsl:value-of select="'none'"/>
          </xsl:when>
          <xsl:when
            test="
              not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'AP-TableCaptionHead']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]])">
            <xsl:value-of select="'none'"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="TON2"
              select="
                preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'AP-TableCaptionHead']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]"/>
            <!--<xsl:analyze-string select="$TON2" regex="([a-zA-Z]+)(\s)(.*)(\.-)(.*)(\s)(.*)">-->
            <xsl:analyze-string select="$TON2" regex="([A-Za-z]*)(\s)([\d]*)(-)([\d]*)(.*)">
              <xsl:matching-substring>
                <xsl:value-of select="regex-group(1)"/>
              </xsl:matching-substring>
              <xsl:non-matching-substring>
                <xsl:value-of select="'none'"/>
              </xsl:non-matching-substring>
            </xsl:analyze-string>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text disable-output-escaping="yes">" OUTPUT-NUMBER="</xsl:text>
        <!--<xsl:value-of select="preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val='TableCaption']]]/w:r[w:rPr/w:rStyle[@w:val = 'TableNumberChar']]"/>-->
        <xsl:choose>
          <xsl:when
            test="preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]] | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]">
            <xsl:value-of select="'none'"/>
          </xsl:when>
          <xsl:when
            test="
              not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]] | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'AP-TableCaptionHead']]] | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]])">
            <xsl:value-of select="'none'"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="TON2"
              select="
                preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]] | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'AP-TableCaptionHead']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]] | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]] | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]"/>
            <xsl:analyze-string select="$TON2" regex="([A-Za-z]*)(\s)([\d]*)(\W)([\d]*)(.*)">
              <xsl:matching-substring>
                <xsl:value-of select="concat(regex-group(3), regex-group(4), regex-group(5))"/>
              </xsl:matching-substring>
              <xsl:non-matching-substring>
                <xsl:value-of select="'none'"/>
              </xsl:non-matching-substring>
            </xsl:analyze-string>
          </xsl:otherwise>
        </xsl:choose>
        <!--<xsl:value-of select="starts-with($TON2, ' ') and ends-with($TON2, '. ')"/> -->
        <xsl:text disable-output-escaping="yes">" NUMBER="</xsl:text>
        <xsl:choose>
          <xsl:when
            test="preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]] | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]">
            <xsl:value-of select="'notnumbered'"/>
          </xsl:when>
          <xsl:when
            test="
              not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
              | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]])">
            <xsl:value-of select="'notnumbered'"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="'numbered'"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text disable-output-escaping="yes">"&#x3E;</xsl:text>
        <!-- TabLabel -->
        <xsl:if test="preceding-sibling::*[position() &lt; 4][self::&tablelabel;]">
          <xsl:element name="label">
            <xsl:apply-templates
              select="preceding-sibling::*[position() &lt; 4][self::&tablelabel;]" mode="tablelabel"
            />
          </xsl:element>
        </xsl:if>
        <!-- Caption -->
        <TITLE>
          <xsl:choose>
            <xsl:when
              test="
                preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'AP-TableCaptionHead']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]">
              <xsl:value-of
                select="
                  preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UnnumbdTableCaption']]]
                  | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'AP-TableCaptionHead']]]
                  | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'UN-TableCaption']]]"
              />
            </xsl:when>
            <xsl:when
              test="
                not(preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'FigureLegend']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]
                | preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'BoxTitle']]])"> </xsl:when>

            <xsl:otherwise>
              <xsl:apply-templates
                select="preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaption']]]"/>
              <xsl:apply-templates
                select="preceding-sibling::*[1][self::w:p[w:pPr/w:pStyle[@w:val = 'TableCaptionHead']]]"
              />
            </xsl:otherwise>
          </xsl:choose>
        </TITLE>

        <xsl:element name="table">

          <tgroup>
            <xsl:attribute name="cols">
              <xsl:value-of select="count(w:tblGrid/w:gridCol)"/>
            </xsl:attribute>
            <!-- Colgroup -->
            <xsl:apply-templates select="w:tblGrid" mode="colspec"/>
            <!-- THead -->
            <!--<xsl:if test="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
          |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
          |w:tr[descendant::w:pStyle[@w:val = 'AP-TableColumnHead1']]
          |w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead1']]">
       
       <xsl:element name="thead">
        <xsl:apply-templates mode="TableHead"
         select="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
         |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
         |w:tr[descendant::w:pStyle[@w:val = 'AP-TableColumnHead1']]
         |w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead1']]"/>        
       </xsl:element>
       
      </xsl:if>-->

            <!-- Tbody -->
            <xsl:element name="tbody">

              <xsl:apply-templates/>

            </xsl:element>

          </tgroup>

        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:element name="table">

          <tgroup>
            <xsl:attribute name="cols">
              <xsl:value-of select="count(w:tblGrid/w:gridCol)"/>
            </xsl:attribute>
            <!-- Colgroup -->
            <xsl:apply-templates select="w:tblGrid" mode="colspec"/>
            <!-- THead -->
            <!--<xsl:if test="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
        |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
        |w:tr[descendant::w:pStyle[@w:val = 'AP-TableColumnHead1']]
        |w:tr[descendant::w:pStyle[@w:val = 'CellRowHeader']]">
     
     <xsl:element name="thead">
      <xsl:apply-templates mode="TableHead"
       select="w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
       |w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
       |w:tr[descendant::w:pStyle[@w:val = 'AP-TableColumnHead1']]
       |w:tr[descendant::w:pStyle[@w:val = 'CellRowHeader']]"/>     
     </xsl:element>
     
    </xsl:if>-->

            <!-- Tbody -->
            <xsl:element name="tbody">

              <xsl:apply-templates/>

            </xsl:element>

          </tgroup>

        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <xsl:template match="w:tr">

    <xsl:element name="tr">
      <xsl:apply-templates/>

    </xsl:element>

  </xsl:template>
  <xsl:template match="w:tblGridX" mode="colspec">
    <xsl:apply-templates/>
  </xsl:template>
  <!-- commented on 23-aug-17 -->
  <!--<xsl:template match="w:tblGrid/w:gridCol" mode="colspec">
    
    <xsl:element name="colgroup">
      <xsl:element name="col">
        <!-\-<xsl:attribute name="colnum">c<xsl:value-of select="position()"/>
      </xsl:attribute>
      <xsl:attribute name="colname">col<xsl:value-of select="position()"/>
      </xsl:attribute>-\->
      </xsl:element>
    </xsl:element>
    
  </xsl:template>-->
  <xsl:template match="w:tblGrid/w:gridCol" mode="colspec">

    <!--<xsl:element name="colgroup">-->
    <xsl:element name="col">
      <!--<xsl:attribute name="colnum">c<xsl:value-of select="position()"/>
      </xsl:attribute>
      <xsl:attribute name="colname">col<xsl:value-of select="position()"/>
      </xsl:attribute>-->
    </xsl:element>
    <!--</xsl:element>-->
  </xsl:template>


  <xsl:template match="w:tblGrid" mode="colgroup_moveme">
    <xsl:variable name="colcount" select="count(child::w:gridCol)"/>
    <xsl:for-each select="child::w:gridCol">
      <xsl:element name="colgroup">
        <xsl:attribute name="width">
          <xsl:value-of select="concat(number(100) div $colcount, '%')"/>
          <!--<colgroup width="{concat(number(100) div $colcount, '%')}"/>-->
        </xsl:attribute>
        <!--<xsl:element name="br"/>-->
      </xsl:element>

    </xsl:for-each>
  </xsl:template>

  <xsl:template match="w:tab">
    <xsl:text>	</xsl:text>
    <xsl:apply-templates/>
  </xsl:template>

  <xsl:template match="w:t/text()">
    <xsl:value-of select="."/>
  </xsl:template>
  <!--  <xsl:template match="text()"/>-->


  <!-- @@@@@@@@@@@@@@@ Hari text box remove at any problem @@@@@@@@@@@@@@@@@ -->

  <!-- @@@@@@@@@@@@@@@ Hari text box remove at any problem @@@@@@@@@@@@@@@@@ -->

  <xsl:character-map name="Ascii2Unicode">
    <xsl:output-character character="┐" string="&amp;#x2510;"/>
    <xsl:output-character character="╕" string="&amp;#x2556;"/>
    <xsl:output-character character="╖" string="&amp;#x2557;"/>
    <xsl:output-character character="╗" string="&amp;#x2555;"/>
    <xsl:output-character character="┌" string="&amp;#x250C;"/>
    <xsl:output-character character="╒" string="&amp;#x2554;"/>
    <xsl:output-character character="╓" string="&amp;#x2553;"/>
    <xsl:output-character character="╔" string="&amp;#x2552;"/>
    <xsl:output-character character="─" string="&amp;#x2500;"/>
    <xsl:output-character character="═" string="&amp;#x2550;"/>
    <xsl:output-character character="┬" string="&amp;#x252C;"/>
    <xsl:output-character character="╥" string="&amp;#x2564;"/>
    <xsl:output-character character="╤" string="&amp;#x2566;"/>
    <xsl:output-character character="╦" string="&amp;#x2565;"/>
    <xsl:output-character character="┴" string="&amp;#x2534;"/>
    <xsl:output-character character="╨" string="&amp;#x2567;"/>
    <xsl:output-character character="╧" string="&amp;#x2569;"/>
    <xsl:output-character character="╩" string="&amp;#x2568;"/>
    <xsl:output-character character="┘" string="&amp;#x2518;"/>
    <xsl:output-character character="╛" string="&amp;#x255D;"/>
    <xsl:output-character character="╜" string="&amp;#x255C;"/>
    <xsl:output-character character="╝" string="&amp;#x255B;"/>
    <xsl:output-character character="└" string="&amp;#x2514;"/>
    <xsl:output-character character="╘" string="&amp;#x2559;"/>
    <xsl:output-character character="╙" string="&amp;#x255A;"/>
    <xsl:output-character character="╚" string="&amp;#x2558;"/>
    <xsl:output-character character="│" string="&amp;#x2502;"/>
    <xsl:output-character character="║" string="&amp;#x2551;"/>
    <xsl:output-character character="┼" string="&amp;#x253C;"/>
    <xsl:output-character character="╪" string="&amp;#x256A;"/>
    <xsl:output-character character="╫" string="&amp;#x256C;"/>
    <xsl:output-character character="╬" string="&amp;#x256B;"/>
    <xsl:output-character character="┤" string="&amp;#x2524;"/>
    <xsl:output-character character="╡" string="&amp;#x2561;"/>
    <xsl:output-character character="╢" string="&amp;#x2563;"/>
    <xsl:output-character character="╣" string="&amp;#x2562;"/>
    <xsl:output-character character="├" string="&amp;#x251C;"/>
    <xsl:output-character character="╞" string="&amp;#x255E;"/>
    <xsl:output-character character="╟" string="&amp;#x2560;"/>
    <xsl:output-character character="╠" string="&amp;#x255F;"/>
    <!-- isocyr1map.xsl -->
    <xsl:output-character character="а" string="&amp;#x0430;"/>
    <xsl:output-character character="А" string="&amp;#x0410;"/>
    <xsl:output-character character="б" string="&amp;#x0431;"/>
    <xsl:output-character character="Б" string="&amp;#x0411;"/>
    <xsl:output-character character="ч" string="&amp;#x0447;"/>
    <xsl:output-character character="Ч" string="&amp;#x0427;"/>
    <xsl:output-character character="д" string="&amp;#x0434;"/>
    <xsl:output-character character="Д" string="&amp;#x0414;"/>
    <xsl:output-character character="э" string="&amp;#x044D;"/>
    <xsl:output-character character="Э" string="&amp;#x042D;"/>
    <xsl:output-character character="ф" string="&amp;#x0444;"/>
    <xsl:output-character character="Ф" string="&amp;#x0424;"/>
    <xsl:output-character character="г" string="&amp;#x0433;"/>
    <xsl:output-character character="Г" string="&amp;#x0413;"/>
    <xsl:output-character character="ъ" string="&amp;#x044A;"/>
    <xsl:output-character character="Ъ" string="&amp;#x042A;"/>
    <xsl:output-character character="и" string="&amp;#x0438;"/>
    <xsl:output-character character="И" string="&amp;#x0418;"/>
    <xsl:output-character character="е" string="&amp;#x0435;"/>
    <xsl:output-character character="Е" string="&amp;#x0415;"/>
    <xsl:output-character character="ё" string="&amp;#x0451;"/>
    <xsl:output-character character="Ё" string="&amp;#x0401;"/>
    <xsl:output-character character="й" string="&amp;#x0439;"/>
    <xsl:output-character character="Й" string="&amp;#x0419;"/>
    <xsl:output-character character="к" string="&amp;#x043A;"/>
    <xsl:output-character character="К" string="&amp;#x041A;"/>
    <xsl:output-character character="х" string="&amp;#x0445;"/>
    <xsl:output-character character="Х" string="&amp;#x0425;"/>
    <xsl:output-character character="л" string="&amp;#x043B;"/>
    <xsl:output-character character="Л" string="&amp;#x041B;"/>
    <xsl:output-character character="м" string="&amp;#x043C;"/>
    <xsl:output-character character="М" string="&amp;#x041C;"/>
    <xsl:output-character character="н" string="&amp;#x043D;"/>
    <xsl:output-character character="Н" string="&amp;#x041D;"/>
    <xsl:output-character character="№" string="&amp;#x2116;"/>
    <xsl:output-character character="о" string="&amp;#x043E;"/>
    <xsl:output-character character="О" string="&amp;#x041E;"/>
    <xsl:output-character character="п" string="&amp;#x043F;"/>
    <xsl:output-character character="П" string="&amp;#x041F;"/>
    <xsl:output-character character="р" string="&amp;#x0440;"/>
    <xsl:output-character character="Р" string="&amp;#x0420;"/>
    <xsl:output-character character="с" string="&amp;#x0441;"/>
    <xsl:output-character character="С" string="&amp;#x0421;"/>
    <xsl:output-character character="щ" string="&amp;#x0449;"/>
    <xsl:output-character character="Щ" string="&amp;#x0429;"/>
    <xsl:output-character character="ш" string="&amp;#x0448;"/>
    <xsl:output-character character="Ш" string="&amp;#x0428;"/>
    <xsl:output-character character="ь" string="&amp;#x044C;"/>
    <xsl:output-character character="Ь" string="&amp;#x042C;"/>
    <xsl:output-character character="т" string="&amp;#x0442;"/>
    <xsl:output-character character="Т" string="&amp;#x0422;"/>
    <xsl:output-character character="ц" string="&amp;#x0446;"/>
    <xsl:output-character character="Ц" string="&amp;#x0426;"/>
    <xsl:output-character character="у" string="&amp;#x0443;"/>
    <xsl:output-character character="У" string="&amp;#x0423;"/>
    <xsl:output-character character="в" string="&amp;#x0432;"/>
    <xsl:output-character character="В" string="&amp;#x0412;"/>
    <xsl:output-character character="я" string="&amp;#x044F;"/>
    <xsl:output-character character="Я" string="&amp;#x042F;"/>
    <xsl:output-character character="ы" string="&amp;#x044B;"/>
    <xsl:output-character character="Ы" string="&amp;#x042B;"/>
    <xsl:output-character character="ю" string="&amp;#x044E;"/>
    <xsl:output-character character="Ю" string="&amp;#x042E;"/>
    <xsl:output-character character="з" string="&amp;#x0437;"/>
    <xsl:output-character character="З" string="&amp;#x0417;"/>
    <xsl:output-character character="ж" string="&amp;#x0436;"/>
    <xsl:output-character character="Ж" string="&amp;#x0416;"/>
    <!-- isocyr2map.xsl -->
    <xsl:output-character character="ђ" string="&amp;#x0452;"/>
    <xsl:output-character character="Ђ" string="&amp;#x0402;"/>
    <xsl:output-character character="ѕ" string="&amp;#x0455;"/>
    <xsl:output-character character="Ѕ" string="&amp;#x0405;"/>
    <xsl:output-character character="џ" string="&amp;#x045F;"/>
    <xsl:output-character character="Џ" string="&amp;#x040F;"/>
    <xsl:output-character character="ѓ" string="&amp;#x0453;"/>
    <xsl:output-character character="Ѓ" string="&amp;#x0403;"/>
    <xsl:output-character character="і" string="&amp;#x0456;"/>
    <xsl:output-character character="І" string="&amp;#x0406;"/>
    <xsl:output-character character="ј" string="&amp;#x0458;"/>
    <xsl:output-character character="Ј" string="&amp;#x0408;"/>
    <xsl:output-character character="є" string="&amp;#x0454;"/>
    <xsl:output-character character="Є" string="&amp;#x0404;"/>
    <xsl:output-character character="ќ" string="&amp;#x045C;"/>
    <xsl:output-character character="Ќ" string="&amp;#x040C;"/>
    <xsl:output-character character="љ" string="&amp;#x0459;"/>
    <xsl:output-character character="Љ" string="&amp;#x0409;"/>
    <xsl:output-character character="њ" string="&amp;#x045A;"/>
    <xsl:output-character character="Њ" string="&amp;#x040A;"/>
    <xsl:output-character character="ћ" string="&amp;#x045B;"/>
    <xsl:output-character character="Ћ" string="&amp;#x040B;"/>
    <xsl:output-character character="ў" string="&amp;#x045E;"/>
    <xsl:output-character character="Ў" string="&amp;#x040E;"/>
    <xsl:output-character character="ї" string="&amp;#x0457;"/>
    <xsl:output-character character="Ї" string="&amp;#x0407;"/>
    <!-- isodiamap.xsl -->
    <xsl:output-character character="´" string="&amp;#x00B4;"/>
    <xsl:output-character character="˘" string="&amp;#x02D8;"/>
    <xsl:output-character character="ˇ" string="&amp;#x02C7;"/>
    <xsl:output-character character="¸" string="&amp;#x00B8;"/>
    <xsl:output-character character="ˆ" string="&amp;#x2218;"/>
    <xsl:output-character character="˝" string="&amp;#x02DD;"/>
    <xsl:output-character character="¨" string="&amp;#x00A8;"/>
    <xsl:output-character character="˙" string="&amp;#x02D9;"/>
    <!--U00060 grave-->
    <xsl:output-character character="¯" string="&amp;#x00AF;"/>
    <xsl:output-character character="˛" string="&amp;#x02DB;"/>
    <xsl:output-character character="˚" string="&amp;#x02DA;"/>
    <xsl:output-character character="˜" string="&amp;#x007E;"/>
    <xsl:output-character character="¨" string="&amp;#x00A8;"/>
    <!-- isolat1map.xsl -->
    <xsl:output-character character="á" string="&amp;#x00E1;"/>
    <xsl:output-character character="Á" string="&amp;#x00C1;"/>
    <xsl:output-character character="â" string="&amp;#x00E2;"/>
    <xsl:output-character character="Â" string="&amp;#x00C2;"/>
    <xsl:output-character character="æ" string="&amp;#x00E6;"/>
    <xsl:output-character character="Æ" string="&amp;#x00C6;"/>
    <xsl:output-character character="à" string="&amp;#x00E0;"/>
    <xsl:output-character character="À" string="&amp;#x00C0;"/>
    <xsl:output-character character="å" string="&amp;#x00E5;"/>
    <xsl:output-character character="Å" string="&amp;#x00C5;"/>
    <xsl:output-character character="ã" string="&amp;#x00E3;"/>
    <xsl:output-character character="Ã" string="&amp;#x00C3;"/>
    <xsl:output-character character="ä" string="&amp;#x00E4;"/>
    <xsl:output-character character="Ä" string="&amp;#x00C4;"/>
    <xsl:output-character character="ç" string="&amp;#x00E7;"/>
    <xsl:output-character character="Ç" string="&amp;#x00C7;"/>
    <xsl:output-character character="é" string="&amp;#x00E9;"/>
    <xsl:output-character character="É" string="&amp;#x00C9;"/>
    <xsl:output-character character="ê" string="&amp;#x00EA;"/>
    <xsl:output-character character="Ê" string="&amp;#x00CA;"/>
    <xsl:output-character character="è" string="&amp;#x00E8;"/>
    <xsl:output-character character="È" string="&amp;#x00C8;"/>
    <xsl:output-character character="ð" string="&amp;#x00D0;"/>
    <xsl:output-character character="Ð" string="&amp;#x00F0;"/>
    <xsl:output-character character="ë" string="&amp;#x00EB;"/>
    <xsl:output-character character="Ë" string="&amp;#x00CB;"/>
    <xsl:output-character character="í" string="&amp;#x00ED;"/>
    <xsl:output-character character="Í" string="&amp;#x00CD;"/>
    <xsl:output-character character="î" string="&amp;#x00EE;"/>
    <xsl:output-character character="Î" string="&amp;#x00CE;"/>
    <xsl:output-character character="ì" string="&amp;#x00EC;"/>
    <xsl:output-character character="Ì" string="&amp;#x00CC;"/>
    <xsl:output-character character="ï" string="&amp;#x00EF;"/>
    <xsl:output-character character="Ï" string="&amp;#x00CF;"/>
    <xsl:output-character character="ñ" string="&amp;#x00F1;"/>
    <xsl:output-character character="Ñ" string="&amp;#x00D1;"/>
    <xsl:output-character character="ó" string="&amp;#x00F3;"/>
    <xsl:output-character character="Ó" string="&amp;#x00D3;"/>
    <xsl:output-character character="ô" string="&amp;#x00F4;"/>
    <xsl:output-character character="Ô" string="&amp;#x00D4;"/>
    <xsl:output-character character="ò" string="&amp;#x00F2;"/>
    <xsl:output-character character="Ò" string="&amp;#x00D2;"/>
    <xsl:output-character character="ø" string="&amp;#x2298;"/>
    <xsl:output-character character="Ø" string="&amp;#x00D8;"/>
    <xsl:output-character character="õ" string="&amp;#x00F5;"/>
    <xsl:output-character character="Õ" string="&amp;#x00D5;"/>
    <xsl:output-character character="ö" string="&amp;#x00F6;"/>
    <xsl:output-character character="Ö" string="&amp;#x00D6;"/>
    <xsl:output-character character="ß" string="&amp;#x00DF;"/>
    <xsl:output-character character="þ" string="&amp;#x00FE;"/>
    <xsl:output-character character="Þ" string="&amp;#x00DE;"/>
    <xsl:output-character character="ú" string="&amp;#x00FA;"/>
    <xsl:output-character character="Ú" string="&amp;#x00DA;"/>
    <xsl:output-character character="û" string="&amp;#x00DB;"/>
    <xsl:output-character character="Û" string="&amp;#x00FB;"/>
    <xsl:output-character character="ù" string="&amp;#x00F9;"/>
    <xsl:output-character character="Ù" string="&amp;#x00D9;"/>
    <xsl:output-character character="ü" string="&amp;#x00FC;"/>
    <xsl:output-character character="Ü" string="&amp;#x00DC;"/>
    <xsl:output-character character="ý" string="&amp;#x00FD;"/>
    <xsl:output-character character="Ý" string="&amp;#x00DD;"/>
    <xsl:output-character character="ÿ" string="&amp;#x00FF;"/>
    <!-- isolat2map.xsl -->
    <xsl:output-character character="ă" string="&amp;#x0103;"/>
    <xsl:output-character character="Ă" string="&amp;#x0102;"/>
    <xsl:output-character character="ā" string="&amp;#x0101;"/>
    <xsl:output-character character="Ā" string="&amp;#x0100;"/>
    <xsl:output-character character="ą" string="&amp;#x0105;"/>
    <xsl:output-character character="Ą" string="&amp;#x0104;"/>
    <xsl:output-character character="ć" string="&amp;#x0107;"/>
    <xsl:output-character character="Ć" string="&amp;#x0106;"/>
    <xsl:output-character character="č" string="&amp;#x010D;"/>
    <xsl:output-character character="Č" string="&amp;#x010C;"/>
    <xsl:output-character character="ĉ" string="&amp;#x0109;"/>
    <xsl:output-character character="Ĉ" string="&amp;#x0108;"/>
    <xsl:output-character character="ċ" string="&amp;#x00B7;"/>
    <xsl:output-character character="Ċ" string="&amp;#x010A;"/>
    <xsl:output-character character="ď" string="&amp;#x010F;"/>
    <xsl:output-character character="Ď" string="&amp;#x010E;"/>
    <xsl:output-character character="đ" string="&amp;#x0111;"/>
    <xsl:output-character character="Đ" string="&amp;#x0110;"/>
    <xsl:output-character character="ě" string="&amp;#x011B;"/>
    <xsl:output-character character="Ě" string="&amp;#x011A;"/>
    <xsl:output-character character="ė" string="&amp;#x0117;"/>
    <xsl:output-character character="Ė" string="&amp;#x0116;"/>
    <xsl:output-character character="ē" string="&amp;#x0113;"/>
    <xsl:output-character character="Ē" string="&amp;#x0112;"/>
    <xsl:output-character character="ŋ" string="&amp;#x014B;"/>
    <xsl:output-character character="Ŋ" string="&amp;#x014A;"/>
    <xsl:output-character character="ę" string="&amp;#x0119;"/>
    <xsl:output-character character="Ę" string="&amp;#x0118;"/>
    <xsl:output-character character="ǵ" string="&amp;#x01F5;"/>
    <xsl:output-character character="ğ" string="&amp;#x011F;"/>
    <xsl:output-character character="Ğ" string="&amp;#x011E;"/>
    <xsl:output-character character="Ģ" string="&amp;#x0122;"/>
    <xsl:output-character character="ĝ" string="&amp;#x011D;"/>
    <xsl:output-character character="Ĝ" string="&amp;#x011C;"/>
    <xsl:output-character character="ġ" string="&amp;#x0121;"/>
    <xsl:output-character character="Ġ" string="&amp;#x0120;"/>
    <xsl:output-character character="ĥ" string="&amp;#x0125;"/>
    <xsl:output-character character="Ĥ" string="&amp;#x0124;"/>
    <xsl:output-character character="ħ" string="&amp;#x0127;"/>
    <xsl:output-character character="Ħ" string="&amp;#x0126;"/>
    <xsl:output-character character="İ" string="&amp;#x0130;"/>
    <xsl:output-character character="ĳ" string="&amp;#x0133;"/>
    <xsl:output-character character="Ĳ" string="&amp;#x0132;"/>
    <xsl:output-character character="ī" string="&amp;#x012B;"/>
    <xsl:output-character character="Ī" string="&amp;#x012A;"/>
    <xsl:output-character character="ı" string="&amp;#x0131;"/>
    <xsl:output-character character="į" string="&amp;#x012F;"/>
    <xsl:output-character character="Į" string="&amp;#x012E;"/>
    <xsl:output-character character="ĩ" string="&amp;#x0129;"/>
    <xsl:output-character character="Ĩ" string="&amp;#x0128;"/>
    <xsl:output-character character="ĵ" string="&amp;#x0135;"/>
    <xsl:output-character character="Ĵ" string="&amp;#x0134;"/>
    <xsl:output-character character="ķ" string="&amp;#x0137;"/>
    <xsl:output-character character="Ķ" string="&amp;#x0136;"/>
    <xsl:output-character character="ĸ" string="&amp;#x0138;"/>
    <xsl:output-character character="ĺ" string="&amp;#x013A;"/>
    <xsl:output-character character="Ĺ" string="&amp;#x0139;"/>
    <xsl:output-character character="ľ" string="&amp;#x013E;"/>
    <xsl:output-character character="Ľ" string="&amp;#x013D;"/>
    <xsl:output-character character="ļ" string="&amp;#x013C;"/>
    <xsl:output-character character="Ļ" string="&amp;#x013B;"/>
    <xsl:output-character character="ŀ" string="&amp;#x0140;"/>
    <xsl:output-character character="Ŀ" string="&amp;#x013F;"/>
    <xsl:output-character character="ł" string="&amp;#x0142;"/>
    <xsl:output-character character="Ł" string="&amp;#x0141;"/>
    <xsl:output-character character="ń" string="&amp;#x0144;"/>
    <xsl:output-character character="Ń" string="&amp;#x0143;"/>
    <xsl:output-character character="ŉ" string="&amp;#x0149;"/>
    <xsl:output-character character="ň" string="&amp;#x0148;"/>
    <xsl:output-character character="Ň" string="&amp;#x0147;"/>
    <xsl:output-character character="ņ" string="&amp;#x0146;"/>
    <xsl:output-character character="Ņ" string="&amp;#x0145;"/>
    <xsl:output-character character="ő" string="&amp;#x0151;"/>
    <xsl:output-character character="Ő" string="&amp;#x0150;"/>
    <xsl:output-character character="œ" string="&amp;#x0153;"/>
    <xsl:output-character character="Œ" string="&amp;#x0152;"/>
    <xsl:output-character character="ō" string="&amp;#x014D;"/>
    <xsl:output-character character="Ō" string="&amp;#x014C;"/>
    <xsl:output-character character="ŕ" string="&amp;#x0155;"/>
    <xsl:output-character character="Ŕ" string="&amp;#x0154;"/>
    <xsl:output-character character="ř" string="&amp;#x0159;"/>
    <xsl:output-character character="Ř" string="&amp;#x0158;"/>
    <xsl:output-character character="ŗ" string="&amp;#x0157;"/>
    <xsl:output-character character="Ŗ" string="&amp;#x0156;"/>
    <xsl:output-character character="ś" string="&amp;#x015B;"/>
    <xsl:output-character character="Ś" string="&amp;#x015A;"/>
    <xsl:output-character character="š" string="&amp;#x0161;"/>
    <xsl:output-character character="Š" string="&amp;#x0160;"/>
    <xsl:output-character character="ş" string="&amp;#x015F;"/>
    <xsl:output-character character="Ş" string="&amp;#x015E;"/>
    <xsl:output-character character="ŝ" string="&amp;#x015D;"/>
    <xsl:output-character character="Ŝ" string="&amp;#x015C;"/>
    <xsl:output-character character="ť" string="&amp;#x0165;"/>
    <xsl:output-character character="Ť" string="&amp;#x0164;"/>
    <xsl:output-character character="ţ" string="&amp;#x0163;"/>
    <xsl:output-character character="Ţ" string="&amp;#x0162;"/>
    <xsl:output-character character="ŧ" string="&amp;#x0167;"/>
    <xsl:output-character character="Ŧ" string="&amp;#x0166;"/>
    <xsl:output-character character="ŭ" string="&amp;#x016D;"/>
    <xsl:output-character character="Ŭ" string="&amp;#x016C;"/>
    <xsl:output-character character="ű" string="&amp;#x0171;"/>
    <xsl:output-character character="Ű" string="&amp;#x0170;"/>
    <xsl:output-character character="ū" string="&amp;#x016B;"/>
    <xsl:output-character character="Ū" string="&amp;#x016A;"/>
    <xsl:output-character character="ų" string="&amp;#x0173;"/>
    <xsl:output-character character="Ų" string="&amp;#x0172;"/>
    <xsl:output-character character="ů" string="&amp;#x016F;"/>
    <xsl:output-character character="Ů" string="&amp;#x016E;"/>
    <xsl:output-character character="ũ" string="&amp;#x0169;"/>
    <xsl:output-character character="Ũ" string="&amp;#x0168;"/>
    <xsl:output-character character="ŵ" string="&amp;#x0175;"/>
    <xsl:output-character character="Ŵ" string="&amp;#x0174;"/>
    <xsl:output-character character="ŷ" string="&amp;#x0177;"/>
    <xsl:output-character character="Ŷ" string="&amp;#x0176;"/>
    <xsl:output-character character="Ÿ" string="&amp;#x0178;"/>
    <xsl:output-character character="ź" string="&amp;#x017A;"/>
    <xsl:output-character character="Ź" string="&amp;#x0179;"/>
    <xsl:output-character character="ž" string="&amp;#x017E;"/>
    <xsl:output-character character="Ž" string="&amp;#x017D;"/>
    <xsl:output-character character="ż" string="&amp;#x017C;"/>
    <xsl:output-character character="Ż" string="&amp;#x017B;"/>
    <!-- isonummap.xsl -->
    <!--U00026 amp-->
    <xsl:output-character character="&amp;" string="&amp;#x0026;"/>
    <xsl:output-character character="‘" string="&amp;#x2018;"/>
    <xsl:output-character character="’" string="&amp;#x2019;"/>
    <xsl:output-character character="‧" string="&amp;#x2027;"/>
    <!--<xsl:output-character character="'" string="&amp;#x0027;"/>-->
    <xsl:output-character character="*" string="&amp;#x002A;"/>
    <xsl:output-character character="¦" string="&amp;#x00A6;"/>
    <!--U0005C bsol-->
    <xsl:output-character character="¢" string="&amp;#x00A2;"/>
    <!--U0003A colon-->
    <!--U0002C comma-->
    <!--U00040 commat-->
    <xsl:output-character character="©" string="&amp;#x00A9;"/>
    <xsl:output-character character="¤" string="&amp;#x00A4;"/>
    <xsl:output-character character="↓" string="&amp;#x2193;"/>
    <xsl:output-character character="°" string="&amp;#x00B0;"/>
    <xsl:output-character character="÷" string="&amp;#x00F7;"/>
    <!--U00024 dollar-->
    <!--U0003D equals-->
    <!--<xsl:output-character character="=" string="&amp;#x003D;"/>-->
    <!--U00021 excl-->
    <xsl:output-character character="½" string="&amp;#x00BD;"/>
    <xsl:output-character character="¼" string="&amp;#x00BC;"/>
    <xsl:output-character character="⅛" string="&amp;#x215B;"/>
    <xsl:output-character character="¾" string="&amp;#x00BE;"/>
    <xsl:output-character character="⅜" string="&amp;#x215C;"/>
    <xsl:output-character character="⅝" string="&amp;#x215D;"/>
    <xsl:output-character character="⅞" string="&amp;#x215E;"/>
    <!--U0003E gt-->
    <xsl:output-character character="½" string="&amp;#x00BD;"/>
    <xsl:output-character character="―" string="&amp;#x2015;"/>
    <xsl:output-character character="‐" string="&amp;#x002D;"/>
    <xsl:output-character character="¡" string="&amp;#x00A1;"/>
    <xsl:output-character character="¿" string="&amp;#x00BF;"/>
    <xsl:output-character character="«" string="&amp;#x00AB;"/>
    <xsl:output-character character="←" string="&amp;#x2190;"/>
    <!--U0007B lcub-->
    <xsl:output-character character="“" string="&amp;#x201C;"/>
    <!--U0005F lowbar-->
    <!--U00028 lpar-->
    <!--U0005B lsqb-->

    <!--U0003C lt-->
    <xsl:output-character character="µ" string="&amp;#x00B5;"/>
    <xsl:output-character character="·" string="&amp;#x00B7;"/>
    <xsl:output-character character=" " string="&amp;#x2003;"/>
    <xsl:output-character character=" " string="&amp;#x2002;"/>
    <xsl:output-character character=" " string="&amp;#x00A0;"/>
    <xsl:output-character character="¬" string="&amp;#x00AC;"/>
    <!--U00023 num-->
    <xsl:output-character character="Ω" string="&amp;#x2126;"/>
    <xsl:output-character character="ª" string="&amp;#x00AA;"/>
    <xsl:output-character character="º" string="&amp;#x00BA;"/>
    <xsl:output-character character="¶" string="&amp;#x00B6;"/>
    <xsl:output-character character="%" string="&amp;#x0025;"/>
    <!--U0002E period-->
    <xsl:output-character character="+" string="&amp;#x002B;"/>
    <xsl:output-character character="±" string="&amp;#x00B1;"/>
    <xsl:output-character character="£" string="&amp;#x00A3;"/>
    <!--U0003F quest-->
    <!--U00022 quot-->
    <xsl:output-character character="»" string="&amp;#x00BB;"/>
    <xsl:output-character character="→" string="&amp;#x2192;"/>
    <!--U0007D rcub-->
    <xsl:output-character character="”" string="&amp;#x201D;"/>
    <xsl:output-character character="®" string="&amp;#x00AE;"/>
    <!--U00029 rpar-->
    <!--U0005D rsqb-->
    <!--<xsl:output-character character="’" string="&amp;#x0027;"/>-->
    <xsl:output-character character="§" string="&amp;#x00A7;"/>
    <!--U0003B semi-->
    <xsl:output-character character="­" string="&amp;#x00AD;"/>
    <!--U0002F sol-->
    <xsl:output-character character="♪" string="&amp;#x2669;"/>
    <xsl:output-character character="¹" string="&amp;#x00B9;"/>
    <xsl:output-character character="²" string="&amp;#x00B2;"/>
    <xsl:output-character character="³" string="&amp;#x00B3;"/>
    <xsl:output-character character="×" string="&amp;#x00D7;"/>
    <xsl:output-character character="™" string="&amp;#x2122;"/>
    <xsl:output-character character="↑" string="&amp;#x2191;"/>
    <!--U0007C verbar-->
    <xsl:output-character character="¥" string="&amp;#x00A5;"/>
    <!-- isopubmap.xsl -->
    <xsl:output-character character="␣" string="&amp;#x2423;"/>
    <xsl:output-character character="▒" string="&amp;#x2592;"/>
    <xsl:output-character character="░" string="&amp;#x2591;"/>
    <xsl:output-character character="▓" string="&amp;#x2593;"/>
    <xsl:output-character character="█" string="&amp;#x2588;"/>
    <xsl:output-character character="•" string="&amp;#x2022;"/>
    <xsl:output-character character="⁁" string="&amp;#x2041;"/>
    <xsl:output-character character="✓" string="&amp;#x2713;"/>
    <xsl:output-character character="○" string="&amp;#x25CB;"/>
    <xsl:output-character character="♣" string="&amp;#x2663;"/>
    <xsl:output-character character="℗" string="&amp;#x2117;"/>
    <xsl:output-character character="✗" string="&amp;#x2717;"/>
    <xsl:output-character character="†" string="&amp;#x2020;"/>
    <xsl:output-character character="‡" string="&amp;#x2021;"/>
    <xsl:output-character character="‐" string="&amp;#x2010;"/>
    <xsl:output-character character="♦" string="&amp;#x2666;"/>
    <xsl:output-character character="⌍" string="&amp;#x230D;"/>
    <xsl:output-character character="⌌" string="&amp;#x230C;"/>
    <xsl:output-character character="▿" string="&amp;#x25BF;"/>
    <xsl:output-character character="▾" string="&amp;#x25BE;"/>
    <xsl:output-character character=" " string="&#160;&#160;"/>
    <xsl:output-character character=" " string="&amp;#x2004;"/>
    <xsl:output-character character=" " string="&amp;#x2005;"/>
    <xsl:output-character character=" " string="&#160;"/>
    <xsl:output-character character="♀" string="&amp;#x2640;"/>
    <xsl:output-character character="ﬃ" string="&amp;#xFB03;"/>
    <xsl:output-character character="ﬀ" string="&amp;#xFB00;"/>
    <xsl:output-character character="ﬄ" string="&amp;#xFB04;"/>
    <xsl:output-character character="ﬁ" string="&amp;#xFB01;"/>
    <xsl:output-character character="♭" string="&amp;#x266D;"/>
    <xsl:output-character character="ﬂ" string="&amp;#xFB02;"/>
    <xsl:output-character character="⅓" string="&amp;#x2153;"/>
    <xsl:output-character character="⅕" string="&amp;#x2155;"/>
    <xsl:output-character character="⅙" string="&amp;#x2159;"/>
    <xsl:output-character character="⅔" string="&amp;#x2154;"/>
    <xsl:output-character character="⅖" string="&amp;#x2156;"/>
    <xsl:output-character character="⅗" string="&amp;#x2157;"/>
    <xsl:output-character character="⅘" string="&amp;#x2158;"/>
    <xsl:output-character character="⅚" string="&amp;#x215A;"/>
    <xsl:output-character character=" " string="&amp;#x2009;"/>
    <xsl:output-character character="♥" string="&amp;#x2665;"/>
    <xsl:output-character character="…" string="&amp;#x2026;"/>
    <xsl:output-character character="⁃" string="&amp;#x2043;"/>
    <xsl:output-character character="℅" string="&amp;#x2105;"/>
    <xsl:output-character character="„" string="&amp;#x201C;"/>
    <xsl:output-character character="▄" string="&amp;#x2584;"/>
    <xsl:output-character character="◊" string="&amp;#x25CA;"/>
    <xsl:output-character character="⧫" string="&amp;#x2726;"/>
    <xsl:output-character character="‚" string="&amp;#x201A;"/>
    <xsl:output-character character="◃" string="&amp;#x25C3;"/>
    <xsl:output-character character="◂" string="&amp;#x25C2;"/>
    <xsl:output-character character="♂" string="&amp;#x2642;"/>
    <xsl:output-character character="✠" string="&amp;#x2720;"/>
    <xsl:output-character character="▮" string="&amp;#x25AE;"/>
    <xsl:output-character character="—" string="&amp;#x2014;"/>
    <xsl:output-character character="…" string="&amp;#x2026;"/>
    <!-- mldr -->
    <xsl:output-character character="♮" string="&amp;#x266E;"/>
    <xsl:output-character character="–" string="&amp;#x2013;"/>
    <xsl:output-character character="‥" string="&amp;#x2025;"/>
    <xsl:output-character character=" " string="&amp;#x2007;"/>
    <xsl:output-character character="☎" string="&amp;#x260E;"/>
    <xsl:output-character character=" " string="&amp;#x2008;"/>
    <xsl:output-character character="”" string="&amp;#x201D;"/>
    <xsl:output-character character="▭" string="&amp;#x25AD;"/>
    <xsl:output-character character="▹" string="&amp;#x25B9;"/>
    <xsl:output-character character="▸" string="&amp;#x25B8;"/>
    <xsl:output-character character="℞" string="&amp;#x211E;"/>
    <xsl:output-character character="✶" string="&amp;#x2736;"/>
    <xsl:output-character character="♯" string="&amp;#x266F;"/>
    <xsl:output-character character="♠" string="&amp;#x2660;"/>
    <xsl:output-character character="□" string="&amp;#x25A1;"/>
    <xsl:output-character character="▪" string="&amp;#x25AA;"/>
    <xsl:output-character character="☆" string="&amp;#x22C6;"/>
    <xsl:output-character character="★" string="&amp;#x2605;"/>
    <xsl:output-character character="⌖" string="&amp;#x2316;"/>
    <xsl:output-character character="⌕" string="&amp;#x2315;"/>
    <xsl:output-character character=" " string="&#160;"/>
    <xsl:output-character character="▀" string="&amp;#x2580;"/>
    <xsl:output-character character="⌏" string="&amp;#x230F;"/>
    <xsl:output-character character="⌎" string="&amp;#x230E;"/>
    <xsl:output-character character="▵" string="&amp;#x25B5;"/>
    <xsl:output-character character="▴" string="&amp;#x25B4;"/>
    <xsl:output-character character="⋮" string="&amp;#x22EE;"/>
    <!-- isoamsamap.xsl -->
    <xsl:output-character character="⍼" string="&amp;#x237C;"/>
    <xsl:output-character character="⫯" string="&amp;#x2AEF;"/>
    <xsl:output-character character="⤸" string="&amp;#x2938;"/>
    <xsl:output-character character="⤵" string="&amp;#x2935;"/>
    <xsl:output-character character="↶" string="&amp;#x21B6;"/>
    <xsl:output-character character="⤽" string="&amp;#x0293D;"/>
    <xsl:output-character character="↷" string="&amp;#x21B7;"/>
    <xsl:output-character character="⤼" string="&amp;#x0293C;"/>
    <xsl:output-character character="⇓" string="&amp;#x21D3;"/>
    <xsl:output-character character="↡" string="&amp;#x21A1;"/>
    <xsl:output-character character="⇊" string="&amp;#x21CA;"/>
    <xsl:output-character character="⤑" string="&amp;#x2911;"/>
    <xsl:output-character character="⥿" string="&amp;#x297F;"/>
    <xsl:output-character character="⥥" string="&amp;#x2965;"/>
    <xsl:output-character character="⇃" string="&amp;#x21C3;"/>
    <xsl:output-character character="⇂" string="&amp;#x21C2;"/>
    <xsl:output-character character="⇵" string="&amp;#x21F5;"/>
    <xsl:output-character character="⥯" string="&amp;#x296F;"/>
    <xsl:output-character character="⟿" string="&amp;#x27FF;"/>
    <xsl:output-character character="⥱" string="&amp;#x2971;"/>
    <xsl:output-character character="↔" string="&amp;#x2194;"/>
    <xsl:output-character character="⇔" string="&amp;#x21D4;"/>
    <xsl:output-character character="⥈" string="&amp;#x2948;"/>
    <xsl:output-character character="↭" string="&amp;#x21AD;"/>
    <xsl:output-character character="⇿" string="&amp;#x21FF;"/>
    <xsl:output-character character="⊷" string="&amp;#x22B7;"/>
    <xsl:output-character character="⇚" string="&amp;#x21DA;"/>
    <xsl:output-character character="↞" string="&amp;#x219E;"/>
    <xsl:output-character character="⤟" string="&amp;#x291F;"/>
    <xsl:output-character character="⤝" string="&amp;#x291D;"/>
    <xsl:output-character character="↩" string="&amp;#x21A9;"/>
    <xsl:output-character character="↫" string="&amp;#x21AB;"/>
    <xsl:output-character character="⤹" string="&amp;#x2939;"/>
    <xsl:output-character character="⥳" string="&amp;#x2973;"/>
    <xsl:output-character character="↢" string="&amp;#x21A2;"/>
    <xsl:output-character character="⤙" string="&amp;#x2919;"/>
    <xsl:output-character character="⤛" string="&amp;#x291B;"/>
    <xsl:output-character character="⤌" string="&amp;#x290C;"/>
    <xsl:output-character character="⤎" string="&amp;#x290E;"/>
    <xsl:output-character character="⤶" string="&amp;#x2936;"/>
    <xsl:output-character character="⥧" string="&amp;#x2967;"/>
    <xsl:output-character character="⥋" string="&amp;#x294B;"/>
    <xsl:output-character character="↲" string="&amp;#x21B2;"/>
    <xsl:output-character character="⥼" string="&amp;#x297C;"/>
    <xsl:output-character character="⥢" string="&amp;#x2962;"/>
    <xsl:output-character character="↽" string="&amp;#x21BD;"/>
    <xsl:output-character character="↼" string="&amp;#x21BC;"/>
    <xsl:output-character character="⥪" string="&amp;#x296A;"/>
    <xsl:output-character character="⇇" string="&amp;#x21C7;"/>
    <xsl:output-character character="⥫" string="&amp;#x296B;"/>
    <xsl:output-character character="⇽" string="&amp;#x21FD;"/>
    <xsl:output-character character="⇆" string="&amp;#x21C6;"/>
    <xsl:output-character character="⇋" string="&amp;#x21CB;"/>
    <xsl:output-character character="⥭" string="&amp;#x296D;"/>
    <xsl:output-character character="↰" string="&amp;#x21B0;"/>
    <xsl:output-character character="⥊" string="&amp;#x294A;"/>
    <xsl:output-character character="⥦" string="&amp;#x2966;"/>
    <xsl:output-character character="↦" string="&amp;#x21A6;"/>
    <xsl:output-character character="⤅" string="&amp;#x2905;"/>
    <xsl:output-character character="⫰" string="&amp;#x2AF0;"/>
    <xsl:output-character character="⊸" string="&amp;#x22B8;"/>
    <xsl:output-character character="⤤" string="&amp;#x2924;"/>
    <xsl:output-character character="↗" string="&amp;#x2197;"/>
    <xsl:output-character character="⇗" string="&amp;#x21D7;"/>
    <xsl:output-character character="⤨" string="&amp;#x2928;"/>
    <xsl:output-character character="↮" string="&amp;#x21AE;"/>
    <xsl:output-character character="⇎" string="&amp;#x21CE;"/>
    <xsl:output-character character="↚" string="&amp;#x219A;"/>
    <xsl:output-character character="⇍" string="&amp;#x21CD;"/>
    <xsl:output-character character="↛" string="&amp;#x219B;"/>
    <xsl:output-character character="⇏" string="&amp;#x21CF;"/>
    <!--U02933-00338 nrarrc-->
    <!--U0219D-00338 nrarrw-->
    <xsl:output-character character="⤄" string="&amp;#x2904;"/>
    <xsl:output-character character="⤂" string="&amp;#x2902;"/>
    <xsl:output-character character="⤃" string="&amp;#x2903;"/>
    <xsl:output-character character="⤣" string="&amp;#x2923;"/>
    <xsl:output-character character="↖" string="&amp;#x2196;"/>
    <xsl:output-character character="⇖" string="&amp;#x21D6;"/>
    <xsl:output-character character="⤧" string="&amp;#x2927;"/>
    <xsl:output-character character="↺" string="&amp;#x21BA;"/>
    <xsl:output-character character="↻" string="&amp;#x21BB;"/>
    <xsl:output-character character="⊶" string="&amp;#x22B6;"/>
    <xsl:output-character character="⇛" string="&amp;#x21DB;"/>
    <xsl:output-character character="↠" string="&amp;#x21A0;"/>
    <xsl:output-character character="⥵" string="&amp;#x2975;"/>
    <xsl:output-character character="⤠" string="&amp;#x2920;"/>
    <xsl:output-character character="⤳" string="&amp;#x2933;"/>
    <xsl:output-character character="⤞" string="&amp;#x291E;"/>
    <xsl:output-character character="↪" string="&amp;#x21AA;"/>
    <xsl:output-character character="↬" string="&amp;#x21AC;"/>
    <xsl:output-character character="⥅" string="&amp;#x2945;"/>
    <xsl:output-character character="⥴" string="&amp;#x2974;"/>
    <xsl:output-character character="↣" string="&amp;#x21A3;"/>
    <xsl:output-character character="⤖" string="&amp;#x2916;"/>
    <xsl:output-character character="↝" string="&amp;#x219D;"/>
    <xsl:output-character character="⤚" string="&amp;#x291A;"/>
    <xsl:output-character character="⤜" string="&amp;#x291C;"/>
    <xsl:output-character character="⤍" string="&amp;#x290D;"/>
    <xsl:output-character character="⤏" string="&amp;#x290F;"/>
    <xsl:output-character character="⤐" string="&amp;#x2910;"/>
    <xsl:output-character character="⤷" string="&amp;#x2937;"/>
    <xsl:output-character character="⥩" string="&amp;#x2969;"/>
    <xsl:output-character character="↳" string="&amp;#x21B3;"/>
    <xsl:output-character character="⥽" string="&amp;#x297D;"/>
    <xsl:output-character character="⥤" string="&amp;#x2964;"/>
    <xsl:output-character character="⇁" string="&amp;#x21C1;"/>
    <xsl:output-character character="⇀" string="&amp;#x21C0;"/>
    <xsl:output-character character="⥬" string="&amp;#x296C;"/>
    <xsl:output-character character="⇄" string="&amp;#x21C4;"/>
    <xsl:output-character character="⇌" string="&amp;#x21CC;"/>
    <xsl:output-character character="⇾" string="&amp;#x21FE;"/>
    <xsl:output-character character="⇉" string="&amp;#x21C9;"/>
    <xsl:output-character character="↱" string="&amp;#x21B1;"/>
    <xsl:output-character character="⥨" string="&amp;#x2968;"/>
    <xsl:output-character character="⤥" string="&amp;#x2925;"/>
    <xsl:output-character character="↘" string="&amp;#x2198;"/>
    <xsl:output-character character="⇘" string="&amp;#x21D8;"/>
    <xsl:output-character character="⤩" string="&amp;#x2929;"/>
    <xsl:output-character character="⥲" string="&amp;#x2972;"/>
    <xsl:output-character character="←" string="&amp;#x2190;"/>
    <xsl:output-character character="→" string="&amp;#x2192;"/>
    <xsl:output-character character="⤦" string="&amp;#x2926;"/>
    <xsl:output-character character="↙" string="&amp;#x2199;"/>
    <xsl:output-character character="⇙" string="&amp;#x21D9;"/>
    <xsl:output-character character="⤪" string="&amp;#x292A;"/>
    <xsl:output-character character="⇑" string="&amp;#x21D1;"/>
    <xsl:output-character character="↟" string="&amp;#x219F;"/>
    <xsl:output-character character="⥉" string="&amp;#x2949;"/>
    <xsl:output-character character="⇅" string="&amp;#x21C5;"/>
    <xsl:output-character character="⥮" string="&amp;#x296E;"/>
    <xsl:output-character character="⥾" string="&amp;#x297E;"/>
    <xsl:output-character character="⥣" string="&amp;#x2963;"/>
    <xsl:output-character character="↿" string="&amp;#x21BF;"/>
    <xsl:output-character character="↾" string="&amp;#x21BE;"/>
    <xsl:output-character character="⇈" string="&amp;#x21C8;"/>
    <xsl:output-character character="↕" string="&amp;#x2195;"/>
    <xsl:output-character character="⇕" string="&amp;#x21D5;"/>
    <xsl:output-character character="⟷" string="&amp;#xE203;"/>
    <xsl:output-character character="⟺" string="&amp;#xE202;"/>
    <xsl:output-character character="⟵" string="&amp;#x27F5;"/>
    <xsl:output-character character="⟸" string="&amp;#xE200;"/>
    <xsl:output-character character="⟼" string="&amp;#x27FC;"/>
    <xsl:output-character character="⟶" string="&amp;#x27F6;"/>
    <xsl:output-character character="⟹" string="&amp;#xE204;"/>
    <xsl:output-character character="⇝" string="&amp;#x21DD;"/>
    <!-- isoamsamap.xsl -->
    <xsl:output-character character="⍼" string="&amp;#x237C;"/>
    <xsl:output-character character="⫯" string="&amp;#x2AEF;"/>
    <xsl:output-character character="⤸" string="&amp;#x2938;"/>
    <xsl:output-character character="⤵" string="&amp;#x2935;"/>
    <xsl:output-character character="↶" string="&amp;#x21B6;"/>
    <xsl:output-character character="⤽" string="&amp;#x0293D;"/>
    <xsl:output-character character="↷" string="&amp;#x21B7;"/>
    <xsl:output-character character="⤼" string="&amp;#x0293C;"/>
    <xsl:output-character character="⇓" string="&amp;#x21D3;"/>
    <xsl:output-character character="↡" string="&amp;#x21A1;"/>
    <xsl:output-character character="⇊" string="&amp;#x21CA;"/>
    <xsl:output-character character="⤑" string="&amp;#x2911;"/>
    <xsl:output-character character="⥿" string="&amp;#x297F;"/>
    <xsl:output-character character="⥥" string="&amp;#x2965;"/>
    <xsl:output-character character="⇃" string="&amp;#x21C3;"/>
    <xsl:output-character character="⇂" string="&amp;#x21C2;"/>
    <xsl:output-character character="⇵" string="&amp;#x21F5;"/>
    <xsl:output-character character="⥯" string="&amp;#x296F;"/>
    <xsl:output-character character="⟿" string="&amp;#x27FF;"/>
    <xsl:output-character character="⥱" string="&amp;#x2971;"/>
    <xsl:output-character character="↔" string="&amp;#x2194;"/>
    <xsl:output-character character="⇔" string="&amp;#x21D4;"/>
    <xsl:output-character character="⥈" string="&amp;#x2948;"/>
    <xsl:output-character character="↭" string="&amp;#x21AD;"/>
    <xsl:output-character character="⇿" string="&amp;#x21FF;"/>
    <xsl:output-character character="⊷" string="&amp;#x22B7;"/>
    <xsl:output-character character="⇚" string="&amp;#x21DA;"/>
    <xsl:output-character character="↞" string="&amp;#x219E;"/>
    <xsl:output-character character="⤟" string="&amp;#x291F;"/>
    <xsl:output-character character="⤝" string="&amp;#x291D;"/>
    <xsl:output-character character="↩" string="&amp;#x21A9;"/>
    <xsl:output-character character="↫" string="&amp;#x21AB;"/>
    <xsl:output-character character="⤹" string="&amp;#x2939;"/>
    <xsl:output-character character="⥳" string="&amp;#x2973;"/>
    <xsl:output-character character="↢" string="&amp;#x21A2;"/>
    <xsl:output-character character="⤙" string="&amp;#x2919;"/>
    <xsl:output-character character="⤛" string="&amp;#x291B;"/>
    <xsl:output-character character="⤌" string="&amp;#x290C;"/>
    <xsl:output-character character="⤎" string="&amp;#x290E;"/>
    <xsl:output-character character="⤶" string="&amp;#x2936;"/>
    <xsl:output-character character="⥧" string="&amp;#x2967;"/>
    <xsl:output-character character="⥋" string="&amp;#x294B;"/>
    <xsl:output-character character="↲" string="&amp;#x21B2;"/>
    <xsl:output-character character="⥼" string="&amp;#x297C;"/>
    <xsl:output-character character="⥢" string="&amp;#x2962;"/>
    <xsl:output-character character="↽" string="&amp;#x21BD;"/>
    <xsl:output-character character="↼" string="&amp;#x21BC;"/>
    <xsl:output-character character="⥪" string="&amp;#x296A;"/>
    <xsl:output-character character="⇇" string="&amp;#x21C7;"/>
    <xsl:output-character character="⥫" string="&amp;#x296B;"/>
    <xsl:output-character character="⇽" string="&amp;#x21FD;"/>
    <xsl:output-character character="⇆" string="&amp;#x21C6;"/>
    <xsl:output-character character="⇋" string="&amp;#x21CB;"/>
    <xsl:output-character character="⥭" string="&amp;#x296D;"/>
    <xsl:output-character character="↰" string="&amp;#x21B0;"/>
    <xsl:output-character character="⥊" string="&amp;#x294A;"/>
    <xsl:output-character character="⥦" string="&amp;#x2966;"/>
    <xsl:output-character character="↦" string="&amp;#x21A6;"/>
    <xsl:output-character character="⤅" string="&amp;#x2905;"/>
    <xsl:output-character character="⫰" string="&amp;#x2AF0;"/>
    <xsl:output-character character="⊸" string="&amp;#x22B8;"/>
    <xsl:output-character character="⤤" string="&amp;#x2924;"/>
    <xsl:output-character character="↗" string="&amp;#x2197;"/>
    <xsl:output-character character="⇗" string="&amp;#x21D7;"/>
    <xsl:output-character character="⤨" string="&amp;#x2928;"/>
    <xsl:output-character character="↮" string="&amp;#x21AE;"/>
    <xsl:output-character character="⇎" string="&amp;#x21CE;"/>
    <xsl:output-character character="↚" string="&amp;#x219A;"/>
    <xsl:output-character character="⇍" string="&amp;#x21CD;"/>
    <xsl:output-character character="↛" string="&amp;#x219B;"/>
    <xsl:output-character character="⇏" string="&amp;#x21CF;"/>
    <!--U02933-00338 nrarrc-->
    <!--U0219D-00338 nrarrw-->
    <xsl:output-character character="⤄" string="&amp;#x2904;"/>
    <xsl:output-character character="⤂" string="&amp;#x2902;"/>
    <xsl:output-character character="⤃" string="&amp;#x2903;"/>
    <xsl:output-character character="⤣" string="&amp;#x2923;"/>
    <xsl:output-character character="↖" string="&amp;#x2196;"/>
    <xsl:output-character character="⇖" string="&amp;#x21D6;"/>
    <xsl:output-character character="⤧" string="&amp;#x2927;"/>
    <xsl:output-character character="↺" string="&amp;#x21BA;"/>
    <xsl:output-character character="↻" string="&amp;#x21BB;"/>
    <xsl:output-character character="⊶" string="&amp;#x22B6;"/>
    <xsl:output-character character="⇛" string="&amp;#x21DB;"/>
    <xsl:output-character character="↠" string="&amp;#x21A0;"/>
    <xsl:output-character character="⥵" string="&amp;#x2975;"/>
    <xsl:output-character character="⤠" string="&amp;#x2920;"/>
    <xsl:output-character character="⤳" string="&amp;#x2933;"/>
    <xsl:output-character character="⤞" string="&amp;#x291E;"/>
    <xsl:output-character character="↪" string="&amp;#x21AA;"/>
    <xsl:output-character character="↬" string="&amp;#x21AC;"/>
    <xsl:output-character character="⥅" string="&amp;#x2945;"/>
    <xsl:output-character character="⥴" string="&amp;#x2974;"/>
    <xsl:output-character character="↣" string="&amp;#x21A3;"/>
    <xsl:output-character character="⤖" string="&amp;#x2916;"/>
    <xsl:output-character character="↝" string="&amp;#x219D;"/>
    <xsl:output-character character="⤚" string="&amp;#x291A;"/>
    <xsl:output-character character="⤜" string="&amp;#x291C;"/>
    <xsl:output-character character="⤍" string="&amp;#x290D;"/>
    <xsl:output-character character="⤏" string="&amp;#x290F;"/>
    <xsl:output-character character="⤐" string="&amp;#x2910;"/>
    <xsl:output-character character="⤷" string="&amp;#x2937;"/>
    <xsl:output-character character="⥩" string="&amp;#x2969;"/>
    <xsl:output-character character="↳" string="&amp;#x21B3;"/>
    <xsl:output-character character="⥽" string="&amp;#x297D;"/>
    <xsl:output-character character="⥤" string="&amp;#x2964;"/>
    <xsl:output-character character="⇁" string="&amp;#x21C1;"/>
    <xsl:output-character character="⇀" string="&amp;#x21C0;"/>
    <xsl:output-character character="⥬" string="&amp;#x296C;"/>
    <xsl:output-character character="⇄" string="&amp;#x21C4;"/>
    <xsl:output-character character="⇌" string="&amp;#x21CC;"/>
    <xsl:output-character character="⇾" string="&amp;#x21FE;"/>
    <xsl:output-character character="⇉" string="&amp;#x21C9;"/>
    <xsl:output-character character="↱" string="&amp;#x21B1;"/>
    <xsl:output-character character="⥨" string="&amp;#x2968;"/>
    <xsl:output-character character="⤥" string="&amp;#x2925;"/>
    <xsl:output-character character="↘" string="&amp;#x2198;"/>
    <xsl:output-character character="⇘" string="&amp;#x21D8;"/>
    <xsl:output-character character="⤩" string="&amp;#x2929;"/>
    <xsl:output-character character="⥲" string="&amp;#x2972;"/>
    <xsl:output-character character="←" string="&amp;#x2190;"/>
    <xsl:output-character character="→" string="&amp;#x2192;"/>
    <xsl:output-character character="⤦" string="&amp;#x2926;"/>
    <xsl:output-character character="↙" string="&amp;#x2199;"/>
    <xsl:output-character character="⇙" string="&amp;#x21D9;"/>
    <xsl:output-character character="⤪" string="&amp;#x292A;"/>
    <xsl:output-character character="⇑" string="&amp;#x21D1;"/>
    <xsl:output-character character="↟" string="&amp;#x219F;"/>
    <xsl:output-character character="⥉" string="&amp;#x2949;"/>
    <xsl:output-character character="⇅" string="&amp;#x21C5;"/>
    <xsl:output-character character="⥮" string="&amp;#x296E;"/>
    <xsl:output-character character="⥾" string="&amp;#x297E;"/>
    <xsl:output-character character="⥣" string="&amp;#x2963;"/>
    <xsl:output-character character="↿" string="&amp;#x21BF;"/>
    <xsl:output-character character="↾" string="&amp;#x21BE;"/>
    <xsl:output-character character="⇈" string="&amp;#x21C8;"/>
    <xsl:output-character character="↕" string="&amp;#x2195;"/>
    <xsl:output-character character="⇕" string="&amp;#x21D5;"/>
    <xsl:output-character character="⟷" string="&amp;#xE203;"/>
    <xsl:output-character character="⟺" string="&amp;#xE202;"/>
    <xsl:output-character character="⟵" string="&amp;#x27F5;"/>
    <xsl:output-character character="⟸" string="&amp;#xE200;"/>
    <xsl:output-character character="⟼" string="&amp;#x27FC;"/>
    <xsl:output-character character="⟶" string="&amp;#x27F6;"/>
    <xsl:output-character character="⟹" string="&amp;#xE204;"/>
    <xsl:output-character character="⇝" string="&amp;#x21DD;"/>
    <!-- isoamsbmap.xsl -->
    <xsl:output-character character="∾" string="&amp;#x223E;"/>
    <!--U0223E-00333 acE-->
    <xsl:output-character character="⨿" string="&amp;#xE251;"/>
    <xsl:output-character character="⊽" string="&amp;#x22BD;"/>
    <xsl:output-character character="⌅" string="&amp;#x22BC;"/>
    <xsl:output-character character="⌆" string="&amp;#x2306;"/>
    <xsl:output-character character="⧅" string="&amp;#x29C5;"/>
    <xsl:output-character character="⋒" string="&amp;#x22D2;"/>
    <xsl:output-character character="⩄" string="&amp;#x2A44;"/>
    <xsl:output-character character="⩉" string="&amp;#x2A49;"/>
    <xsl:output-character character="⩋" string="&amp;#x2A4B;"/>
    <xsl:output-character character="⩇" string="&amp;#x2A47;"/>
    <xsl:output-character character="⩀" string="&amp;#x2A40;"/>
    <!--U02229-0FE00 caps-->
    <xsl:output-character character="⩍" string="&amp;#x2A4D;"/>
    <xsl:output-character character="⩌" string="&amp;#x2A4C;"/>
    <xsl:output-character character="⩐" string="&amp;#x2A50;"/>
    <xsl:output-character character="∐" string="&amp;#x2210;"/>
    <xsl:output-character character="⋓" string="&amp;#x22D3;"/>
    <xsl:output-character character="⩈" string="&amp;#x2A48;"/>
    <xsl:output-character character="⩆" string="&amp;#x2A46;"/>
    <xsl:output-character character="⩊" string="&amp;#x2A4A;"/>
    <xsl:output-character character="⊍" string="&amp;#x228D;"/>
    <xsl:output-character character="⩅" string="&amp;#x2A45;"/>
    <!--U0222A-0FE00 cups-->
    <xsl:output-character character="⋎" string="&amp;#x22CE;"/>
    <xsl:output-character character="⋏" string="&amp;#x22CF;"/>
    <xsl:output-character character="†" string="&amp;#x2020;"/>
    <xsl:output-character character="‡" string="&amp;#x2021;"/>
    <xsl:output-character character="⋄" string="&amp;#x22C4;"/>
    <xsl:output-character character="⋇" string="&amp;#x22C7;"/>
    <xsl:output-character character="⩱" string="&amp;#x2A71;"/>
    <xsl:output-character character="⊹" string="&amp;#x22B9;"/>
    <xsl:output-character character="⊺" string="&amp;#x22BA;"/>
    <xsl:output-character character="⨼" string="&amp;#x2A3C;"/>
    <xsl:output-character character="⨭" string="&amp;#x2A2D;"/>
    <xsl:output-character character="⨴" string="&amp;#x2A34;"/>
    <xsl:output-character character="⋋" string="&amp;#x22CB;"/>
    <xsl:output-character character="⋉" string="&amp;#x22C9;"/>
    <!--U0002A midast-->
    <xsl:output-character character="⊟" string="&amp;#x229F;"/>
    <xsl:output-character character="∸" string="&amp;#x2238;"/>
    <xsl:output-character character="⨪" string="&amp;#x2A2A;"/>
    <xsl:output-character character="⩃" string="&amp;#x2A43;"/>
    <xsl:output-character character="⩂" string="&amp;#x2A42;"/>
    <xsl:output-character character="⊛" string="&amp;#x229B;"/>
    <xsl:output-character character="⊚" string="&amp;#x229A;"/>
    <xsl:output-character character="⊝" string="&amp;#x229D;"/>
    <xsl:output-character character="⨸" string="&amp;#x2A38;"/>
    <xsl:output-character character="⊙" string="&amp;#x2299;"/>
    <xsl:output-character character="⦼" string="&amp;#x29BC;"/>
    <xsl:output-character character="⦿" string="&amp;#x29BF;"/>
    <xsl:output-character character="⧁" string="&amp;#x29C1;"/>
    <xsl:output-character character="⦵" string="&amp;#x29B5;"/>
    <xsl:output-character character="⦾" string="&amp;#x29BE;"/>
    <xsl:output-character character="⧀" string="&amp;#x29C0;"/>
    <xsl:output-character character="⦶" string="&amp;#x29B6;"/>
    <xsl:output-character character="⊖" string="&amp;#x2296;"/>
    <xsl:output-character character="⦷" string="&amp;#x29B7;"/>
    <xsl:output-character character="⦹" string="&amp;#x29B9;"/>
    <xsl:output-character character="⊕" string="&amp;#x2295;"/>
    <xsl:output-character character="⊘" string="&amp;#x2298;"/>
    <xsl:output-character character="⊗" string="&amp;#x2297;"/>
    <xsl:output-character character="⨷" string="&amp;#x2A37;"/>
    <xsl:output-character character="⨶" string="&amp;#x2A36;"/>
    <xsl:output-character character="⌽" string="&amp;#x233D;"/>
    <xsl:output-character character="⨣" string="&amp;#x2A23;"/>
    <xsl:output-character character="⊞" string="&amp;#x229E;"/>
    <xsl:output-character character="⨢" string="&amp;#x2A22;"/>
    <xsl:output-character character="∔" string="&amp;#x2214;"/>
    <xsl:output-character character="⨥" string="&amp;#x2A25;"/>
    <xsl:output-character character="⩲" string="&amp;#x2A72;"/>
    <xsl:output-character character="⨦" string="&amp;#x2A26;"/>
    <xsl:output-character character="⨧" string="&amp;#x2A27;"/>
    <xsl:output-character character="∏" string="&amp;#x220F;"/>
    <xsl:output-character character="⧚" string="&amp;#x29DA;"/>
    <xsl:output-character character="⨮" string="&amp;#x2A2E;"/>
    <xsl:output-character character="⨵" string="&amp;#x2A35;"/>
    <xsl:output-character character="⋌" string="&amp;#x22CC;"/>
    <xsl:output-character character="⋊" string="&amp;#x22CA;"/>
    <xsl:output-character character="⋅" string="&amp;#x22C5;"/>
    <xsl:output-character character="⊡" string="&amp;#x22A1;"/>
    <xsl:output-character character="∖" string="&amp;#x2216;"/>
    <xsl:output-character character="⨤" string="&amp;#x2A24;"/>
    <xsl:output-character character="⨳" string="&amp;#x2A33;"/>
    <xsl:output-character character="⧄" string="&amp;#x29C4;"/>
    <xsl:output-character character="⊓" string="&amp;#x2293;"/>
    <!--U02293-0FE00 sqcaps-->
    <xsl:output-character character="⊔" string="&amp;#x2294;"/>
    <!--U02294-0FE00 sqcups-->
    <xsl:output-character character="∖" string="&amp;#xE844;"/>
    <xsl:output-character character="⋆" string="&amp;#x22C6;"/>
    <xsl:output-character character="⪽" string="&amp;#x2ABD;"/>
    <xsl:output-character character="∑" string="&amp;#x2211;"/>
    <xsl:output-character character="⪾" string="&amp;#x2ABE;"/>
    <xsl:output-character character="⊠" string="&amp;#x22A0;"/>
    <xsl:output-character character="⨱" string="&amp;#x2A31;"/>
    <xsl:output-character character="⨰" string="&amp;#x2A30;"/>
    <xsl:output-character character="◬" string="&amp;#x25EC;"/>
    <xsl:output-character character="⨺" string="&amp;#x2A3A;"/>
    <xsl:output-character character="⨹" string="&amp;#x2A39;"/>
    <xsl:output-character character="⧍" string="&amp;#x29CD;"/>
    <xsl:output-character character="⨻" string="&amp;#x2A3B;"/>
    <xsl:output-character character="⊎" string="&amp;#x228E;"/>
    <xsl:output-character character="⊻" string="&amp;#x22BB;"/>
    <xsl:output-character character="⩟" string="&amp;#x2A5F;"/>
    <xsl:output-character character="≀" string="&amp;#x2240;"/>
    <xsl:output-character character="⋂" string="&amp;#x22C2;"/>
    <xsl:output-character character="◯" string="&amp;#x25CB;"/>
    <xsl:output-character character="⋃" string="&amp;#x22C3;"/>
    <xsl:output-character character="▽" string="&amp;#x25BD;"/>
    <xsl:output-character character="⨀" string="&amp;#x2A00;"/>
    <xsl:output-character character="⨁" string="&amp;#x2A01;"/>
    <xsl:output-character character="⨂" string="&amp;#x2A02;"/>
    <xsl:output-character character="⨆" string="&amp;#x2A06;"/>
    <xsl:output-character character="⨄" string="&amp;#x2A04;"/>
    <xsl:output-character character="△" string="&amp;#x25B3;"/>
    <xsl:output-character character="⋁" string="&amp;#x22C1;"/>
    <xsl:output-character character="⋀" string="&amp;#x22C0;"/>
    <!-- isoamscmap.xsl -->
    <xsl:output-character character="⌞" string="&amp;#x231E;"/>
    <xsl:output-character character="⌟" string="&amp;#x231F;"/>
    <xsl:output-character character="⦕" string="&amp;#x2995;"/>
    <xsl:output-character character="⦑" string="&amp;#x2991;"/>
    <xsl:output-character character="⦋" string="&amp;#x298B;"/>
    <xsl:output-character character="⦏" string="&amp;#x298F;"/>
    <xsl:output-character character="⦍" string="&amp;#x298D;"/>
    <xsl:output-character character="⌈" string="&amp;#x2308;"/>
    <xsl:output-character character="⌊" string="&amp;#x230A;"/>
    <xsl:output-character character="⎰" string="&amp;#x23B0;"/>
    <xsl:output-character character="⦓" string="&amp;#x2993;"/>
    <xsl:output-character character="⦖" string="&amp;#x2996;"/>
    <xsl:output-character character="⦒" string="&amp;#x2992;"/>
    <xsl:output-character character="⦌" string="&amp;#x298C;"/>
    <xsl:output-character character="⦎" string="&amp;#x298E;"/>
    <xsl:output-character character="⦐" string="&amp;#x2990;"/>
    <xsl:output-character character="⌉" string="&amp;#x2309;"/>
    <xsl:output-character character="⌋" string="&amp;#x230B;"/>
    <xsl:output-character character="⎱" string="&amp;#x23B1;"/>
    <xsl:output-character character="⦔" string="&amp;#xE291;"/>
    <xsl:output-character character="⌜" string="&amp;#x231C;"/>
    <xsl:output-character character="⌝" string="&amp;#x231D;"/>
    <!-- isoamsnmap.xsl -->
    <xsl:output-character character="⪊" string="&amp;#xE411;"/>
    <xsl:output-character character="⪈" string="&amp;#x2269;"/>
    <xsl:output-character character="≩" string="&amp;#x2269;"/>
    <xsl:output-character character="⋧" string="&amp;#x22E7;"/>
    <!--U02269-0FE00 gvnE-->
    <xsl:output-character character="⪉" string="&amp;#xE2A2;"/>
    <xsl:output-character character="⪇" string="&amp;#x2268;"/>
    <xsl:output-character character="≨" string="&amp;#x2268;"/>
    <xsl:output-character character="⋦" string="&amp;#x22E6;"/>
    <!--U02268-0FE00 lvnE-->
    <xsl:output-character character="≉" string="&amp;#x2249;"/>
    <!--U02A70-00338 napE-->
    <!--U0224B-00338 napid-->
    <xsl:output-character character="≇" string="&amp;#x2247;"/>
    <!--U02A6D-00338 ncongdot-->
    <xsl:output-character character="≢" string="&amp;#x2262;"/>
    <xsl:output-character character="≱" string="&amp;#xE2A6;"/>
    <!--U02267-00338 ngE-->
    <!--U02A7E-00338 nges-->
    <!--U022D9-00338 nGg-->
    <xsl:output-character character="≵" string="&amp;#x2275;"/>
    <xsl:output-character character="≯" string="&amp;#x226F;"/>
    <!--U0226B-020D2 nGt-->
    <!--U0226B-00338 nGtv-->
    <xsl:output-character character="≰" string="&amp;#xE2A7;"/>
    <!--U02266-00338 nlE-->
    <!--U02A7D-00338 nles-->
    <!--U022D8-00338 nLl-->
    <xsl:output-character character="≴" string="&amp;#x2274;"/>
    <xsl:output-character character="≮" string="&amp;#x226E;"/>
    <!--U0226A-020D2 nLt-->
    <xsl:output-character character="⋪" string="&amp;#x22EA;"/>
    <xsl:output-character character="⋬" string="&amp;#x22EC;"/>
    <!--U0226A-00338 nLtv-->
    <xsl:output-character character="∤" string="&amp;#x2224;"/>
    <xsl:output-character character="∦" string="&amp;#x2226;"/>
    <xsl:output-character character="⊀" string="&amp;#x2280;"/>
    <xsl:output-character character="⋠" string="&amp;#x22E0;"/>
    <!--U02AAF-00338 npre-->
    <xsl:output-character character="⋫" string="&amp;#x22EB;"/>
    <xsl:output-character character="⋭" string="&amp;#x22ED;"/>
    <xsl:output-character character="⊁" string="&amp;#x2281;"/>
    <xsl:output-character character="⋡" string="&amp;#x22E1;"/>
    <!--U02AB0-00338 nsce-->
    <xsl:output-character character="≁" string="&amp;#x2241;"/>
    <xsl:output-character character="≄" string="&amp;#x2244;"/>
    <xsl:output-character character="∤" string="&amp;#xE2AA;"/>
    <xsl:output-character character="∦" string="&amp;#xE2AB;"/>
    <xsl:output-character character="⋢" string="&amp;#x22E2;"/>
    <xsl:output-character character="⋣" string="&amp;#x22E3;"/>
    <xsl:output-character character="⊄" string="&amp;#x2284;"/>
    <xsl:output-character character="⊈" string="&amp;#x2288;"/>
    <!--U02AC5-00338 nsubE-->
    <xsl:output-character character="⊅" string="&amp;#x2285;"/>
    <xsl:output-character character="⊉" string="&amp;#x2289;"/>
    <!--U02AC6-00338 nsupE-->
    <xsl:output-character character="≹" string="&amp;#x2279;"/>
    <xsl:output-character character="≸" string="&amp;#x2278;"/>
    <!--U0224D-020D2 nvap-->
    <xsl:output-character character="⊬" string="&amp;#x22AC;"/>
    <xsl:output-character character="⊭" string="&amp;#x22AD;"/>
    <xsl:output-character character="⊮" string="&amp;#x22AE;"/>
    <xsl:output-character character="⊯" string="&amp;#x22AF;"/>
    <!--U02265-020D2 nvge-->
    <!--U0003E-020D2 nvgt-->
    <!--U02264-020D2 nvle-->
    <!--U0003C-020D2 nvlt-->
    <!--U022B4-020D2 nvltrie-->
    <!--U022B5-020D2 nvrtrie-->
    <!--U0223C-020D2 nvsim-->
    <xsl:output-character character="⫳" string="&amp;#x2AF3;"/>
    <xsl:output-character character="⪹" string="&amp;#x22E8;"/>
    <xsl:output-character character="⪵" string="&amp;#xE2B3;"/>
    <xsl:output-character character="⋨" string="&amp;#x22E8;"/>
    <xsl:output-character character="⫮" string="&amp;#x2AEE;"/>
    <xsl:output-character character="⪺" string="&amp;#x22E9;"/>
    <xsl:output-character character="⪶" string="&amp;#xE2B5;"/>
    <xsl:output-character character="⋩" string="&amp;#x22E9;"/>
    <xsl:output-character character="≆" string="&amp;#x2246;"/>
    <xsl:output-character character="⌿" string="&amp;#x233F;"/>
    <xsl:output-character character="⊊" string="&amp;#x228A;"/>
    <xsl:output-character character="⫋" string="&amp;#x228A;"/>
    <xsl:output-character character="⊋" string="&amp;#x228B;"/>
    <xsl:output-character character="⫌" string="&amp;#x228B;"/>
    <!--U02282-020D2 vnsub-->
    <!--U02283-020D2 vnsup-->
    <!--U0228A-0FE00 vsubne-->
    <!--U02ACB-0FE00 vsubnE-->
    <!--U0228B-0FE00 vsupne-->
    <!--U02ACC-0FE00 vsupnE-->
    <!-- isoamsomap.xsl -->
    <xsl:output-character character="∠" string="&amp;#x2220;"/>
    <xsl:output-character character="⦤" string="&amp;#x29A4;"/>
    <xsl:output-character character="∡" string="&amp;#x2221;"/>
    <xsl:output-character character="⦨" string="&amp;#x29A8;"/>
    <xsl:output-character character="⦩" string="&amp;#x29A9;"/>
    <xsl:output-character character="⦪" string="&amp;#x29AA;"/>
    <xsl:output-character character="⦫" string="&amp;#x29AB;"/>
    <xsl:output-character character="⦬" string="&amp;#x29AC;"/>
    <xsl:output-character character="⦭" string="&amp;#x29AD;"/>
    <xsl:output-character character="⦮" string="&amp;#x29AE;"/>
    <xsl:output-character character="⦯" string="&amp;#x29AF;"/>
    <xsl:output-character character="⊾" string="&amp;#x22BE;"/>
    <xsl:output-character character="⦝" string="&amp;#x299D;"/>
    <xsl:output-character character="⎵" string="&amp;#x23B5;"/>
    <xsl:output-character character="⎶" string="&amp;#x23B6;"/>
    <xsl:output-character character="⦰" string="&amp;#x29B0;"/>
    <xsl:output-character character="ℶ" string="&amp;#x2136;"/>
    <xsl:output-character character="⧉" string="&amp;#x29C9;"/>
    <xsl:output-character character="‵" string="&amp;#x2035;"/>
    <xsl:output-character character="⁏" string="&amp;#x204F;"/>
    <xsl:output-character character="⦲" string="&amp;#x29B2;"/>
    <xsl:output-character character="⧃" string="&amp;#x29C3;"/>
    <xsl:output-character character="⧂" string="&amp;#x29C2;"/>
    <xsl:output-character character="∁" string="&amp;#x2201;"/>
    <xsl:output-character character="ℸ" string="&amp;#x2138;"/>
    <xsl:output-character character="⦱" string="&amp;#x29B1;"/>
    <xsl:output-character character="ℓ" string="&amp;#x2113;"/>
    <xsl:output-character character="∅" string="&amp;#xE2D3;"/>
    <xsl:output-character character="∅" string="&amp;#x2205;"/>
    <xsl:output-character character="ℷ" string="&amp;#x2137;"/>
    <xsl:output-character character="℩" string="&amp;#x2129;"/>
    <xsl:output-character character="ℑ" string="&amp;#x2111;"/>
    <xsl:output-character character="ı" string="&amp;#x0131;"/>
    <!--U0006A jmath-->
    <xsl:output-character character="⦴" string="&amp;#x29B4;"/>
    <xsl:output-character character="◺" string="&amp;#x25FA;"/>
    <xsl:output-character character="⊿" string="&amp;#x22BF;"/>
    <xsl:output-character character="℧" string="&amp;#x2127;"/>
    <!--U02220-020D2 nang-->
    <xsl:output-character character="∄" string="&amp;#x2204;"/>
    <xsl:output-character character="Ⓢ" string="&amp;#xE41D;"/>
    <xsl:output-character character="ℏ" string="&amp;#x210F;"/>
    <xsl:output-character character="ℏ" string="&amp;#x210F;"/>
    <xsl:output-character character="⦳" string="&amp;#x29B3;"/>
    <xsl:output-character character="⦥" string="&amp;#x29A5;"/>
    <xsl:output-character character="ℜ" string="&amp;#x211C;"/>
    <xsl:output-character character="⎴" string="&amp;#x23B4;"/>
    <xsl:output-character character="�" string="&amp;#xFFFD;"/>
    <xsl:output-character character="◸" string="&amp;#x25F8;"/>
    <xsl:output-character character="◹" string="&amp;#x25F9;"/>
    <xsl:output-character character="⦚" string="&amp;#x299A;"/>
    <xsl:output-character character="℘" string="&amp;#x2118;"/>
    <!-- isoamsrmap.xsl -->
    <xsl:output-character character="≊" string="&amp;#x224A;"/>
    <xsl:output-character character="⩰" string="&amp;#x2A70;"/>
    <xsl:output-character character="≋" string="&amp;#x224B;"/>
    <xsl:output-character character="≈" string="&amp;#x224D;"/>
    <xsl:output-character character="⫧" string="&amp;#x2AE7;"/>
    <xsl:output-character character="≌" string="&amp;#x224C;"/>
    <xsl:output-character character="϶" string="&amp;#xE420;"/>
    <xsl:output-character character="⋈" string="&amp;#x22C8;"/>
    <xsl:output-character character="∽" string="&amp;#x223D;"/>
    <xsl:output-character character="⋍" string="&amp;#x22CD;"/>
    <!--U0005C-02282 bsolhsub-->
    <xsl:output-character character="≎" string="&amp;#x224E;"/>
    <xsl:output-character character="≏" string="&amp;#x224F;"/>
    <xsl:output-character character="⪮" string="&amp;#x2AAE;"/>
    <xsl:output-character character="≗" string="&amp;#x2257;"/>
    <xsl:output-character character="∷" string="&amp;#x2237;"/>
    <xsl:output-character character="≔" string="&amp;#x2254;"/>
    <xsl:output-character character="⩴" string="&amp;#x2A74;"/>
    <xsl:output-character character="⩭" string="&amp;#x2A6D;"/>
    <xsl:output-character character="⫏" string="&amp;#x2ACF;"/>
    <xsl:output-character character="⫑" string="&amp;#x2AD1;"/>
    <xsl:output-character character="⫐" string="&amp;#x2AD0;"/>
    <xsl:output-character character="⫒" string="&amp;#x2AD2;"/>
    <xsl:output-character character="⋞" string="&amp;#x22DE;"/>
    <xsl:output-character character="⋟" string="&amp;#x22DF;"/>
    <xsl:output-character character="⊣" string="&amp;#x22A3;"/>
    <xsl:output-character character="⫤" string="&amp;#x2AE4;"/>
    <xsl:output-character character="⩮" string="&amp;#x2A6E;"/>
    <xsl:output-character character="≖" string="&amp;#x2256;"/>
    <xsl:output-character character="≕" string="&amp;#x2255;"/>
    <xsl:output-character character="⩷" string="&amp;#x2A77;"/>
    <xsl:output-character character="≑" string="&amp;#x2251;"/>
    <xsl:output-character character="≒" string="&amp;#x2252;"/>
    <xsl:output-character character="⪚" string="&amp;#x2A9A;"/>
    <xsl:output-character character="⪖" string="&amp;#x22DD;"/>
    <xsl:output-character character="⪘" string="&amp;#x2A98;"/>
    <xsl:output-character character="⪙" string="&amp;#x2A99;"/>
    <xsl:output-character character="⪕" string="&amp;#x22DC;"/>
    <xsl:output-character character="⪗" string="&amp;#x2A97;"/>
    <xsl:output-character character="≟" string="&amp;#x225F;"/>
    <xsl:output-character character="⩸" string="&amp;#x2A78;"/>
    <xsl:output-character character="≓" string="&amp;#x2253;"/>
    <xsl:output-character character="≐" string="&amp;#x2250;"/>
    <xsl:output-character character="≂" string="&amp;#x2242;"/>
    <xsl:output-character character="⩳" string="&amp;#x2A73;"/>
    <xsl:output-character character="⋔" string="&amp;#x22D4;"/>
    <xsl:output-character character="⫙" string="&amp;#x2AD9;"/>
    <xsl:output-character character="⌢" string="&amp;#x2322;"/>
    <xsl:output-character character="⪆" string="&amp;#x2273;"/>
    <xsl:output-character character="≧" string="&amp;#x2267;"/>
    <xsl:output-character character="⋛" string="&amp;#x22DB;"/>
    <xsl:output-character character="⪌" string="&amp;#x22DB;"/>
    <xsl:output-character character="⩾" string="&amp;#x227D;"/>
    <xsl:output-character character="⪩" string="&amp;#x2AA9;"/>
    <xsl:output-character character="⪀" string="&amp;#x2A80;"/>
    <xsl:output-character character="⪂" string="&amp;#x2A82;"/>
    <xsl:output-character character="⪄" string="&amp;#x2A84;"/>
    <!--U022DB-0FE00 gesl-->
    <xsl:output-character character="⪔" string="&amp;#x2A94;"/>
    <xsl:output-character character="⋙" string="&amp;#x22D9;"/>
    <xsl:output-character character="≷" string="&amp;#x2277;"/>
    <xsl:output-character character="⪥" string="&amp;#x2AA5;"/>
    <xsl:output-character character="⪒" string="&amp;#x2A92;"/>
    <xsl:output-character character="⪤" string="&amp;#x2AA4;"/>
    <xsl:output-character character="≳" string="&amp;#x2273;"/>
    <xsl:output-character character="⪎" string="&amp;#x2A8E;"/>
    <xsl:output-character character="⪐" string="&amp;#x2A90;"/>
    <xsl:output-character character="≫" string="&amp;#x226B;"/>
    <xsl:output-character character="⪧" string="&amp;#x2AA7;"/>
    <xsl:output-character character="⩺" string="&amp;#x2A7A;"/>
    <xsl:output-character character="⋗" string="&amp;#x22D7;"/>
    <xsl:output-character character="⩼" string="&amp;#x2A7C;"/>
    <xsl:output-character character="⥸" string="&amp;#x2978;"/>
    <xsl:output-character character="∻" string="&amp;#x223B;"/>
    <xsl:output-character character="⪅" string="&amp;#x2272;"/>
    <xsl:output-character character="⪫" string="&amp;#x2AAB;"/>
    <xsl:output-character character="⪭" string="&amp;#x2AAD;"/>
    <!--U02AAD-0FE00 lates-->
    <xsl:output-character character="≦" string="&amp;#x2266;"/>
    <xsl:output-character character="⋚" string="&amp;#x22DA;"/>
    <xsl:output-character character="⪋" string="&amp;#x22DA;"/>
    <xsl:output-character character="⩽" string="&amp;#xE425;"/>
    <xsl:output-character character="⪨" string="&amp;#x2AA8;"/>
    <xsl:output-character character="⩿" string="&amp;#x2A7F;"/>
    <xsl:output-character character="⪁" string="&amp;#x2A81;"/>
    <xsl:output-character character="⪃" string="&amp;#x2A83;"/>
    <!--U022DA-0FE00 lesg-->
    <xsl:output-character character="⪓" string="&amp;#x2A93;"/>
    <xsl:output-character character="≶" string="&amp;#x2276;"/>
    <xsl:output-character character="⪑" string="&amp;#x2A91;"/>
    <xsl:output-character character="⋘" string="&amp;#x22D8;"/>
    <xsl:output-character character="≲" string="&amp;#x2272;"/>
    <xsl:output-character character="⪍" string="&amp;#x2A8D;"/>
    <xsl:output-character character="⪏" string="&amp;#x2A8F;"/>
    <xsl:output-character character="≪" string="&amp;#x226A;"/>
    <xsl:output-character character="⪦" string="&amp;#x2AA6;"/>
    <xsl:output-character character="⩹" string="&amp;#x2A79;"/>
    <xsl:output-character character="⋖" string="&amp;#x22D6;"/>
    <xsl:output-character character="⥶" string="&amp;#x2976;"/>
    <xsl:output-character character="⩻" string="&amp;#x2A7B;"/>
    <xsl:output-character character="⊴" string="&amp;#x22B4;"/>
    <xsl:output-character character="⨩" string="&amp;#x2A29;"/>
    <xsl:output-character character="∺" string="&amp;#x223A;"/>
    <xsl:output-character character="∣" string="&amp;#x2223;"/>
    <xsl:output-character character="⫛" string="&amp;#x2ADB;"/>
    <xsl:output-character character="⊧" string="&amp;#x22A7;"/>
    <xsl:output-character character="∾" string="&amp;#x223E;"/>
    <xsl:output-character character="≺" string="&amp;#x227A;"/>
    <xsl:output-character character="⪻" string="&amp;#x2ABB;"/>
    <xsl:output-character character="⪷" string="&amp;#x227E;"/>
    <xsl:output-character character="≼" string="&amp;#x227C;"/>
    <xsl:output-character character="⪯" string="&amp;#x227C;"/>
    <xsl:output-character character="⪳" string="&amp;#x2AB3;"/>
    <xsl:output-character character="≾" string="&amp;#x227E;"/>
    <xsl:output-character character="⊰" string="&amp;#x22B0;"/>
    <xsl:output-character character="∶" string="&#160;:&#160;"/>
    <xsl:output-character character="⊵" string="&amp;#x22B5;"/>
    <xsl:output-character character="⧎" string="&amp;#x29CE;"/>
    <xsl:output-character character="≻" string="&amp;#x227B;"/>
    <xsl:output-character character="⪼" string="&amp;#x2ABC;"/>
    <xsl:output-character character="⪸" string="&amp;#x227F;"/>
    <xsl:output-character character="≽" string="&amp;#x227D;"/>
    <xsl:output-character character="⪰" string="&amp;#x227D;"/>
    <xsl:output-character character="⪴" string="&amp;#x2AB4;"/>
    <xsl:output-character character="≿" string="&amp;#x227F;"/>
    <xsl:output-character character="⩦" string="&amp;#x2A66;"/>
    <xsl:output-character character="⌢" string="&amp;#xE426;"/>
    <xsl:output-character character="⪞" string="&amp;#x2A9E;"/>
    <xsl:output-character character="⪠" string="&amp;#x2AA0;"/>
    <xsl:output-character character="⪝" string="&amp;#x2A9D;"/>
    <xsl:output-character character="⪟" string="&amp;#x2A9F;"/>
    <xsl:output-character character="∣" string="&amp;#xE301;"/>
    <xsl:output-character character="⌣" string="&amp;#x2323;"/>
    <xsl:output-character character="⪪" string="&amp;#x2AAA;"/>
    <xsl:output-character character="⪬" string="&amp;#x2AAC;"/>
    <!--U02AAC-0FE00 smtes-->
    <xsl:output-character character="∥" string="&amp;#xE302;"/>
    <xsl:output-character character="⊏" string="&amp;#x228F;"/>
    <xsl:output-character character="⊑" string="&amp;#x2291;"/>
    <xsl:output-character character="⊐" string="&amp;#x2290;"/>
    <xsl:output-character character="⊒" string="&amp;#x2292;"/>
    <xsl:output-character character="⌣" string="&amp;#xE303;"/>
    <xsl:output-character character="⋐" string="&amp;#x22D0;"/>
    <xsl:output-character character="⫅" string="&amp;#x2286;"/>
    <xsl:output-character character="⫃" string="&amp;#x2AC3;"/>
    <xsl:output-character character="⫁" string="&amp;#x2AC1;"/>
    <xsl:output-character character="⪿" string="&amp;#x2ABF;"/>
    <xsl:output-character character="⥹" string="&amp;#x2979;"/>
    <xsl:output-character character="⫇" string="&amp;#x2AC7;"/>
    <xsl:output-character character="⫕" string="&amp;#x2AD5;"/>
    <xsl:output-character character="⫓" string="&amp;#x2AD3;"/>
    <xsl:output-character character="⋑" string="&amp;#x22D1;"/>
    <xsl:output-character character="⫘" string="&amp;#x2AD8;"/>
    <xsl:output-character character="⫆" string="&amp;#x2287;"/>
    <xsl:output-character character="⫄" string="&amp;#x2AC4;"/>
    <!--U02283-0002F suphsol-->
    <xsl:output-character character="⫗" string="&amp;#x2AD7;"/>
    <xsl:output-character character="⥻" string="&amp;#x297B;"/>
    <xsl:output-character character="⫂" string="&amp;#x2AC2;"/>
    <xsl:output-character character="⫀" string="&amp;#x2AC0;"/>
    <xsl:output-character character="⫈" string="&amp;#x2AC8;"/>
    <xsl:output-character character="⫔" string="&amp;#x2AD4;"/>
    <xsl:output-character character="⫖" string="&amp;#x2AD6;"/>
    <xsl:output-character character="≈" string="&amp;#xE306;"/>
    <xsl:output-character character="∼" string="&amp;#xE429;"/>
    <xsl:output-character character="⫚" string="&amp;#x2ADA;"/>
    <xsl:output-character character="≜" string="&amp;#x225C;"/>
    <xsl:output-character character="≬" string="&amp;#x226C;"/>
    <xsl:output-character character="⫨" string="&amp;#x2AE8;"/>
    <xsl:output-character character="⫫" string="&amp;#x2AEB;"/>
    <xsl:output-character character="⫩" string="&amp;#x2AE9;"/>
    <xsl:output-character character="⊢" string="&amp;#x22A2;"/>
    <xsl:output-character character="⊨" string="&amp;#x22A8;"/>
    <xsl:output-character character="⊩" string="&amp;#x22A9;"/>
    <xsl:output-character character="⊫" string="&amp;#x22AB;"/>
    <xsl:output-character character="⫦" string="&amp;#x2AE6;"/>
    <xsl:output-character character="⊲" string="&amp;#x22B2;"/>
    <xsl:output-character character="∝" string="&amp;#x221D;"/>
    <xsl:output-character character="⊳" string="&amp;#x22B3;"/>
    <xsl:output-character character="⊪" string="&amp;#x22AA;"/>
    <!-- isogrk1map.xsl -->
    <xsl:output-character character="α" string="&amp;#x03B1;"/>
    <xsl:output-character character="Α" string="&amp;#x0391;"/>
    <xsl:output-character character="β" string="&amp;#x03B2;"/>
    <xsl:output-character character="Β" string="&amp;#x0392;"/>
    <xsl:output-character character="δ" string="&amp;#x03B4;"/>
    <xsl:output-character character="Δ" string="&amp;#x0394;"/>
    <xsl:output-character character="η" string="&amp;#x03B7;"/>
    <xsl:output-character character="Η" string="&amp;#x0397;"/>
    <xsl:output-character character="ε" string="&amp;#x03B5;"/>
    <xsl:output-character character="Ε" string="&amp;#x0395;"/>
    <xsl:output-character character="γ" string="&amp;#x03B3;"/>
    <xsl:output-character character="Γ" string="&amp;#x0393;"/>
    <xsl:output-character character="ι" string="&amp;#x03B9;"/>
    <xsl:output-character character="Ι" string="&amp;#x0399;"/>
    <xsl:output-character character="κ" string="&amp;#x03BA;"/>
    <xsl:output-character character="Κ" string="&amp;#x039A;"/>
    <xsl:output-character character="χ" string="&amp;#x03C7;"/>
    <xsl:output-character character="Χ" string="&amp;#x03A7;"/>
    <xsl:output-character character="λ" string="&amp;#x03BB;"/>
    <xsl:output-character character="Λ" string="&amp;#x039B;"/>
    <xsl:output-character character="μ" string="&amp;#x03BC;"/>
    <xsl:output-character character="Μ" string="&amp;#x039C;"/>
    <xsl:output-character character="ν" string="&amp;#x03BD;"/>
    <xsl:output-character character="Ν" string="&amp;#x039D;"/>
    <xsl:output-character character="ο" string="&amp;#x03BF;"/>
    <xsl:output-character character="Ο" string="&amp;#x039F;"/>
    <xsl:output-character character="ω" string="&amp;#x03C9;"/>
    <xsl:output-character character="Ω" string="&amp;#x03A9;"/>
    <xsl:output-character character="π" string="&amp;#x03C0;"/>
    <xsl:output-character character="Π" string="&amp;#x03A0;"/>
    <xsl:output-character character="φ" string="&amp;#x03C6;"/>
    <xsl:output-character character="Φ" string="&amp;#x03A6;"/>
    <xsl:output-character character="ψ" string="&amp;#x03C8;"/>
    <xsl:output-character character="Ψ" string="&amp;#x03A8;"/>
    <xsl:output-character character="ρ" string="&amp;#x03C1;"/>
    <xsl:output-character character="Ρ" string="&amp;#x03A1;"/>
    <xsl:output-character character="ς" string="&amp;#x03C2;"/>
    <xsl:output-character character="σ" string="&amp;#x03C3;"/>
    <xsl:output-character character="Σ" string="&amp;#x03A3;"/>
    <xsl:output-character character="τ" string="&amp;#x03C4;"/>
    <xsl:output-character character="Τ" string="&amp;#x03A4;"/>
    <xsl:output-character character="θ" string="&amp;#x03B8;"/>
    <xsl:output-character character="Θ" string="&amp;#x0398;"/>
    <xsl:output-character character="υ" string="&amp;#x03C5;"/>
    <xsl:output-character character="Υ" string="&amp;#x03A5;"/>
    <xsl:output-character character="ξ" string="&amp;#x03BE;"/>
    <xsl:output-character character="Ξ" string="&amp;#x039E;"/>
    <xsl:output-character character="ζ" string="&amp;#x03B6;"/>
    <xsl:output-character character="Ζ" string="&amp;#x0396;"/>
    <!-- isogrk2map.xsl -->
    <xsl:output-character character="ά" string="&amp;#x03AC;"/>
    <xsl:output-character character="Ά" string="&amp;#x0386;"/>
    <xsl:output-character character="έ" string="&amp;#x03AD;"/>
    <xsl:output-character character="Έ" string="&amp;#x0388;"/>
    <xsl:output-character character="ή" string="&amp;#x03AE;"/>
    <xsl:output-character character="Ή" string="&amp;#x0389;"/>
    <xsl:output-character character="ί" string="&amp;#x03AF;"/>
    <xsl:output-character character="Ί" string="&amp;#x038A;"/>
    <xsl:output-character character="ΐ" string="&amp;#x0390;"/>
    <xsl:output-character character="ϊ" string="&amp;#x03CA;"/>
    <xsl:output-character character="Ϊ" string="&amp;#x03AA;"/>
    <xsl:output-character character="ό" string="&amp;#x03CC;"/>
    <xsl:output-character character="Ό" string="&amp;#x038C;"/>
    <xsl:output-character character="ώ" string="&amp;#x03CE;"/>
    <xsl:output-character character="Ώ" string="&amp;#x038F;"/>
    <xsl:output-character character="ύ" string="&amp;#x03CD;"/>
    <xsl:output-character character="Ύ" string="&amp;#x038E;"/>
    <xsl:output-character character="ΰ" string="&amp;#x03B0;"/>
    <xsl:output-character character="ϋ" string="&amp;#x03CB;"/>
    <xsl:output-character character="Ϋ" string="&amp;#x03AB;"/>
    <!-- isogrk3map.xsl -->
    <xsl:output-character character="α" string="&amp;#x03B1;"/>
    <xsl:output-character character="β" string="&amp;#x03B2;"/>
    <xsl:output-character character="χ" string="&amp;#x03C7;"/>
    <xsl:output-character character="δ" string="&amp;#x03B4;"/>
    <xsl:output-character character="Δ" string="&amp;#x0394;"/>
    <xsl:output-character character="ϵ" string="&amp;#x220A;"/>
    <xsl:output-character character="ε" string="&amp;#x03B5;"/>
    <xsl:output-character character="η" string="&amp;#x03B7;"/>
    <xsl:output-character character="γ" string="&amp;#x03B3;"/>
    <xsl:output-character character="Γ" string="&amp;#x0393;"/>
    <xsl:output-character character="ϝ" string="&amp;#x03DC;"/>
    <xsl:output-character character="Ϝ" string="&amp;#x03DC;"/>
    <xsl:output-character character="ι" string="&amp;#x03B9;"/>
    <xsl:output-character character="κ" string="&amp;#x03BA;"/>
    <xsl:output-character character="ϰ" string="&amp;#x03F0;"/>
    <xsl:output-character character="λ" string="&amp;#x03BB;"/>
    <xsl:output-character character="Λ" string="&amp;#x039B;"/>
    <xsl:output-character character="μ" string="&amp;#x03BC;"/>
    <xsl:output-character character="ν" string="&amp;#x03BD;"/>
    <xsl:output-character character="ω" string="&amp;#x03C9;"/>
    <xsl:output-character character="Ω" string="&amp;#x03A9;"/>
    <xsl:output-character character="ϕ" string="&amp;#x03C6;"/>
    <xsl:output-character character="Φ" string="&amp;#x03A6;"/>
    <xsl:output-character character="φ" string="&amp;#x03D5;"/>
    <xsl:output-character character="" string="&amp;#x03C6;"/>
    <xsl:output-character character="π" string="&amp;#x03C0;"/>
    <xsl:output-character character="Π" string="&amp;#x03A0;"/>
    <xsl:output-character character="ϖ" string="&amp;#x03D6;"/>
    <xsl:output-character character="ψ" string="&amp;#x03C8;"/>
    <xsl:output-character character="Ψ" string="&amp;#x03A8;"/>
    <xsl:output-character character="ρ" string="&amp;#x03C1;"/>
    <xsl:output-character character="ϱ" string="&amp;#x03F1;"/>
    <xsl:output-character character="σ" string="&amp;#x03C3;"/>
    <xsl:output-character character="Σ" string="&amp;#x03A3;"/>
    <xsl:output-character character="ς" string="&amp;#x03C2;"/>
    <xsl:output-character character="τ" string="&amp;#x03C4;"/>
    <xsl:output-character character="θ" string="&amp;#x03B8;"/>
    <xsl:output-character character="Θ" string="&amp;#x0398;"/>
    <xsl:output-character character="ϑ" string="&amp;#x03D1;"/>
    <xsl:output-character character="υ" string="&amp;#x03C5;"/>
    <xsl:output-character character="ϒ" string="&amp;#x03D2;"/>
    <xsl:output-character character="ξ" string="&amp;#x03BE;"/>
    <xsl:output-character character="Ξ" string="&amp;#x039E;"/>
    <xsl:output-character character="ζ" string="&amp;#x03B6;"/>
    <!-- isotechmap.xsl -->
    <xsl:output-character character="∿" string="&amp;#x223F;"/>
    <xsl:output-character character="ℵ" string="&amp;#x2135;"/>
    <xsl:output-character character="∧" string="&amp;#x2227;"/>
    <xsl:output-character character="⩓" string="&amp;#x2A53;"/>
    <xsl:output-character character="⩕" string="&amp;#x2A55;"/>
    <xsl:output-character character="⩜" string="&amp;#x2A5C;"/>
    <xsl:output-character character="⩘" string="&amp;#x2A58;"/>
    <xsl:output-character character="⩚" string="&amp;#x2A5A;"/>
    <xsl:output-character character="∟" string="&amp;#x221F;"/>
    <xsl:output-character character="∢" string="&amp;#x2222;"/>
    <xsl:output-character character="Å" string="&amp;#x212B;"/>
    <xsl:output-character character="≈" string="&amp;#x2248;"/>
    <xsl:output-character character="⩯" string="&amp;#x2A6F;"/>
    <xsl:output-character character="∳" string="&amp;#x2233;"/>
    <xsl:output-character character="⨑" string="&amp;#x2A11;"/>
    <xsl:output-character character="∵" string="&amp;#x2235;"/>
    <xsl:output-character character="ℬ" string="&amp;#x212C;"/>
    <!--U0003D-020E5 bne-->
    <!--U02261-020E5 bnequiv-->
    <xsl:output-character character="⌐" string="&amp;#x2310;"/>
    <xsl:output-character character="⫭" string="&amp;#x2AED;"/>
    <xsl:output-character character="⊥" string="&amp;#x22A5;"/>
    <xsl:output-character character="∩" string="&amp;#x2229;"/>
    <xsl:output-character character="∰" string="&amp;#x2230;"/>
    <xsl:output-character character="⨐" string="&amp;#x2A10;"/>
    <xsl:output-character character="∘" string="&amp;#x2218;"/>
    <xsl:output-character character="≅" string="&amp;#x2245;"/>
    <xsl:output-character character="∮" string="&amp;#x222E;"/>
    <xsl:output-character character="∯" string="&amp;#x222F;"/>
    <xsl:output-character character="⋯" string="&amp;#x22EF;"/>
    <xsl:output-character character="∪" string="&amp;#x222A;"/>
    <xsl:output-character character="∲" string="&amp;#x2232;"/>
    <xsl:output-character character="∱" string="&amp;#x2231;"/>
    <xsl:output-character character="⌭" string="&amp;#x232D;"/>
    <xsl:output-character character="⋲" string="&amp;#x22F2;"/>
    <xsl:output-character character="¨" string="&amp;#x0308;"/>
    <xsl:output-character character="⃜" string="&amp;#x20DC;"/>
    <xsl:output-character character="⧶" string="&amp;#x29F6;"/>
    <xsl:output-character character="⋱" string="&amp;#x22F1;"/>
    <xsl:output-character character="⦦" string="&amp;#x29A6;"/>
    <xsl:output-character character="�" string="&amp;#xFFFD;"/>
    <xsl:output-character character="⋕" string="&amp;#x22D5;"/>
    <xsl:output-character character="⧣" string="&amp;#x29E3;"/>
    <xsl:output-character character="≡" string="&amp;#x2261;"/>
    <xsl:output-character character="⧥" string="&amp;#x29E5;"/>
    <xsl:output-character character="∃" string="&amp;#x2203;"/>
    <xsl:output-character character="▱" string="&amp;#x25B1;"/>
    <xsl:output-character character="ƒ" string="&amp;#x0192;"/>
    <xsl:output-character character="∀" string="&amp;#x2200;"/>
    <xsl:output-character character="⨍" string="&amp;#x2A0D;"/>
    <xsl:output-character character="≥" string="&amp;#x2265;"/>
    <xsl:output-character character="ℋ" string="&amp;#x210B;"/>
    <xsl:output-character character="⇔" string="&amp;#xE365;"/>
    <xsl:output-character character="⧜" string="&amp;#x29DC;"/>
    <xsl:output-character character="Ƶ" string="&amp;#x01B5;"/>
    <xsl:output-character character="∞" string="&amp;#x221E;"/>
    <xsl:output-character character="⧝" string="&amp;#x29DD;"/>
    <xsl:output-character character="∫" string="&amp;#x222B;"/>
    <xsl:output-character character="∬" string="&amp;#x222C;"/>
    <xsl:output-character character="⨗" string="&amp;#x2A17;"/>
    <xsl:output-character character="∈" string="&amp;#x220A;"/>
    <xsl:output-character character="⋵" string="&amp;#x22F5;"/>
    <xsl:output-character character="⋹" string="&amp;#x22F9;"/>
    <xsl:output-character character="⋴" string="&amp;#x22F4;"/>
    <xsl:output-character character="⋳" string="&amp;#x22F3;"/>
    <xsl:output-character character="∈" string="&amp;#x2208;"/>
    <xsl:output-character character="ℒ" string="&amp;#x2112;"/>
    <xsl:output-character character="〈" string="&amp;#x3008;"/>
    <xsl:output-character character="《" string="&amp;#x300A;"/>
    <xsl:output-character character="⇐" string="&amp;#x21D0;"/>
    <xsl:output-character character="〔" string="&amp;#x3014;"/>
    <xsl:output-character character="≤" string="&amp;#x2264;"/>
    <xsl:output-character character="〘" string="&amp;#x3018;"/>
    <xsl:output-character character="〚" string="&amp;#x301A;"/>
    <xsl:output-character character="⦅" string="&amp;#x2985;"/>
    <xsl:output-character character="∗" string="&amp;#x2217;"/>
    <xsl:output-character character="−" string="&amp;#x2212;"/>
    <xsl:output-character character="∓" string="&amp;#x2213;"/>
    <xsl:output-character character="∇" string="&amp;#x2207;"/>
    <xsl:output-character character="≠" string="&amp;#x2260;"/>
    <!--U02250-00338 nedot-->
    <xsl:output-character character="⫲" string="&amp;#x2AF2;"/>
    <xsl:output-character character="∋" string="&amp;#x220D;"/>
    <xsl:output-character character="⋼" string="&amp;#x22FC;"/>
    <xsl:output-character character="⋺" string="&amp;#x22FA;"/>
    <xsl:output-character character="∋" string="&amp;#x220B;"/>
    <xsl:output-character character="⫬" string="&amp;#x00AC;"/>
    <xsl:output-character character="∉" string="&amp;#x2209;"/>
    <!--U022F5-00338 notindot-->
    <!--U022F9-00338 notinE-->
    <xsl:output-character character="∉" string="&amp;#x2209;"/>
    <xsl:output-character character="⋷" string="&amp;#x22F7;"/>
    <xsl:output-character character="⋶" string="&amp;#x22F6;"/>
    <xsl:output-character character="∌" string="&amp;#x220C;"/>
    <xsl:output-character character="∌" string="&amp;#x220C;"/>
    <xsl:output-character character="⋾" string="&amp;#x22FE;"/>
    <xsl:output-character character="⋽" string="&amp;#x22FD;"/>
    <!--U02AFD-020E5 nparsl-->
    <!--U02202-00338 npart-->
    <xsl:output-character character="⨔" string="&amp;#x2A14;"/>
    <xsl:output-character character="⧞" string="&amp;#x29DE;"/>
    <xsl:output-character character="⦻" string="&amp;#x29BB;"/>
    <xsl:output-character character="∨" string="&amp;#x2228;"/>
    <xsl:output-character character="⩔" string="&amp;#x2A54;"/>
    <xsl:output-character character="⩝" string="&amp;#x2A5D;"/>
    <xsl:output-character character="ℴ" string="&amp;#x2134;"/>
    <xsl:output-character character="⩖" string="&amp;#x2A56;"/>
    <xsl:output-character character="⩗" string="&amp;#x2A57;"/>
    <xsl:output-character character="⩛" string="&amp;#x2A5B;"/>
    <xsl:output-character character="∥" string="&amp;#x2225;"/>
    <xsl:output-character character="⫽" string="&amp;#x2AFD;"/>
    <xsl:output-character character="∂" string="&amp;#x2202;"/>
    <xsl:output-character character="‰" string="&amp;#x2030;"/>
    <xsl:output-character character="⊥" string="&amp;#x22A5;"/>
    <xsl:output-character character="‱" string="&amp;#x2031;"/>
    <xsl:output-character character="ℳ" string="&amp;#x2133;"/>
    <xsl:output-character character="⨕" string="&amp;#x2A15;"/>
    <xsl:output-character character="′" string="&amp;#x2032;"/>
    <xsl:output-character character="″" string="&amp;#x2033;"/>
    <xsl:output-character character="⌮" string="&amp;#x232E;"/>
    <xsl:output-character character="⌒" string="&amp;#x2312;"/>
    <xsl:output-character character="⌓" string="&amp;#x2313;"/>
    <xsl:output-character character="∝" string="&amp;#x221D;"/>
    <xsl:output-character character="⨌" string="&amp;#x2A0C;"/>
    <xsl:output-character character="⁗" string="&amp;#x2057;"/>
    <xsl:output-character character="⨖" string="&amp;#x2A16;"/>
    <xsl:output-character character="√" string="&amp;#x221A;"/>
    <xsl:output-character character="〉" string="&amp;#x3009;"/>
    <xsl:output-character character="》" string="&amp;#x300B;"/>
    <xsl:output-character character="⇒" string="&amp;#x2192;"/>
    <xsl:output-character character="〕" string="&amp;#x3015;"/>
    <xsl:output-character character="〙" string="&amp;#x3019;"/>
    <xsl:output-character character="〛" string="&amp;#x301B;"/>
    <xsl:output-character character="⦆" string="&amp;#x2986;"/>
    <xsl:output-character character="⨒" string="&amp;#x2A12;"/>
    <xsl:output-character character="⨓" string="&amp;#x2A13;"/>
    <xsl:output-character character="∼" string="&amp;#x223C;"/>
    <xsl:output-character character="⩪" string="&amp;#x2A6A;"/>
    <xsl:output-character character="≃" string="&amp;#x2243;"/>
    <xsl:output-character character="⧤" string="&amp;#x29E4;"/>
    <xsl:output-character character="□" string="&amp;#x25A1;"/>
    <xsl:output-character character="▪" string="&amp;#x25AA;"/>
    <xsl:output-character character="¯" string="&amp;#x00AF;"/>
    <xsl:output-character character="⊂" string="&amp;#x2282;"/>
    <xsl:output-character character="⊆" string="&amp;#x2286;"/>
    <xsl:output-character character="⊃" string="&amp;#x2283;"/>
    <xsl:output-character character="⊇" string="&amp;#x2287;"/>
    <xsl:output-character character="⃛" string="&amp;#x20DB;"/>
    <xsl:output-character character="∴" string="&amp;#x2234;"/>
    <xsl:output-character character="∭" string="&amp;#x222D;"/>
    <xsl:output-character character="⊤" string="&amp;#x22A4;"/>
    <xsl:output-character character="⌶" string="&amp;#x2336;"/>
    <xsl:output-character character="⫱" string="&amp;#x2AF1;"/>
    <xsl:output-character character="‴" string="&amp;#x2034;"/>
    <xsl:output-character character="⋰" string="&amp;#x22F0;"/>
    <xsl:output-character character="⦧" string="&amp;#x29A7;"/>
    <xsl:output-character character="⦜" string="&amp;#x299C;"/>
    <xsl:output-character character="≚" string="&amp;#x225A;"/>
    <xsl:output-character character="‖" string="&amp;#x2016;"/>
    <xsl:output-character character="≙" string="&amp;#x2259;"/>
    <xsl:output-character character="⋻" string="&amp;#x22FB;"/>
    <!-- genentitymap.xsl -->
    <xsl:output-character character="∿" string="&amp;#x223F;"/>
    <xsl:output-character character="ℵ" string="&amp;#x2135;"/>
    <xsl:output-character character="∧" string="&amp;#x2227;"/>
    <xsl:output-character character="⩓" string="&amp;#x2A53;"/>
    <xsl:output-character character="⩕" string="&amp;#x2A55;"/>
    <xsl:output-character character="⩜" string="&amp;#x2A5C;"/>
    <xsl:output-character character="⩘" string="&amp;#x2A58;"/>
    <xsl:output-character character="⩚" string="&amp;#x2A5A;"/>
    <xsl:output-character character="∟" string="&amp;#x221F;"/>
    <xsl:output-character character="∢" string="&amp;#x2222;"/>
    <xsl:output-character character="Å" string="&amp;#x212B;"/>
    <xsl:output-character character="≈" string="&amp;#x2248;"/>
    <xsl:output-character character="⩯" string="&amp;#x2A6F;"/>
    <xsl:output-character character="∳" string="&amp;#x2233;"/>
    <xsl:output-character character="⨑" string="&amp;#x2A11;"/>
    <xsl:output-character character="∵" string="&amp;#x2235;"/>
    <xsl:output-character character="ℬ" string="&amp;#x212C;"/>
    <!--U0003D-020E5 bne-->
    <!--U02261-020E5 bnequiv-->
    <xsl:output-character character="⌐" string="&amp;#x2310;"/>
    <xsl:output-character character="⫭" string="&amp;#x2AED;"/>
    <xsl:output-character character="⊥" string="&amp;#x22A5;"/>
    <xsl:output-character character="∩" string="&amp;#x2229;"/>
    <xsl:output-character character="∰" string="&amp;#x2230;"/>
    <xsl:output-character character="⨐" string="&amp;#x2A10;"/>
    <xsl:output-character character="∘" string="&amp;#x2218;"/>
    <xsl:output-character character="≅" string="&amp;#x2245;"/>
    <xsl:output-character character="∮" string="&amp;#x222E;"/>
    <xsl:output-character character="∯" string="&amp;#x222F;"/>
    <xsl:output-character character="⋯" string="&amp;#x22EF;"/>
    <xsl:output-character character="∪" string="&amp;#x222A;"/>
    <xsl:output-character character="∲" string="&amp;#x2232;"/>
    <xsl:output-character character="∱" string="&amp;#x2231;"/>
    <xsl:output-character character="⌭" string="&amp;#x232D;"/>
    <xsl:output-character character="⋲" string="&amp;#x22F2;"/>
    <xsl:output-character character="¨" string="&amp;#x0308;"/>
    <xsl:output-character character="⃜" string="&amp;#x20DC;"/>
    <xsl:output-character character="⧶" string="&amp;#x29F6;"/>
    <xsl:output-character character="⋱" string="&amp;#x22F1;"/>
    <xsl:output-character character="⦦" string="&amp;#x29A6;"/>
    <xsl:output-character character="�" string="&amp;#xFFFD;"/>
    <xsl:output-character character="⋕" string="&amp;#x22D5;"/>
    <xsl:output-character character="⧣" string="&amp;#x29E3;"/>
    <xsl:output-character character="≡" string="&amp;#x2261;"/>
    <xsl:output-character character="⧥" string="&amp;#x29E5;"/>
    <xsl:output-character character="∃" string="&amp;#x2203;"/>
    <xsl:output-character character="▱" string="&amp;#x25B1;"/>
    <xsl:output-character character="ƒ" string="&amp;#x0192;"/>
    <xsl:output-character character="∀" string="&amp;#x2200;"/>
    <xsl:output-character character="⨍" string="&amp;#x2A0D;"/>
    <xsl:output-character character="≥" string="&amp;#x2265;"/>
    <xsl:output-character character="ℋ" string="&amp;#x210B;"/>
    <xsl:output-character character="⇔" string="&amp;#xE365;"/>
    <xsl:output-character character="⧜" string="&amp;#x29DC;"/>
    <xsl:output-character character="Ƶ" string="&amp;#x01B5;"/>
    <xsl:output-character character="∞" string="&amp;#x221E;"/>
    <xsl:output-character character="⧝" string="&amp;#x29DD;"/>
    <xsl:output-character character="∫" string="&amp;#x222B;"/>
    <xsl:output-character character="∬" string="&amp;#x222C;"/>
    <xsl:output-character character="⨗" string="&amp;#x2A17;"/>
    <xsl:output-character character="∈" string="&amp;#x220A;"/>
    <xsl:output-character character="⋵" string="&amp;#x22F5;"/>
    <xsl:output-character character="⋹" string="&amp;#x22F9;"/>
    <xsl:output-character character="⋴" string="&amp;#x22F4;"/>
    <xsl:output-character character="⋳" string="&amp;#x22F3;"/>
    <xsl:output-character character="∈" string="&amp;#x2208;"/>
    <xsl:output-character character="ℒ" string="&amp;#x2112;"/>
    <xsl:output-character character="〈" string="&amp;#x3008;"/>
    <xsl:output-character character="《" string="&amp;#x300A;"/>
    <xsl:output-character character="⇐" string="&amp;#x21D0;"/>
    <xsl:output-character character="〔" string="&amp;#x3014;"/>
    <xsl:output-character character="≤" string="&amp;#x2264;"/>
    <xsl:output-character character="〘" string="&amp;#x3018;"/>
    <xsl:output-character character="〚" string="&amp;#x301A;"/>
    <xsl:output-character character="⦅" string="&amp;#x2985;"/>
    <xsl:output-character character="∗" string="&amp;#x2217;"/>
    <xsl:output-character character="−" string="&amp;#x2212;"/>
    <xsl:output-character character="∓" string="&amp;#x2213;"/>
    <xsl:output-character character="∇" string="&amp;#x2207;"/>
    <xsl:output-character character="≠" string="&amp;#x2260;"/>
    <!--U02250-00338 nedot-->
    <xsl:output-character character="⫲" string="&amp;#x2AF2;"/>
    <xsl:output-character character="∋" string="&amp;#x220D;"/>
    <xsl:output-character character="⋼" string="&amp;#x22FC;"/>
    <xsl:output-character character="⋺" string="&amp;#x22FA;"/>
    <xsl:output-character character="∋" string="&amp;#x220B;"/>
    <xsl:output-character character="⫬" string="&amp;#x00AC;"/>
    <xsl:output-character character="∉" string="&amp;#x2209;"/>
    <!--U022F5-00338 notindot-->
    <!--U022F9-00338 notinE-->
    <xsl:output-character character="∉" string="&amp;#x2209;"/>
    <xsl:output-character character="⋷" string="&amp;#x22F7;"/>
    <xsl:output-character character="⋶" string="&amp;#x22F6;"/>
    <xsl:output-character character="∌" string="&amp;#x220C;"/>
    <xsl:output-character character="∌" string="&amp;#x220C;"/>
    <xsl:output-character character="⋾" string="&amp;#x22FE;"/>
    <xsl:output-character character="⋽" string="&amp;#x22FD;"/>
    <!--U02AFD-020E5 nparsl-->
    <!--U02202-00338 npart-->
    <xsl:output-character character="⨔" string="&amp;#x2A14;"/>
    <xsl:output-character character="⧞" string="&amp;#x29DE;"/>
    <xsl:output-character character="⦻" string="&amp;#x29BB;"/>
    <xsl:output-character character="∨" string="&amp;#x2228;"/>
    <xsl:output-character character="⩔" string="&amp;#x2A54;"/>
    <xsl:output-character character="⩝" string="&amp;#x2A5D;"/>
    <xsl:output-character character="ℴ" string="&amp;#x2134;"/>
    <xsl:output-character character="⩖" string="&amp;#x2A56;"/>
    <xsl:output-character character="⩗" string="&amp;#x2A57;"/>
    <xsl:output-character character="⩛" string="&amp;#x2A5B;"/>
    <xsl:output-character character="∥" string="&amp;#x2225;"/>
    <xsl:output-character character="⫽" string="&amp;#x2AFD;"/>
    <xsl:output-character character="∂" string="&amp;#x2202;"/>
    <xsl:output-character character="‰" string="&amp;#x2030;"/>
    <xsl:output-character character="⊥" string="&amp;#x22A5;"/>
    <xsl:output-character character="‱" string="&amp;#x2031;"/>
    <xsl:output-character character="ℳ" string="&amp;#x2133;"/>
    <xsl:output-character character="⨕" string="&amp;#x2A15;"/>
    <xsl:output-character character="′" string="&amp;#x2032;"/>
    <xsl:output-character character="″" string="&amp;#x2033;"/>
    <xsl:output-character character="⌮" string="&amp;#x232E;"/>
    <xsl:output-character character="⌒" string="&amp;#x2312;"/>
    <xsl:output-character character="⌓" string="&amp;#x2313;"/>
    <xsl:output-character character="∝" string="&amp;#x221D;"/>
    <xsl:output-character character="⨌" string="&amp;#x2A0C;"/>
    <xsl:output-character character="⁗" string="&amp;#x2057;"/>
    <xsl:output-character character="⨖" string="&amp;#x2A16;"/>
    <xsl:output-character character="√" string="&amp;#x221A;"/>
    <xsl:output-character character="〉" string="&amp;#x3009;"/>
    <xsl:output-character character="》" string="&amp;#x300B;"/>
    <xsl:output-character character="⇒" string="&amp;#x2192;"/>
    <xsl:output-character character="〕" string="&amp;#x3015;"/>
    <xsl:output-character character="〙" string="&amp;#x3019;"/>
    <xsl:output-character character="〛" string="&amp;#x301B;"/>
    <xsl:output-character character="⦆" string="&amp;#x2986;"/>
    <xsl:output-character character="⨒" string="&amp;#x2A12;"/>
    <xsl:output-character character="⨓" string="&amp;#x2A13;"/>
    <xsl:output-character character="∼" string="&amp;#x223C;"/>
    <xsl:output-character character="⩪" string="&amp;#x2A6A;"/>
    <xsl:output-character character="≃" string="&amp;#x2243;"/>
    <xsl:output-character character="⧤" string="&amp;#x29E4;"/>
    <xsl:output-character character="□" string="&amp;#x25A1;"/>
    <xsl:output-character character="▪" string="&amp;#x25AA;"/>
    <xsl:output-character character="¯" string="&amp;#x00AF;"/>
    <xsl:output-character character="⊂" string="&amp;#x2282;"/>
    <xsl:output-character character="⊆" string="&amp;#x2286;"/>
    <xsl:output-character character="⊃" string="&amp;#x2283;"/>
    <xsl:output-character character="⊇" string="&amp;#x2287;"/>
    <xsl:output-character character="⃛" string="&amp;#x20DB;"/>
    <xsl:output-character character="∴" string="&amp;#x2234;"/>
    <xsl:output-character character="∭" string="&amp;#x222D;"/>
    <xsl:output-character character="⊤" string="&amp;#x22A4;"/>
    <xsl:output-character character="⌶" string="&amp;#x2336;"/>
    <xsl:output-character character="⫱" string="&amp;#x2AF1;"/>
    <xsl:output-character character="‴" string="&amp;#x2034;"/>
    <xsl:output-character character="⋰" string="&amp;#x22F0;"/>
    <xsl:output-character character="⦧" string="&amp;#x29A7;"/>
    <xsl:output-character character="⦜" string="&amp;#x299C;"/>
    <xsl:output-character character="≚" string="&amp;#x225A;"/>
    <xsl:output-character character="‖" string="&amp;#x2016;"/>
    <xsl:output-character character="≙" string="&amp;#x2259;"/>
    <xsl:output-character character="⋻" string="&amp;#x22FB;"/>
    <xsl:output-character character="" string="&amp;#x0061;"/>
    <xsl:output-character character="" string="&amp;#x0062;"/>
    <xsl:output-character character="ə" string="&amp;#x0259;"/>
    <xsl:output-character character=" " string="&amp;#x2029;"/>
  </xsl:character-map>


  <!-- FIGURE -->


  <xsl:template match="w:drawing" mode="image">
    <!-- <xsl:element name="p">-->
    <!--<xsl:attribute name="class" select="'image'"/>-->
    <xsl:element name="img">
      <xsl:attribute name="src">
        <xsl:value-of
          select="concat('../images/', replace(replace(replace(wp:inline/a:graphic/a:graphicData/pic:pic/pic:nvPicPr/pic:cNvPr/@name, '.eps', '.jpg'), '.tif', '.jpg'), '%20', '_'))"
        />
      </xsl:attribute>
      <xsl:attribute name="alt" select="'image'"/>
    </xsl:element>
    <!--</xsl:element>-->
  </xsl:template>


  <xsl:template match="w:ftr"/>

  <xsl:template mode="TableHead"
    match="
      w:tr[descendant::w:pStyle[@w:val = 'TableColumnHead']]
      | w:tr[descendant::w:pStyle[@w:val = 'UN-TableColumnHead']]
      | w:tr[descendant::w:pStyle[@w:val = 'AP-TableColumnHead1']]
      | w:tr[descendant::w:pStyle[@w:val = 'TableCaptions']]">
    <xsl:element name="tr">
      <xsl:attribute name="class" select="'IM-Core-Table-Caption'"/>
      <xsl:apply-templates/>

    </xsl:element>

  </xsl:template>

  <!-- Table Body Row -->
  <xsl:template match="w:tr">
    <xsl:variable name="pos" select="position() mod 2"/>
    <xsl:for-each select="self::w:tr">
      <xsl:choose>
        <xsl:when test="$pos = 1">
          <xsl:element name="tr">
            <xsl:apply-templates/>

          </xsl:element>

        </xsl:when>
        <xsl:otherwise>
          <xsl:element name="tr">
            <xsl:apply-templates/>

          </xsl:element>

        </xsl:otherwise>
      </xsl:choose>
    </xsl:for-each>
  </xsl:template>


  <!-- Table Entry -->
  <!-- MedStudy table's TD -->
  <xsl:template match="w:tc[not(child::w:tcPr//w:vMerge[count(@*) = 0])]">
    <xsl:variable name="pos" select="count(child::w:tcPr) mod 2"/>
    <xsl:variable name="themeName" select="ancestor-or-self::w:tbl[1]/w:tblPr/w:tblStyle/@w:val"/>

    <xsl:element name="td">
      <xsl:attribute name="valign" select="'top'"/>
      <xsl:attribute name="style">
        <!-- For Table Ruler style="border-bottom:1px solid black"-->
        <xsl:choose>
          <xsl:when test="child::w:tcPr/w:tcBorders">
            <xsl:choose>
              <xsl:when test="child::w:tcPr//w:vMerge">
                <xsl:if test="child::w:tcPr/w:tcBorders/w:top[@w:val = 'nil']"> </xsl:if>
                <xsl:if test="child::w:tcPr/w:tcBorders/w:top[@w:val = 'single']">
                  <xsl:text>border-top:1px solid black;</xsl:text>
                </xsl:if>
                <xsl:if test="child::w:tcPr/w:tcBorders/w:top[@w:val = 'double']">
                  <xsl:text>border-top:2px double black;</xsl:text>
                </xsl:if>
                <xsl:if test="child::w:tcPr/w:tcBorders/w:bottom[@w:val = 'nil']"> </xsl:if>
                <xsl:if test="child::w:tcPr/w:tcBorders/w:bottom[@w:val = 'single']">
                  <xsl:text>border-bottom:1px solid black;</xsl:text>
                </xsl:if>
                <xsl:if test="child::w:tcPr/w:tcBorders/w:bottom[@w:val = 'double']">
                  <xsl:text>border-bottom:2px double black;</xsl:text>
                </xsl:if>
                <xsl:if test="child::w:tcPr/w:tcBorders/w:left[@w:val = 'nil']"> </xsl:if>
                <xsl:if test="child::w:tcPr/w:tcBorders/w:left[@w:val = 'single']">
                  <xsl:text>border-left:1px solid black;</xsl:text>
                </xsl:if>
                <xsl:if test="child::w:tcPr/w:tcBorders/w:left[@w:val = 'double']">
                  <xsl:text>border-left:2px double black;</xsl:text>
                </xsl:if>
                <xsl:if test="child::w:tcPr/w:tcBorders/w:right[@w:val = 'nil']"> </xsl:if>
                <xsl:if test="child::w:tcPr/w:tcBorders/w:right[@w:val = 'single']">
                  <xsl:text>border-right:1px solid black;</xsl:text>
                </xsl:if>
                <xsl:if test="child::w:tcPr/w:tcBorders/w:right[@w:val = 'double']">
                  <xsl:text>border-right:2px double black;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:otherwise>
                <xsl:attribute name="style">
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:top[@w:val = 'nil']"> </xsl:if>
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:top[@w:val = 'single']">
                    <xsl:text>border-top:1px solid black;</xsl:text>
                  </xsl:if>
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:top[@w:val = 'double']">
                    <xsl:text>border-top:2px double black;</xsl:text>
                  </xsl:if>
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:bottom[@w:val = 'nil']"> </xsl:if>
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:bottom[@w:val = 'single']">
                    <xsl:text>border-bottom:1px solid black;</xsl:text>
                  </xsl:if>
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:bottom[@w:val = 'double']">
                    <xsl:text>border-bottom:2px double black;</xsl:text>
                  </xsl:if>
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:left[@w:val = 'nil']"> </xsl:if>
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:left[@w:val = 'single']">
                    <xsl:text>border-left:1px solid black;</xsl:text>
                  </xsl:if>
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:left[@w:val = 'double']">
                    <xsl:text>border-left:2px double black;</xsl:text>
                  </xsl:if>
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:right[@w:val = 'nil']"> </xsl:if>
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:right[@w:val = 'single']">
                    <xsl:text>border-right:1px solid black;</xsl:text>
                  </xsl:if>
                  <xsl:if test="child::w:tcPr/w:tcBorders/w:right[@w:val = 'double']">
                    <xsl:text>border-right:2px double black;</xsl:text>
                  </xsl:if>
                </xsl:attribute>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
        </xsl:choose>
        <!-- For table ruler ends -->

        <!-- for row bgcolor, if it was set as TABLE themes -->
        <xsl:if test="string-length($themeName) > 0">
          <xsl:if test="preceding-sibling::w:trPr/w:cnfStyle">
            <xsl:choose>
              <xsl:when test="preceding-sibling::w:trPr/w:cnfStyle[@w:oddVBand = 1]">
                <xsl:choose>
                  <xsl:when test="child::w:tcPr//w:vMerge | child::w:tcPr/w:tcBorders">
                    <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                      <!--<xsl:if test="@w:styleId = $themeName">-->
                      <xsl:if test="child::w:tblStylePr[@w:type = 'band1Vert']/w:tcPr/w:shd">
                        <xsl:variable name="bgcolor"
                          select="child::w:tblStylePr[@w:type = 'band1Vert']/w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'oddVBand']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'oddVBand']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!-- If no shd available, take shd from w:tcpr/w:shd -->
                      <xsl:if test="not(child::w:tblStylePr[@w:type = 'band1Vert']/w:tcPr/w:shd)">
                        <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'oddVBand']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'oddVBand']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!-- If no shd available, take shd from w:tcpr/w:shd -->
                      <!--</xsl:if>-->
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:attribute name="style">
                      <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                        <!--<xsl:if test="@w:styleId = $themeName">-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'band1Vert']/w:tcPr/w:shd">
                          <xsl:variable name="bgcolor"
                            select="child::w:tblStylePr[@w:type = 'band1Vert']/w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'oddVBand']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'oddVBand']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!-- If no shd available, take shd from w:tcpr/w:shd -->
                        <xsl:if test="not(child::w:tblStylePr[@w:type = 'band1Vert']/w:tcPr/w:shd)">
                          <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'oddVBand']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'oddVBand']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!-- If no shd available, take shd from w:tcpr/w:shd -->
                        <!--</xsl:if>-->
                      </xsl:for-each>
                    </xsl:attribute>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="preceding-sibling::w:trPr/w:cnfStyle[@w:oddHBand = 1]">
                <xsl:choose>
                  <xsl:when test="child::w:tcPr//w:vMerge | child::w:tcPr/w:tcBorders">
                    <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                      <!--<xsl:if test="@w:styleId = $themeName">-->
                      <xsl:if test="child::w:tblStylePr[@w:type = 'band1Horz']/w:tcPr//w:shd">
                        <xsl:variable name="bgcolor"
                          select="child::w:tblStylePr[@w:type = 'band1Horz']/w:tcPr//w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'band1Horz']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'band1Horz']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!-- If no shd available, take shd from w:tcpr/w:shd -->
                      <xsl:if test="not(child::w:tblStylePr[@w:type = 'band1Horz']/w:tcPr/w:shd)">
                        <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'oddHBand']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'oddHBand']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!-- If no shd available, take shd from w:tcpr/w:shd -->
                      <!--</xsl:if>-->
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:attribute name="style">
                      <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                        <!--<xsl:if test="@w:styleId = $themeName">-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'band1Horz']/w:tcPr/w:shd">
                          <xsl:variable name="bgcolor"
                            select="child::w:tblStylePr[@w:type = 'band1Horz']/w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'oddHBand']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'oddHBand']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!-- If no shd available, take shd from w:tcpr/w:shd -->
                        <xsl:if test="not(child::w:tblStylePr[@w:type = 'band1Horz']/w:tcPr/w:shd)">
                          <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'oddHBand']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'oddHBand']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!-- If no shd available, take shd from w:tcpr/w:shd -->
                        <!--</xsl:if>-->
                      </xsl:for-each>
                    </xsl:attribute>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="preceding-sibling::w:trPr/w:cnfStyle[@w:evenHBand = 1]">
                <xsl:choose>
                  <xsl:when test="child::w:tcPr//w:vMerge | child::w:tcPr/w:tcBorders">
                    <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                      <!--<xsl:if test="@w:styleId = $themeName">-->
                      <xsl:if test="child::w:tblStylePr[@w:type = 'band2Vert']/w:tcPr/w:shd">
                        <xsl:variable name="bgcolor"
                          select="child::w:tblStylePr[@w:type = 'band2Horz']/w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'evenHBand']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'evenHBand']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!-- If no shd available, take shd from w:tcpr/w:shd -->
                      <xsl:if test="not(child::w:tblStylePr[@w:type = 'band2Vert']/w:tcPr/w:shd)">
                        <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'evenHBand']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'evenHBand']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!-- If no shd available, take shd from w:tcpr/w:shd -->
                      <!--</xsl:if>-->
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:attribute name="style">
                      <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                        <!--<xsl:if test="@w:styleId = $themeName">-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'band2Vert']/w:tcPr/w:shd">
                          <xsl:variable name="bgcolor"
                            select="child::w:tblStylePr[@w:type = 'band2Horz']/w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'evenHBand']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'evenHBand']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!-- If no shd available, take shd from w:tcpr/w:shd -->
                        <xsl:if test="not(child::w:tblStylePr[@w:type = 'band2Vert']/w:tcPr/w:shd)">
                          <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'evenHBand']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'evenHBand']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!-- If no shd available, take shd from w:tcpr/w:shd -->
                        <!--</xsl:if>-->
                      </xsl:for-each>
                    </xsl:attribute>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="preceding-sibling::w:trPr/w:cnfStyle[@w:evenVBand = 1]">
                <xsl:choose>
                  <xsl:when test="child::w:tcPr//w:vMerge | child::w:tcPr/w:tcBorders">
                    <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                      <!--<xsl:if test="@w:styleId = $themeName">-->
                      <xsl:if test="child::w:tblStylePr[@w:type = 'band2Vert']/w:tcPr/w:shd">
                        <xsl:variable name="bgcolor"
                          select="child::w:tblStylePr[@w:type = 'band2Vert']/w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'evenVBand']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'evenVBand']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <xsl:if test="not(child::w:tblStylePr[@w:type = 'band2Vert']/w:tcPr/w:shd)">
                        <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'evenVBand']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'evenVBand']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!--</xsl:if>-->
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:attribute name="style">
                      <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                        <!--<xsl:if test="@w:styleId = $themeName">-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'band2Vert']/w:tcPr/w:shd">
                          <xsl:variable name="bgcolor"
                            select="child::w:tblStylePr[@w:type = 'band2Vert']/w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'evenVBand']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'evenVBand']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <xsl:if test="not(child::w:tblStylePr[@w:type = 'band2Vert']/w:tcPr/w:shd)">
                          <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'evenVBand']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'evenVBand']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!--</xsl:if>-->
                      </xsl:for-each>
                    </xsl:attribute>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="preceding-sibling::w:trPr/w:cnfStyle[@w:firstRow = 1]">
                <xsl:choose>
                  <xsl:when test="child::w:tcPr//w:vMerge | child::w:tcPr/w:tcBorders">
                    <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                      <!--<xsl:if test="@w:styleId = $themeName">-->
                      <xsl:if test="child::w:tblStylePr[@w:type = 'firstRow']/w:tcPr/w:shd">
                        <xsl:variable name="bgcolor"
                          select="child::w:tblStylePr[@w:type = 'firstRow']/w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'firstRow']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'firstRow']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!-- If no shd available, take shd from w:tcpr/w:shd -->
                      <xsl:if test="not(child::w:tblStylePr[@w:type = 'firstRow']/w:tcPr/w:shd)">
                        <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'firstRow']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'firstRow']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!-- If no shd available, take shd from w:tcpr/w:shd -->
                      <!--</xsl:if>-->
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:attribute name="style">
                      <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                        <!--<xsl:if test="@w:styleId = $themeName">-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'firstRow']/w:tcPr/w:shd">
                          <xsl:variable name="bgcolor"
                            select="child::w:tblStylePr[@w:type = 'firstRow']/w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'firstRow']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'firstRow']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!-- If no shd available, take shd from w:tcpr/w:shd -->
                        <xsl:if test="not(child::w:tblStylePr[@w:type = 'firstRow']/w:tcPr/w:shd)">
                          <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'firstRow']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'firstRow']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!-- If no shd available, take shd from w:tcpr/w:shd -->
                        <!--</xsl:if>-->
                      </xsl:for-each>
                    </xsl:attribute>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="preceding-sibling::w:trPr/w:cnfStyle[@w:lastRow = 1]">
                <xsl:choose>
                  <xsl:when test="child::w:tcPr//w:vMerge | child::w:tcPr/w:tcBorders">
                    <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                      <!--<xsl:if test="@w:styleId = $themeName">-->
                      <xsl:if test="child::w:tblStylePr[@w:type = 'lastRow']/w:tcPr/w:shd">
                        <xsl:variable name="bgcolor"
                          select="child::w:tblStylePr[@w:type = 'lastRow']/w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'lastRow']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'lastRow']/w:rPr/w:color/@w:val"/>
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <xsl:if test="not(child::w:tblStylePr[@w:type = 'lastRow']/w:tcPr/w:shd)">
                        <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'lastRow']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'lastRow']/w:rPr/w:color/@w:val"/>
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!--</xsl:if>-->
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:attribute name="style">
                      <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                        <!--<xsl:if test="@w:styleId = $themeName">-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'lastRow']/w:tcPr/w:shd">
                          <xsl:variable name="bgcolor"
                            select="child::w:tblStylePr[@w:type = 'lastRow']/w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'lastRow']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'lastRow']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <xsl:if test="not(child::w:tblStylePr[@w:type = 'lastRow']/w:tcPr/w:shd)">
                          <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'lastRow']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'lastRow']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!--</xsl:if>-->
                      </xsl:for-each>
                    </xsl:attribute>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="preceding-sibling::w:trPr/w:cnfStyle[@w:firstCol = 1]">
                <!-- preceding-sibling::w:trPr/w:cnfStyle[@w:firstCol = 1] | child::w:tcPr/w:cnfStyle[@w:firstCol = 1] 
                  | preceding-sibling::w:trPr/w:cnfStyle[@w:firstColumn = 1] |  descendant::w:tcPr/w:cnfStyle[@w:firstColumn = 1]-->
                <xsl:choose>
                  <xsl:when test="child::w:tcPr//w:vMerge | child::w:tcPr/w:tcBorders">
                    <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                      <!--<xsl:if test="@w:styleId = $themeName">-->
                      <xsl:if test="child::w:tblStylePr[@w:type = 'firstCol']/w:tcPr/w:shd">
                        <xsl:variable name="bgcolor"
                          select="child::w:tblStylePr[@w:type = 'firstCol']/w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'firstCol']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'firstCol']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <xsl:if test="not(child::w:tblStylePr[@w:type = 'firstCol']/w:tcPr/w:shd)">
                        <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'firstCol']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'firstCol']/w:rPr/w:color/@w:val"
                          />
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!--</xsl:if>-->
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:attribute name="style">
                      <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                        <!--<xsl:if test="@w:styleId = $themeName">-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'firstCol']/w:tcPr/w:shd">
                          <xsl:variable name="bgcolor"
                            select="child::w:tblStylePr[@w:type = 'firstCol']/w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'firstCol']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'firstCol']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <xsl:if test="not(child::w:tblStylePr[@w:type = 'firstCol']/w:tcPr/w:shd)">
                          <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'firstCol']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'firstCol']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!--</xsl:if>-->
                      </xsl:for-each>
                    </xsl:attribute>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
              <xsl:when test="preceding-sibling::w:trPr/w:cnfStyle[@w:lastCol = 1]">
                <xsl:choose>
                  <xsl:when test="child::w:tcPr//w:vMerge | child::w:tcPr/w:tcBorders">
                    <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                      <!--<xsl:if test="@w:styleId = $themeName">-->
                      <xsl:if test="child::w:tblStylePr[@w:type = 'lastCol']/w:tcPr/w:shd">
                        <xsl:variable name="bgcolor"
                          select="child::w:tblStylePr[@w:type = 'lastCol']/w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'lastCol']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'lastCol']/w:rPr/w:color/@w:val"/>
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <xsl:if test="not(child::w:tblStylePr[@w:type = 'lastCol']/w:tcPr/w:shd)">
                        <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                        <!-- Counting the bgcolor value is 6 digit -->
                        <xsl:choose>
                          <xsl:when test="string-length($bgcolor) = 6">
                            <xsl:text>background:#</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:when>
                          <xsl:otherwise>
                            <xsl:text>background:</xsl:text>
                            <xsl:value-of select="$bgcolor"/>
                          </xsl:otherwise>
                        </xsl:choose>
                        <!-- Adding foreground color-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'lastCol']/w:rPr/w:color">
                          <xsl:text>; color:#</xsl:text>
                          <xsl:value-of
                            select="child::w:tblStylePr[@w:type = 'lastCol']/w:rPr/w:color/@w:val"/>
                        </xsl:if>
                        <!-- Adding foreground color-->
                      </xsl:if>
                      <!--</xsl:if>-->
                    </xsl:for-each>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:attribute name="style">
                      <xsl:for-each select="/w:document/w:styles/w:style[@w:styleId = $themeName]">
                        <!--<xsl:if test="@w:styleId = $themeName">-->
                        <xsl:if test="child::w:tblStylePr[@w:type = 'lastCol']/w:tcPr/w:shd">
                          <xsl:variable name="bgcolor"
                            select="child::w:tblStylePr[@w:type = 'lastCol']/w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'lastCol']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'lastCol']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <xsl:if test="not(child::w:tblStylePr[@w:type = 'lastCol']/w:tcPr/w:shd)">
                          <xsl:variable name="bgcolor" select="child::w:tcPr/w:shd/@w:fill"/>
                          <!-- Counting the bgcolor value is 6 digit -->
                          <xsl:choose>
                            <xsl:when test="string-length($bgcolor) = 6">
                              <xsl:text>background:#</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:when>
                            <xsl:otherwise>
                              <xsl:text>background:</xsl:text>
                              <xsl:value-of select="$bgcolor"/>
                            </xsl:otherwise>
                          </xsl:choose>
                          <!-- Adding foreground color-->
                          <xsl:if test="child::w:tblStylePr[@w:type = 'lastCol']/w:rPr/w:color">
                            <xsl:text>; color:#</xsl:text>
                            <xsl:value-of
                              select="child::w:tblStylePr[@w:type = 'lastCol']/w:rPr/w:color/@w:val"
                            />
                          </xsl:if>
                          <!-- Adding foreground color-->
                        </xsl:if>
                        <!--</xsl:if>-->
                      </xsl:for-each>
                    </xsl:attribute>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:when>
            </xsl:choose>
          </xsl:if>
        </xsl:if>
        <!-- for row bgcolor, if it was set as TABLE themes ENDS here-->
      </xsl:attribute>
      <xsl:if test="w:tcPr/w:gridSpan">
        <xsl:call-template name="cell.span"/>
      </xsl:if>
      <xsl:call-template name="cell.morerows"/>
      <xsl:choose>
        <xsl:when test="w:p/w:pPr/w:jc[@w:val = 'center']">
          <xsl:attribute name="align">center</xsl:attribute>
        </xsl:when>
        <xsl:when test="w:p/w:pPr/w:jc[@w:val = 'right']">
          <xsl:attribute name="align">right</xsl:attribute>
        </xsl:when>
        <xsl:when test="w:p/w:pPr/w:jc[@w:val = 'justify']">
          <xsl:attribute name="align">justify</xsl:attribute>
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="w:p/w:pPr/w:pStyle[@w:val = 'TableColumnHead']">
              <xsl:attribute name="align">left</xsl:attribute>
            </xsl:when>
            <xsl:when test="w:p/w:pPr/w:pStyle[@w:val = 'TableColumnHead1']">
              <xsl:attribute name="align">left</xsl:attribute>
            </xsl:when>
            <xsl:otherwise/>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:if
        test="w:p/w:pPr/w:pStyle[@w:val = 'KGLLpar'] | w:p/w:pPr/w:pStyle[@w:val = 'KGLPlusmn'] | w:p/w:pPr/w:pStyle[@w:val = 'KGLDot']">
        <xsl:attribute name="char">
          <xsl:choose>
            <xsl:when test="w:p/w:pPr/w:pStyle[@w:val = 'KGLLpar']">
              <xsl:text disable-output-escaping="yes">&amp;lpar;</xsl:text>
            </xsl:when>
            <xsl:when test="w:p/w:pPr/w:pStyle[@w:val = 'KGLPlusmn']">
              <xsl:text disable-output-escaping="yes">&amp;plusmn;</xsl:text>
            </xsl:when>
            <xsl:when test="w:p/w:pPr/w:pStyle[@w:val = 'KGLDot']">
              <xsl:text>.</xsl:text>
            </xsl:when>
          </xsl:choose>
        </xsl:attribute>
      </xsl:if>

      <!-- Process as paras if more than one w:p in the cell -->
      <xsl:choose>
        <xsl:when test="count(w:p) = 1">

          <xsl:apply-templates/>
        </xsl:when>
        <xsl:otherwise>

          <xsl:apply-templates/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:element>

  </xsl:template>

  <xsl:template name="cell.span">
    <xsl:variable name="span" select="w:tcPr/w:gridSpan/@w:val"/>
    <xsl:attribute name="colspan">
      <xsl:value-of select="$span"/>
    </xsl:attribute>
  </xsl:template>

  <xsl:template name="cell.morerows">
    <xsl:variable name="span" select="w:tcPr/w:gridSpan/@w:val"/>
    <xsl:variable name="colstart">
      <xsl:call-template name="colcount">
        <xsl:with-param name="count" select="1"/>
      </xsl:call-template>
    </xsl:variable>
    <!--<xsl:if test="w:tcPr//w:vMerge/@w:val = 'restart'">
   <xsl:variable name="rows" select="count(w:tcPr/w:gridSpan/@w:val)"/>      
   <xsl:attribute name="morerows" select="$rows"/>
  </xsl:if>-->
    <!-- NEW morerow attribute added on 28-05-15 -->
    <xsl:if test="w:tcPr//w:vMerge/@w:val = 'restart'">
      <xsl:variable name="cnfCol" select="string(w:tcPr[1]/w:cnfStyle[1]/@w:val)"/>
      <xsl:variable name="vmerge" select="w:tcPr[1]/w:vMerge[1]"/>
      <xsl:variable name="me" select="."/>
      <xsl:variable name="tblCount" select="count(ancestor::w:tbl)"/>
      <xsl:variable name="meInContext"
        select="ancestor::w:tr[1]/*[count($me | descendant-or-self::*) = count(descendant-or-self::*)]"/>
      <xsl:variable name="before"
        select="count($meInContext/preceding-sibling::*[descendant-or-self::*[name() = 'w:tc' and (count(ancestor::w:tbl) = $tblCount)]])"/>
      <xsl:variable name="after"
        select="count($meInContext/following-sibling::*[descendant-or-self::*[name() = 'w:tc' and (count(ancestor::w:tbl) = $tblCount)]])"/>

      <xsl:variable name="rowspan">
        <xsl:choose>
          <xsl:when test="not($vmerge)">1</xsl:when>

          <xsl:otherwise>
            <xsl:variable name="myRow" select="ancestor::w:tr[1]"/>
            <xsl:variable name="myRowInContext"
              select="$myRow/ancestor::w:tbl[1]/*[count($myRow | descendant-or-self::*) = count(descendant-or-self::*)]"/>
            <xsl:variable name="belowMe"
              select="$myRowInContext/following-sibling::*//w:tc[count(ancestor::w:tbl) = $tblCount][$before + 1]"/>
            <xsl:variable name="NextRestart"
              select="($belowMe//w:tcPr/w:vMerge[@w:val = 'restart'])[1]"/>
            <xsl:variable name="NextRestartInContext"
              select="$NextRestart/ancestor::w:tbl[1]/*[count($NextRestart | descendant-or-self::*) = count(descendant-or-self::*)]"/>
            <xsl:variable name="mergesAboveMe"
              select="count($myRowInContext/preceding-sibling::*[(descendant-or-self::*[name() = 'w:tc'])[$before + 1][descendant-or-self::*[name() = 'w:vMerge']]])"/>
            <xsl:variable name="mergesAboveNextRestart"
              select="count($NextRestartInContext/preceding-sibling::*[(descendant-or-self::*[name() = 'w:tc'])[$before + 1][descendant-or-self::*[name() = 'w:vMerge']]])"/>

            <xsl:choose>
              <xsl:when test="$NextRestart">
                <xsl:value-of select="($mergesAboveNextRestart - $mergesAboveMe) - 0"/>
              </xsl:when>
              <!-- 03-jan-17: commented below when and otherwise value "1" was changed to: "<xsl:value-of select="count($belowMe[descendant-or-self::*[name()='w:vMerge']]) + 1"/>" -->
              <!-- if any issue pls re-comment it -->
              <!--<xsl:when test="$vmerge/@w:val">
                <xsl:value-of select="count($belowMe[descendant-or-self::*[name()='w:vMerge']]) + 1"/>
              </xsl:when>
              <xsl:otherwise>1</xsl:otherwise>-->
              <xsl:otherwise>
                <xsl:value-of
                  select="count($belowMe[descendant-or-self::*[name() = 'w:vMerge']]) + 1"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:variable>

      <xsl:if test="$vmerge">
        <!-- 31-03-16 i commented rowspan. later may uncomment -->
        <xsl:attribute name="rowspan">
          <xsl:value-of select="$rowspan"/>
        </xsl:attribute>
        <!--<xsl:attribute name="valign" select="'top'"/>-->
      </xsl:if>
    </xsl:if>
  </xsl:template>
  <!-- recursively count preceding columns, including spans -->
  <xsl:template name="colcount">
    <xsl:param name="count"/>
    <xsl:param name="cell" select="."/>
    <xsl:choose>
      <xsl:when test="$cell/preceding-sibling::w:tc">
        <xsl:variable name="span"
          select="sum($cell/preceding-sibling::w:tc/w:tcPr/w:gridSpan/@w:val) - count($cell/preceding-sibling::w:tc/w:tcPr/w:gridSpan/@w:val) + count($cell/preceding-sibling::w:tc) + 1"/>
        <xsl:value-of select="$span"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$count"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>



  <xsl:template match="//w:p[w:pPr/w:pStyle/@w:val = 'TableCaptionsppppppp']"/>
  <!-- This code will help to avoid thead inside tbody -->

  <xsl:template name="AutoNumbering">
    <xsl:param name="numId"/>
    <xsl:param name="numLevel"/>
    <xsl:param name="numhead1"/>
    <xsl:param name="count"/>
    <xsl:param name="numFormat"/>
    <xsl:param name="paraID"/>
    <xsl:for-each select="//w:numbering/w:num[@w:numId = $numId]">
      <xsl:variable name="abstractValue" select="child::w:abstractNumId/@w:val"/>

      <xsl:for-each select="//w:numbering/w:abstractNum[@w:abstractNumId = $abstractValue]">
        <xsl:variable name="abstractLevel" select="w:lvl/@w:ilvl"/>
        <xsl:for-each select="child::w:lvl[@w:ilvl = $numLevel]">
          <xsl:variable name="numFmt" select="w:numFmt/@w:val"/>
          <!--<xsl:variable name="pStyle" select="translate(w:pStyle/@w:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', '')"/>-->

          <xsl:variable name="lvlText" select="replace(w:lvlText/@w:val, '%', '')"/>
          <xsl:variable name="pStyle" select="child::w:pStyle/@w:val"/>

          <xsl:choose>
            <xsl:when test="$numFmt = 'decimal'">
              <xsl:choose>
                <xsl:when test="ends-with($lvlText, ')') and not(starts-with($lvlText, '('))">
                  <xsl:choose>
                    <xsl:when test="contains($lvlText, 'A.')">
                      <xsl:value-of select="'A.'"/>
                    </xsl:when>
                    <xsl:when test="contains($lvlText, 'a.')">
                      <xsl:value-of select="'a.'"/>
                    </xsl:when>
                    <xsl:when test="contains($lvlText, 'I.')">
                      <xsl:value-of select="'I.'"/>
                    </xsl:when>
                    <xsl:when test="contains($lvlText, 'i.')">
                      <xsl:value-of select="'i.'"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="'1.'"/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <!--<xsl:value-of select="'1)'"/>-->
                </xsl:when>
                <xsl:when test="ends-with($lvlText, ']') and starts-with($lvlText, '[')">
                  <xsl:value-of select="'[1]'"/>
                </xsl:when>
                <xsl:when test="starts-with($lvlText, '(')">
                  <xsl:value-of select="'(1)'"/>
                </xsl:when>
                <xsl:when test="ends-with($lvlText, '.')">
                  <xsl:choose>
                    <xsl:when test="contains($lvlText, 'A.')">
                      <xsl:value-of select="'A.'"/>
                    </xsl:when>
                    <xsl:when test="contains($lvlText, 'a.')">
                      <xsl:value-of select="'a.'"/>
                    </xsl:when>
                    <xsl:when test="contains($lvlText, 'I.')">
                      <xsl:value-of select="'I.'"/>
                    </xsl:when>
                    <xsl:when test="contains($lvlText, 'i.')">
                      <xsl:value-of select="'i.'"/>
                    </xsl:when>
                    <xsl:when test="contains($lvlText, '1.2.3.4.5.')">
                      <xsl:variable name="xyz" select="$numId"/>
                      <xsl:choose>
                        <xsl:when test="$xyz = '1'">
                          <xsl:value-of select="concat($xyz, '.')"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="concat(($xyz - 1), '.')"/>
                          <xsl:value-of select="concat(($xyz - 1), '.')"/>
                          <xsl:value-of select="concat(($xyz - 1), '.')"/>
                          <xsl:value-of select="concat(($xyz - 1), '.')"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:when test="contains($lvlText, '1.2.3.4.')">
                      <xsl:variable name="xyz" select="$numId"/>
                      <xsl:choose>
                        <xsl:when test="$xyz = '1'">
                          <xsl:value-of select="concat($xyz, '.')"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="concat(($xyz - 1), '.')"/>
                          <xsl:value-of select="concat(($xyz - 1), '.')"/>
                          <xsl:value-of select="concat(($xyz - 1), '.')"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:when test="contains($lvlText, '1.2.3.')">
                      <xsl:variable name="xyz" select="$numId"/>
                      <xsl:choose>
                        <xsl:when test="$xyz = '1'">
                          <xsl:value-of select="concat($xyz, '.')"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="concat(($xyz - 1), '.')"/>
                          <xsl:value-of select="concat(($xyz - 1), '.')"/>
                        </xsl:otherwise>
                      </xsl:choose>
                      <!--<xsl:value-of select="concat($xyz,'.')"/>
                      <xsl:value-of select="concat($xyz,'.')"/>-->
                    </xsl:when>
                    <xsl:when test="contains($lvlText, '1.2.')">
                      <xsl:variable name="xyz" select="$numId"/>
                      <xsl:choose>
                        <xsl:when test="$xyz = '1'">
                          <xsl:value-of select="concat($xyz, '.')"/>
                          <!--<xsl:number count="w:p[w:pPr/w:pStyle[@w:val= $paraID]]" from="w:p/w:pPr[w:pStyle/@w:val= $paraID]/w:numPr/w:ilvl[@w:val = '0']" level="any"/>-->
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="concat(($xyz - 1), '.')"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>




                      <!--<xsl:variable name="xyz" select="$numId + $numLevel"/>    -->
                      <xsl:variable name="xyz" select="$numId"/>
                      <xsl:value-of select="concat($xyz, '.')"/>
                      <!--<xsl:value-of select="'1.'"/>-->

                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:when>

              </xsl:choose>
            </xsl:when>
            <xsl:when test="$numFmt = 'upperLetter'">
              <xsl:choose>
                <xsl:when test="ends-with($lvlText, ')') and not(starts-with($lvlText, '('))">
                  <xsl:value-of select="'A)'"/>
                </xsl:when>
                <xsl:when test="ends-with($lvlText, ']') and starts-with($lvlText, '[')">
                  <xsl:value-of select="'[A]'"/>
                </xsl:when>
                <xsl:when test="starts-with($lvlText, '(')">
                  <xsl:value-of select="'(A)'"/>
                </xsl:when>
                <xsl:when test="ends-with($lvlText, '.')">
                  <xsl:value-of select="'A.'"/>
                </xsl:when>
                <!--<xsl:otherwise>
                                    <NewListStyle>
                                        <xsl:text>&#x160;&#x160;&#x160;</xsl:text>
                                    </NewListStyle>
                                </xsl:otherwise>-->
              </xsl:choose>
            </xsl:when>
            <xsl:when test="$numFmt = 'lowerLetter'">
              <xsl:choose>
                <xsl:when test="ends-with($lvlText, ')') and not(starts-with($lvlText, '('))">
                  <xsl:value-of select="'a)'"/>
                </xsl:when>
                <xsl:when test="ends-with($lvlText, ']') and starts-with($lvlText, '[')">
                  <xsl:value-of select="'[a]'"/>
                </xsl:when>
                <xsl:when test="starts-with($lvlText, '(')">
                  <xsl:value-of select="'(a)'"/>
                </xsl:when>
                <xsl:when test="ends-with($lvlText, '.')">
                  <xsl:value-of select="'a.'"/>
                </xsl:when>
                <!--<xsl:otherwise>
                                    <NewListStyle>
                                        <xsl:text>&#x160;&#x160;&#x160;</xsl:text>
                                    </NewListStyle>
                                </xsl:otherwise>-->
              </xsl:choose>
            </xsl:when>
            <xsl:when test="$numFmt = 'lowerRoman'">
              <xsl:choose>
                <xsl:when test="ends-with($lvlText, ')') and not(starts-with($lvlText, '('))">
                  <xsl:value-of select="'i)'"/>
                </xsl:when>
                <xsl:when test="ends-with($lvlText, ']') and starts-with($lvlText, '[')">
                  <xsl:value-of select="'[i]'"/>
                </xsl:when>
                <xsl:when test="starts-with($lvlText, '(')">
                  <xsl:value-of select="'(i)'"/>
                </xsl:when>
                <xsl:when test="ends-with($lvlText, '.')">
                  <xsl:value-of select="'i.'"/>
                </xsl:when>
                <!--<xsl:otherwise>
                                    <NewListStyle>
                                        <xsl:text>&#x160;&#x160;&#x160;</xsl:text>
                                    </NewListStyle>
                                </xsl:otherwise>-->
              </xsl:choose>
            </xsl:when>
            <xsl:when test="$numFmt = 'upperRoman'">
              <xsl:choose>
                <xsl:when test="ends-with($lvlText, ')') and not(starts-with($lvlText, '('))">
                  <xsl:value-of select="'I)'"/>
                </xsl:when>
                <xsl:when test="ends-with($lvlText, ']') and starts-with($lvlText, '[')">
                  <xsl:value-of select="'[I]'"/>
                </xsl:when>
                <xsl:when test="starts-with($lvlText, '(')">
                  <xsl:value-of select="'(I)'"/>
                </xsl:when>
                <xsl:when test="ends-with($lvlText, '.')">
                  <xsl:value-of select="'I.'"/>
                </xsl:when>
                <!--<xsl:otherwise>
                                    <NewListStyle>
                                        <xsl:text>&#x160;&#x160;&#x160;</xsl:text>
                                    </NewListStyle>
                                </xsl:otherwise>-->
              </xsl:choose>
            </xsl:when>
            <!--<xsl:otherwise>
                            <NewTypeofList>
                                <xsl:apply-templates/>
                            </NewTypeofList>
                        </xsl:otherwise>-->
          </xsl:choose>
        </xsl:for-each>
      </xsl:for-each>
    </xsl:for-each>
  </xsl:template>

  <xsl:template name="ListRootNodeOpening">
    <xsl:param name="openingtag"/>
    <xsl:text disable-output-escaping="yes">&#x3C;</xsl:text>
    <xsl:value-of select="$openingtag"/>
    <xsl:text disable-output-escaping="yes"> type="</xsl:text>
    <xsl:call-template name="AutoNumbering">
      <xsl:with-param name="numId" select="child::w:pPr/w:numPr/w:numId/@w:val"/>
      <xsl:with-param name="numLevel" select="child::w:pPr/w:numPr/w:ilvl/@w:val"/>
    </xsl:call-template>
    <xsl:text disable-output-escaping="yes">"&#x3E;</xsl:text>
    <xsl:choose>
      <xsl:when test="matches(ancestor::w:sdt/w:sdtPr/w:tag/@w:val, 'FE-(0)([0-9]+)')">
        <xsl:element name="p">
          <xsl:attribute name="class">
            <xsl:value-of
              select="concat(ancestor::w:sdt/w:sdtPr/w:tag/@w:val, '_', child::w:pPr/w:pStyle/@w:val)"
            />
          </xsl:attribute>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:element name="p">
          <xsl:attribute name="class">
            <xsl:value-of select="$openingtag"/>
          </xsl:attribute>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template name="ListRootNodeClosing">
    <xsl:param name="closingtag"/>
    <xsl:choose>
      <xsl:when test="matches(ancestor::w:sdt/w:sdtPr/w:tag/@w:val, 'FE-(0)([0-9]+)')">
        <xsl:element name="p">
          <xsl:attribute name="class">
            <xsl:value-of
              select="concat(ancestor::w:sdt/w:sdtPr/w:tag/@w:val, '_', child::w:pPr/w:pStyle/@w:val)"
            />
          </xsl:attribute>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:element name="p">
          <xsl:attribute name="class">
            <xsl:value-of select="$closingtag"/>
          </xsl:attribute>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text disable-output-escaping="yes">&#x3C;/</xsl:text>
    <xsl:value-of select="$closingtag"/>
    <xsl:text disable-output-escaping="yes">&#x3E;</xsl:text>
  </xsl:template>
  <xsl:template name="CurrentNode">
    <xsl:param name="currentnodetag"/>
    <xsl:element name="{$currentnodetag}">
      <xsl:element name="p">
        <xsl:attribute name="class">
          <xsl:value-of select="$currentnodetag"/>
        </xsl:attribute>
        <xsl:apply-templates/>
      </xsl:element>
    </xsl:element>
  </xsl:template>
  <xsl:template name="CurrentNode1">
    <xsl:param name="currentnodetag"/>
    <xsl:element name="p">
      <xsl:attribute name="class">
        <xsl:value-of select="$currentnodetag"/>
      </xsl:attribute>
      <xsl:apply-templates/>
    </xsl:element>
  </xsl:template>


  <!-- Bookmark code -->
  <!-- 23-June-17: Mariappan kutty, New bookmark self closed logic added by me, mari, mari2 -->
  <xsl:template match="w:bookmarkStart">
    <xsl:variable name="bmId" select="@w:id"/>
    <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
    <xsl:value-of select="@w:name"/>
    <!--<xsl:text disable-output-escaping="yes">" name="</xsl:text>-->
    <!--<xsl:value-of select="@w:name"/>-->
    <!--<xsl:text disable-output-escaping="yes">"&gt;</xsl:text>-->
    <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor -->
    <xsl:text disable-output-escaping="yes">"</xsl:text>
    <!--<xsl:if test="contains(@w:name, 'BM')">
      <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
    </xsl:if>-->
    <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
    <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
  </xsl:template>
  <xsl:template match="//w:footnote/w:p/w:bookmarkStart">
    <xsl:variable name="bmId" select="@w:id"/>
    <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
    <xsl:value-of select="@w:name"/>
    <xsl:text disable-output-escaping="yes">"</xsl:text>
    <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
  </xsl:template>

  <xsl:template match="w:bookmarkEnd">
    <xsl:variable name="bmId" select="@w:id"/>
    <xsl:text disable-output-escaping="yes">&lt;span data-bkmark="</xsl:text>
    <xsl:value-of select="preceding::w:bookmarkStart[@w:id = $bmId][1]/@w:name"/>
    <xsl:text disable-output-escaping="yes">"</xsl:text>
    <xsl:if test="contains(@w:name, 'BM')">
      <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
    </xsl:if>
    <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
    <xsl:text disable-output-escaping="yes">/&gt;</xsl:text>
  </xsl:template>
  <!-- 23-June-17: Mariappan kutty, New bookmark self closed logic added by me, mari, mari2 END-->
  <!-- Bookmark END here -->


  <xsl:template match="w:bookmarkStartOLD">
    <xsl:variable name="bmId" select="@w:id"/>
    <xsl:text disable-output-escaping="yes">&lt;span name="</xsl:text>
    <xsl:value-of select="@w:name"/>
    <!--<xsl:text disable-output-escaping="yes">"&gt;</xsl:text>-->
    <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor -->
    <xsl:text disable-output-escaping="yes">"</xsl:text>
    <xsl:if test="contains(@w:name, 'BM')">
      <xsl:text disable-output-escaping="yes"> style="color:#e3686a;cursor:pointer;"</xsl:text>
    </xsl:if>
    <!-- 25-APR-17: added extra style att. for Mariselvam's ckeditor END-->
    <xsl:text disable-output-escaping="yes">&gt;</xsl:text>
    <xsl:if test="$bmId = //w:bookmarkEnd/@w:id"> </xsl:if>
  </xsl:template>
  <xsl:template match="w:bookmarkEndOLD">
    <xsl:text disable-output-escaping="yes">&lt;/span&gt;</xsl:text>
  </xsl:template>
  <!-- pppp2 -->
  <!--<xsl:template match="text()"/>-->

  <xsl:template match="w:footnoteXXX">
    <xsl:element name="div">
      <xsl:attribute name="id" select="concat('ftnote', @w:id)"/>
      <xsl:element name="span">
        <xsl:attribute name="class" select="'FootnoteReference'"/>
        <xsl:element name="a">
          <xsl:attribute name="href" select="@w:id"/>
          <xsl:apply-templates/>
        </xsl:element>
      </xsl:element>
    </xsl:element>

  </xsl:template>

  <xsl:template match="w:cr">
    <br/>
  </xsl:template>
  <xsl:template match="w:sdtContent">
    <xsl:apply-templates/>
  </xsl:template>
  <xsl:template match="w:tXXX">
    <xsl:if test="not(preceding-sibling::w:rPr/w:rStyle/@w:val = 'FootnoteReference')">
      <xsl:apply-templates/>
    </xsl:if>
  </xsl:template>
  <xsl:template match="w:softHyphen">
    <!-- Softhyphen &#x00AD; in html file-->
    <xsl:text>&#173;</xsl:text>
  </xsl:template>

  <!--<w:object w:dxaOrig="3886" w:dyaOrig="1169">
    <v:shapetype id="_x0000_t75" coordsize="21600,21600" o:spt="75"
      o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f">
      <v:stroke joinstyle="miter"/>
      <v:formulas>
        <v:f eqn="if lineDrawn pixelLineWidth 0"/>
        <v:f eqn="sum @0 1 0"/>
        <v:f eqn="sum 0 0 @1"/>
        <v:f eqn="prod @2 1 2"/>
        <v:f eqn="prod @3 21600 pixelWidth"/>
        <v:f eqn="prod @3 21600 pixelHeight"/>
        <v:f eqn="sum @0 0 1"/>
        <v:f eqn="prod @6 1 2"/>
        <v:f eqn="prod @7 21600 pixelWidth"/>
        <v:f eqn="sum @8 21600 0"/>
        <v:f eqn="prod @7 21600 pixelHeight"/>
        <v:f eqn="sum @10 21600 0"/>
      </v:formulas>
      <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
      <o:lock v:ext="edit" aspectratio="t"/>
    </v:shapetype>
    <v:shape id="_x0000_i1025" type="#_x0000_t75"
      style="width:405pt;height:129.75pt" o:ole="">
      <v:imagedata r:id="rId16" o:title=""/>
      <o:lock v:ext="edit" aspectratio="f"/>
    </v:shape>
    <o:OLEObject Type="Embed" ProgID="Visio.Drawing.11" ShapeID="_x0000_i1025"
      DrawAspect="Content" ObjectID="_1529841798" r:id="rId17"/>
  </w:object>-->

  <xsl:template match="w:objectOLD">
    
    <xsl:choose>
      <xsl:when test="descendant::v:formulas">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'DisplayMath'"/>
          <xsl:variable name="imgnameid" select="descendant::o:OLEObject/@r:id"/>
          <xsl:choose>
            <xsl:when test="string-length($imgnameid) > 0">
              <xsl:element name="img">
                <xsl:attribute name="src">
                  <!--13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-->
                  <!--13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-->
                  <xsl:for-each select="//Relationships/Relationship[@Id = $imgnameid]">
                    <xsl:variable name="imageName"
                      select="//Relationships/Relationship[@Id = $imgnameid]/@Target"/>
                    <xsl:value-of
                      select="concat('../images/', substring-after(//Relationships/Relationship[@Id = $imgnameid]/@Target, '/'))"
                    />
                  </xsl:for-each>
                </xsl:attribute>
                <xsl:attribute name="alt" select="'DisplayMath'"/>
              </xsl:element>
            </xsl:when>
            <xsl:otherwise>
              <xsl:choose>
                <xsl:when test="following-sibling::o:OLEObject/@ProgID">
                  <xsl:variable name="imgnameid" select="following-sibling::o:OLEObject/@r:id"/>
                  <xsl:element name="img">
                    <xsl:attribute name="src">
                      <!--13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-->
                      <!--13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-->
                      <xsl:for-each select="//Relationships/Relationship[@Id = $imgnameid]">
                        <xsl:variable name="imageName"
                          select="//Relationships/Relationship[@Id = $imgnameid]/@Target"/>
                        <xsl:value-of
                          select="concat('../images/', substring-after(//Relationships/Relationship[@Id = $imgnameid]/@Target, '/'))"
                        />
                      </xsl:for-each>
                    </xsl:attribute>
                    <xsl:attribute name="alt" select="'image'"/>
                  </xsl:element>
                </xsl:when>
                <xsl:when test="not(preceding-sibling::v:shapetype)">
                  <xsl:element name="span">
                    <xsl:attribute name="class" select="'InlineMath'"/>
                  </xsl:element>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="imgnameid" select="o:OLEObject/@ProgID"/>
                  <xsl:element name="img">
                    <xsl:attribute name="src">
                      <!--13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-->
                      <!--13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-->
                      <xsl:for-each select="//Relationships/Relationship[@Id = $imgnameid]">
                        <xsl:variable name="imageName"
                          select="//Relationships/Relationship[@Id = $imgnameid]/@Target"/>
                        <xsl:value-of
                          select="concat('../images/', substring-after(//Relationships/Relationship[@Id = $imgnameid]/@Target, '/'))"
                        />
                      </xsl:for-each>
                    </xsl:attribute>
                    <xsl:attribute name="alt" select="'image'"/>
                  </xsl:element>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>

        </xsl:element>
      </xsl:when>
      <xsl:when test="descendant::o:OLEObject">
        <xsl:variable name="imgnameid" select="o:OLEObject/@r:id"/>
        <xsl:element name="img">
          <xsl:attribute name="src">
            <!--13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-->
            <!--13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-->
            <xsl:for-each select="//Relationships/Relationship[@Id = $imgnameid]">
              <xsl:variable name="imageName"
                select="//Relationships/Relationship[@Id = $imgnameid]/@Target"/>
              <xsl:value-of
                select="concat('../images/', substring-after(//Relationships/Relationship[@Id = $imgnameid]/@Target, '/'))"
              />
            </xsl:for-each>
          </xsl:attribute>
          <xsl:attribute name="alt" select="'image'"/>
        </xsl:element>
      </xsl:when>
      <xsl:when test="descendant::v:shape">
        <xsl:choose>
          <xsl:when test="following-sibling::o:OLEObject/@ProgID">
            <xsl:variable name="imgnameid" select="following-sibling::o:OLEObject/@r:id"/>
            <xsl:element name="img">
              <xsl:attribute name="src">
                <!--13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-->
                <!--13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-->
                <xsl:for-each select="//Relationships/Relationship[@Id = $imgnameid]">
                  <xsl:variable name="imageName"
                    select="//Relationships/Relationship[@Id = $imgnameid]/@Target"/>
                  <xsl:value-of
                    select="concat('../images/', substring-after(//Relationships/Relationship[@Id = $imgnameid]/@Target, '/'))"
                  />
                </xsl:for-each>
              </xsl:attribute>
              <xsl:attribute name="alt" select="'image'"/>
            </xsl:element>
          </xsl:when>
          <xsl:when test="not(preceding-sibling::v:shapetype)">
            <xsl:element name="span">
              <xsl:attribute name="class" select="'InlineMath'"/>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="imgnameid" select="o:OLEObject/@ProgID"/>
            <xsl:element name="img">
              <xsl:attribute name="src">
                <!--13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-->
                <!--13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-->
                <xsl:for-each select="//Relationships/Relationship[@Id = $imgnameid]">
                  <xsl:variable name="imageName"
                    select="//Relationships/Relationship[@Id = $imgnameid]/@Target"/>
                  <xsl:value-of
                    select="concat('../images/', substring-after(//Relationships/Relationship[@Id = $imgnameid]/@Target, '/'))"
                  />
                </xsl:for-each>
              </xsl:attribute>
              <xsl:attribute name="alt" select="'image'"/>
            </xsl:element>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>

      <xsl:otherwise> </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template match="w:object">
   <xsl:choose>
      <xsl:when test="descendant::v:formulas">
        
        <xsl:element name="span">
          <xsl:attribute name="class">
            <xsl:choose>
              <xsl:when test="child::w:p">
                <xsl:value-of select="'DisplayMath'"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:value-of select="'InlineMath'"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          
          
          <xsl:variable name="imgnameid" select="descendant::o:OLEObject/@r:id"/>
          <xsl:choose>
            <xsl:when test="string-length($imgnameid) > 0">
              <!--<xsl:element name="img">
                <xsl:attribute name="src">
                  <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                  <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                  <xsl:for-each select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                    <xsl:variable name="imageName"
                      select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                    <xsl:value-of
                      select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                    />
                  </xsl:for-each>
                </xsl:attribute>
                <xsl:attribute name="alt">
                  <xsl:choose>
                    <xsl:when test="child::w:p">
                      <xsl:value-of select="'DisplayMath'"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="'InlineMath'"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:attribute>
              </xsl:element>-->
            </xsl:when>
            <xsl:otherwise>
              <xsl:choose>
                <xsl:when test="following-sibling::o:OLEObject/@ProgID">
                  <xsl:variable name="imgnameid" select="following-sibling::o:OLEObject/@r:id"/>
                 <!-- <xsl:element name="img">
                    <xsl:attribute name="src">
                      <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                      <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                      <xsl:for-each
                        select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                        <xsl:variable name="imageName"
                          select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                        <xsl:value-of
                          select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                        />
                      </xsl:for-each>
                    </xsl:attribute>
                    <xsl:attribute name="alt" select="'image'"/>
                  </xsl:element>-->
                </xsl:when>
                <xsl:when test="not(preceding-sibling::v:shapetype)">
                  <xsl:element name="span">
                    <xsl:attribute name="class" select="'InlineMath'"/>
                  </xsl:element>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:variable name="imgnameid" select="o:OLEObject/@ProgID"/>
                  <!--<xsl:element name="img">
                    <xsl:attribute name="src">
                      <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                      <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                      <xsl:for-each
                        select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                        <xsl:variable name="imageName"
                          select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                        <xsl:value-of
                          select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                        />
                      </xsl:for-each>
                    </xsl:attribute>
                    <xsl:attribute name="alt" select="'image'"/>
                  </xsl:element>-->
                </xsl:otherwise>
              </xsl:choose>
            </xsl:otherwise>
          </xsl:choose>

        </xsl:element>
      </xsl:when>
      <xsl:when test="descendant::o:OLEObject">
        <xsl:variable name="imgnameid" select="o:OLEObject/@r:id"/>
        <xsl:choose>
          <xsl:when test="contains(descendant::o:OLEObject/@ProgID, 'Equation')">
            
            <xsl:element name="span">
              <xsl:attribute name="class">
                <xsl:choose>
                  <xsl:when test="child::w:p">
                    <xsl:value-of select="'DisplayMath'"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'InlineMath'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:variable name="imgnameid" select="descendant::o:OLEObject/@r:id"/>
              <xsl:choose>
                <xsl:when test="string-length($imgnameid) > 0">
                 <!-- <xsl:element name="img">
                    <xsl:attribute name="src">
                      <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                      <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                      <xsl:for-each
                        select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                        <xsl:variable name="imageName"
                          select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                        <xsl:value-of
                          select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                        />
                      </xsl:for-each>
                    </xsl:attribute>
                    <xsl:attribute name="alt">
                      <xsl:choose>
                        <xsl:when test="child::w:p">
                          <xsl:value-of select="'DisplayMath'"/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="'InlineMath'"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:attribute>
                  </xsl:element>-->
                </xsl:when>
                <xsl:otherwise>
                  <xsl:choose>
                    <xsl:when test="following-sibling::o:OLEObject/@ProgID">
                      <xsl:variable name="imgnameid" select="following-sibling::o:OLEObject/@r:id"/>
                      <!--<xsl:element name="img">
                        <xsl:attribute name="src">
                          <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                          <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                          <xsl:for-each
                            select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                            <xsl:variable name="imageName"
                              select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                            <xsl:value-of
                              select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                            />
                          </xsl:for-each>
                        </xsl:attribute>
                        <xsl:attribute name="alt" select="'image'"/>
                      </xsl:element>-->
                    </xsl:when>
                    <xsl:when test="not(preceding-sibling::v:shapetype)">
                      <xsl:element name="span">
                        <xsl:attribute name="class" select="'InlineMath'"/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="imgnameid" select="o:OLEObject/@ProgID"/>
                      <!--<xsl:element name="img">
                        <xsl:attribute name="src">
                          <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                          <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                          <xsl:for-each
                            select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                            <xsl:variable name="imageName"
                              select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                            <xsl:value-of
                              select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                            />
                          </xsl:for-each>
                        </xsl:attribute>
                        <xsl:attribute name="alt" select="'image'"/>
                      </xsl:element>-->
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>

            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <!--<xsl:element name="img">
              <xsl:attribute name="src">
                <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                <xsl:for-each select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                  <xsl:variable name="imageName"
                    select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                  <xsl:value-of
                    select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                  />
                </xsl:for-each>
              </xsl:attribute>
              <xsl:attribute name="alt" select="'image'"/>
            </xsl:element>-->
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>
      <xsl:when test="descendant::v:shape">
        <xsl:choose>
          <xsl:when test="following-sibling::o:OLEObject/@ProgID">
            <xsl:variable name="imgnameid" select="following-sibling::o:OLEObject/@r:id"/>
            <!--<xsl:element name="img">
              <xsl:attribute name="src">
                <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                <xsl:for-each select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                  <xsl:variable name="imageName"
                    select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                  <xsl:value-of
                    select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                  />
                </xsl:for-each>
              </xsl:attribute>
              <xsl:attribute name="alt" select="'image'"/>
            </xsl:element>-->
          </xsl:when>
          <xsl:when test="not(preceding-sibling::v:shapetype)">
            <xsl:element name="span">
              <xsl:attribute name="class">
                <xsl:choose>
                  <xsl:when test="child::w:p">
                    <xsl:value-of select="'DisplayMath'"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'InlineMath'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:attribute>
              <xsl:variable name="imgnameid" select="descendant::o:OLEObject/@r:id"/>
              <xsl:choose>
                <xsl:when test="string-length($imgnameid) > 0">
                  <!--<xsl:element name="img">
                    <xsl:attribute name="src">
                      <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                      <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                      <xsl:for-each
                        select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                        <xsl:variable name="imageName"
                          select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                        <xsl:value-of
                          select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                        />
                      </xsl:for-each>
                    </xsl:attribute>
                    <xsl:attribute name="alt" select="'DisplayMath'"/>
                  </xsl:element>-->
                </xsl:when>
                <xsl:otherwise>
                  <xsl:choose>
                    <xsl:when test="following-sibling::o:OLEObject/@ProgID">
                      <xsl:variable name="imgnameid" select="following-sibling::o:OLEObject/@r:id"/>
                      <!--<xsl:element name="img">
                        <xsl:attribute name="src">
                          <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                          <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                          <xsl:for-each
                            select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                            <xsl:variable name="imageName"
                              select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                            <xsl:value-of
                              select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                            />
                          </xsl:for-each>
                        </xsl:attribute>
                        <xsl:attribute name="alt" select="'image'"/>
                      </xsl:element>-->
                    </xsl:when>
                    <xsl:when test="not(preceding-sibling::v:shapetype)">
                      <xsl:element name="span">
                        <xsl:attribute name="class" select="'InlineMath'"/>
                      </xsl:element>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:variable name="imgnameid" select="o:OLEObject/@ProgID"/>
                      <!--<xsl:element name="img">
                        <xsl:attribute name="src">
                          <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                          <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                          <xsl:for-each
                            select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                            <xsl:variable name="imageName"
                              select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                            <xsl:value-of
                              select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                            />
                          </xsl:for-each>
                        </xsl:attribute>
                        <xsl:attribute name="alt" select="'image'"/>
                      </xsl:element>-->
                    </xsl:otherwise>
                  </xsl:choose>
                </xsl:otherwise>
              </xsl:choose>

            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <xsl:variable name="imgnameid" select="o:OLEObject/@ProgID"/>
            <!--<xsl:element name="img">
              <xsl:attribute name="src">
                <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                <xsl:for-each select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                  <xsl:variable name="imageName"
                    select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                  <xsl:value-of
                    select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                  />
                </xsl:for-each>
              </xsl:attribute>
              <xsl:attribute name="alt" select="'image'"/>
            </xsl:element>-->
          </xsl:otherwise>
        </xsl:choose>
      </xsl:when>

      <xsl:otherwise>
        <xsl:apply-templates/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  <xsl:template match="v:formulasXXXXX">
    <xsl:element name="span">
      <xsl:attribute name="class" select="'DisplayMath'"/>
    </xsl:element>
  </xsl:template>
  <!--<w:object w:dxaOrig="10642" w:dyaOrig="9066">
    <v:shape id="对象 18" o:spid="_x0000_i1030" type="#_x0000_t75"
      style="width:340.5pt;height:228.75pt;mso-position-horizontal-relative:page;mso-position-vertical-relative:page"
      o:ole="">
      <v:imagedata r:id="rId26" o:title="" cropbottom="5334f" cropright="13598f"/>
      <o:lock v:ext="edit" aspectratio="f"/>
    </v:shape>
    <o:OLEObject Type="Embed" ProgID="Visio.Drawing.11" ShapeID="对象 18"
      DrawAspect="Content" ObjectID="_1529841803" r:id="rId27"/>
  </w:object>-->
  <!--<xsl:template match="//w:object">
    <xsl:variable name="imgnameid" select="o:OLEObject/@ProgID"/>
    <xsl:element name="img">      
      <xsl:attribute name="src">
        <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
        <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
        <xsl:for-each select="//Relationships/Relationship[@Id = $imgnameid]">
          <xsl:variable name="imageName" select="//Relationships/Relationship[@Id = $imgnameid]/@Target"/>
          <xsl:value-of select="concat('../images/',substring-after(//Relationships/Relationship[@Id = $imgnameid]/@Target,'/'))"/>
        </xsl:for-each>
      </xsl:attribute>
      <xsl:attribute name="alt" select="'image'"/>        
    </xsl:element> 
  </xsl:template>-->
  <xsl:template match="v:shape">
    <xsl:choose>
      <xsl:when test="following-sibling::o:OLEObject/@ProgID">
        <xsl:variable name="imgnameid" select="following-sibling::o:OLEObject/@r:id"/>
        <!--<xsl:element name="img">
          <xsl:attribute name="src">
            <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
            <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
            <xsl:for-each select="//Relationships/Relationship[@Id = $imgnameid]">
              <xsl:variable name="imageName"
                select="//Relationships/Relationship[@Id = $imgnameid]/@Target"/>
              <xsl:value-of
                select="concat('../images/', substring-after(//Relationships/Relationship[@Id = $imgnameid]/@Target, '/'))"
              />
            </xsl:for-each>
          </xsl:attribute>
          <xsl:attribute name="alt" select="'image'"/>
        </xsl:element>-->
      </xsl:when>
      <xsl:when test="not(preceding-sibling::v:shapetype)">
        <xsl:element name="span">
          <xsl:attribute name="class" select="'InlineMath'"/>
        </xsl:element>
      </xsl:when>
      <xsl:otherwise>
        <xsl:variable name="imgnameid" select="o:OLEObject/@ProgID"/>
        <!--<xsl:element name="img">
          <xsl:attribute name="src">
            <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
            <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
            <xsl:for-each select="//Relationships/Relationship[@Id = $imgnameid]">
              <xsl:variable name="imageName"
                select="//Relationships/Relationship[@Id = $imgnameid]/@Target"/>
              <xsl:value-of
                select="concat('../images/', substring-after(//Relationships/Relationship[@Id = $imgnameid]/@Target, '/'))"
              />
            </xsl:for-each>
          </xsl:attribute>
          <xsl:attribute name="alt" select="'image'"/>
        </xsl:element>-->
      </xsl:otherwise>
    </xsl:choose>
    <!--<xsl:if test="not(preceding-sibling::v:shapetype)">
      <xsl:element name="span">
        <xsl:attribute name="class" select="'InlineMath'"/>
      </xsl:element>
    </xsl:if>-->
  </xsl:template>
  <xsl:template match="w:p/m:oMathParaOLD">
    <xsl:element name="span">
      <xsl:attribute name="class" select="'DisplayMath'"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="w:p/m:oMathOLD">
    <xsl:element name="span">
      <xsl:attribute name="class" select="'InlineMath'"/>
    </xsl:element>
  </xsl:template>
  <xsl:template match="w:p/m:oMathPara">
    <!--<xsl:element name="span">
        <xsl:attribute name="class" select="'DisplayMath'"/>
      </xsl:element> -->
    <xsl:element name="span">
      <xsl:attribute name="class">
        <xsl:choose>
          <xsl:when test="child::w:p">
            <xsl:value-of select="'DisplayMath'"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="'InlineMath'"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:attribute>
      <xsl:variable name="imgnameid" select="descendant::o:OLEObject/@r:id"/>
      <xsl:choose>
        <xsl:when test="string-length($imgnameid) > 0">
          <!--<xsl:element name="img">
            <xsl:attribute name="src">
              <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
              <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
              <xsl:for-each select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                <xsl:variable name="imageName"
                  select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                <xsl:value-of
                  select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                />
              </xsl:for-each>
            </xsl:attribute>
            <xsl:attribute name="alt">
              <xsl:choose>
                <xsl:when test="child::w:p">
                  <xsl:value-of select="'DisplayMath'"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="'InlineMath'"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:attribute>
          </xsl:element>-->
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="following-sibling::o:OLEObject/@ProgID">
              <xsl:variable name="imgnameid" select="following-sibling::o:OLEObject/@r:id"/>
              <!--<xsl:element name="img">
                <xsl:attribute name="src">
                  <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                  <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                  <xsl:for-each select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                    <xsl:variable name="imageName"
                      select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                    <xsl:value-of
                      select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                    />
                  </xsl:for-each>
                </xsl:attribute>
                <xsl:attribute name="alt" select="'image'"/>
              </xsl:element>-->
            </xsl:when>
            <xsl:when test="not(preceding-sibling::v:shapetype)">
              <xsl:element name="span">
                <xsl:attribute name="class" select="'InlineMath'"/>
              </xsl:element>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="imgnameid" select="o:OLEObject/@ProgID"/>
              <!--<xsl:element name="img">
                <xsl:attribute name="src">
                  <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                  <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                  <xsl:for-each select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                    <xsl:variable name="imageName"
                      select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                    <xsl:value-of
                      select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                    />
                  </xsl:for-each>
                </xsl:attribute>
                <xsl:attribute name="alt" select="'image'"/>
              </xsl:element>-->
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="@* | node()"/>

    </xsl:element>
  </xsl:template>
  <xsl:template match="w:p/m:oMath">
    
    <!--<xsl:element name="span">
      <xsl:attribute name="class" select="'InlineMath'"/>
    </xsl:element>-->
    <xsl:element name="span">
      <xsl:attribute name="class">
        <xsl:choose>
          <xsl:when test="child::w:p">
            <xsl:value-of select="'DisplayMath'"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="'InlineMath'"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:attribute>
      <xsl:variable name="imgnameid" select="descendant::o:OLEObject/@r:id"/>
      <xsl:choose>
        <xsl:when test="string-length($imgnameid) > 0">
          <!--<xsl:element name="img">
            <xsl:attribute name="src">
              <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
              <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
              <xsl:for-each select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                <xsl:variable name="imageName"
                  select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                <xsl:value-of
                  select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                />
              </xsl:for-each>
            </xsl:attribute>
            <xsl:attribute name="alt">
              <xsl:choose>
                <xsl:when test="child::w:p">
                  <xsl:value-of select="'DisplayMath'"/>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:value-of select="'InlineMath'"/>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:attribute>
          </xsl:element>-->
        </xsl:when>
        <xsl:otherwise>
          <xsl:choose>
            <xsl:when test="following-sibling::o:OLEObject/@ProgID">
              <xsl:variable name="imgnameid" select="following-sibling::o:OLEObject/@r:id"/>
              <!--<xsl:element name="img">
                <xsl:attribute name="src">
                  <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                  <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                  <xsl:for-each select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                    <xsl:variable name="imageName"
                      select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                    <xsl:value-of
                      select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                    />
                  </xsl:for-each>
                </xsl:attribute>
                <xsl:attribute name="alt" select="'image'"/>
              </xsl:element>-->
            </xsl:when>
            <xsl:when test="not(preceding-sibling::v:shapetype)">
              <xsl:element name="span">
                <xsl:attribute name="class" select="'InlineMath'"/>
              </xsl:element>
            </xsl:when>
            <xsl:otherwise>
              <xsl:variable name="imgnameid" select="o:OLEObject/@ProgID"/>
              <!--<xsl:element name="img">
                <xsl:attribute name="src">
                  <!-\-13-11-15: commented below to take the actual image name. I'm merging document.xml.rels "Relationships" to document.xml-\->
                  <!-\-13-11-15: refer unzip.xml "\\10.1.1.1\Automation\WORD2XML\Word2HTML5\unzip.pl"-\->
                  <xsl:for-each select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]">
                    <xsl:variable name="imageName"
                      select="//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target"/>
                    <xsl:value-of
                      select="concat('../images/', substring-after(//rels:Relationships/rels:Relationship[@Id = $imgnameid]/@Target, '/'))"
                    />
                  </xsl:for-each>
                </xsl:attribute>
                <xsl:attribute name="alt" select="'image'"/>
              </xsl:element>-->
            </xsl:otherwise>
          </xsl:choose>
        </xsl:otherwise>
      </xsl:choose>
      <!--<xsl:apply-templates select="@* | node()"/>-->

    </xsl:element>
  </xsl:template>


  <!-- Baseon font family -->
  <xsl:template name="FName">
    <!--<xsl:for-each select="//w:style">-->
    <xsl:variable name="a" select="@w:styleId"/>
    <xsl:variable name="basedOn" select="w:basedOn/@w:val"/>
    <xsl:variable name="color" select="w:rPr/w:color/@w:val"/>
    <xsl:variable name="fontFamily">
      <xsl:choose>
        <xsl:when test="child::w:rPr/w:rFonts/@w:ascii">
          <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="w:rPr/w:rFonts/@w:asciiTheme"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="textVarient" select="w:rPr/w:smallCaps/@w:val"/>
    <xsl:variable name="textTrans" select="w:rPr/w:caps/@w:val"/>
    <xsl:variable name="fontWeight" select="w:rPr/w:b/@w:val"/>
    <xsl:variable name="fontStyle" select="w:rPr/w:i/@w:val"/>
    <xsl:variable name="underline" select="w:rPr/w:u/@w:val"/>
    <xsl:variable name="baseline" select="w:rPr/w:vertAlign/@w:val"/>
    <xsl:variable name="bSapce" select="w:pPr/w:spacing/@w:before"/>
    <xsl:variable name="aSapce" select="w:pPr/w:spacing/@w:after"/>
    <xsl:variable name="lineSpace" select="w:pPr/w:spacing/@w:line"/>
    <xsl:variable name="textAlign" select="w:pPr/w:jc/@w:val"/>

    <xsl:choose>
      <!-- FONT FAMILY -->
      <xsl:when test="./w:basedOn">
        <xsl:for-each select="//w:style">
          <xsl:if test="./@w:styleId = $basedOn">
            <xsl:choose>
              <!-- FONT FAMILY -->
              <xsl:when test="./w:rPr/w:rFonts/@w:ascii">
                <xsl:text>font-family:</xsl:text>
                <xsl:choose>
                  <xsl:when test="./w:rPr/w:rFonts/@w:ascii">
                    <xsl:value-of select="./w:rPr/w:rFonts/@w:ascii"/>
                  </xsl:when>
                  <xsl:when test="./w:rPr/w:rFonts/@w:cs">
                    <xsl:value-of select="./w:rPr/w:rFonts/@w:cs"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:call-template name="FName"/>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:text>, serif;</xsl:text>

              </xsl:when>
              <xsl:when test="./w:rPr/w:rFonts/@w:cs">
                <xsl:if test="string-length($fontFamily) > 0">
                  <xsl:text>font-family:</xsl:text>
                  <xsl:choose>
                    <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                      <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                    </xsl:when>
                    <xsl:when test="w:rPr/w:rFonts/@w:cs">
                      <xsl:value-of select="w:rPr/w:rFonts/@w:cs"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:call-template name="FName"/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:text>,serif;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="./w:rPr/w:rFonts/@w:hAnsi">
                <xsl:if test="string-length($fontFamily) > 0">
                  <xsl:text>font-family:</xsl:text>
                  <xsl:choose>
                    <xsl:when test="w:rPr/w:rFonts/@w:ascii">
                      <xsl:value-of select="w:rPr/w:rFonts/@w:ascii"/>
                    </xsl:when>
                    <xsl:when test="w:rPr/w:rFonts/@w:hAnsi">
                      <xsl:value-of select="w:rPr/w:rFonts/@w:hAnsi"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:call-template name="FName"/>
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:text>,serif;</xsl:text>
                </xsl:if>
              </xsl:when>
              <xsl:when test="./w:rPr/w:rFonts/@w:hAnsiTheme">
                <xsl:variable name="themeFont" select="w:rPr/w:rFonts/@w:asciiTheme"/>
                <xsl:text>font-family:</xsl:text>
                <xsl:choose>
                  <xsl:when test="contains($themeFont, 'major')">
                    <xsl:value-of select="//a:majorFont/a:latin/@typeface"/>
                  </xsl:when>
                  <xsl:when test="contains($themeFont, 'minor')">
                    <xsl:value-of select="//a:minorFont/a:latin/@typeface"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:call-template name="FName"/>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:text>;</xsl:text>
              </xsl:when>
              <xsl:otherwise>
                <xsl:call-template name="FName"/>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:if>
        </xsl:for-each>
      </xsl:when>
    </xsl:choose>
    <!--</xsl:for-each>-->
  </xsl:template>
  <!-- end of basedon font family -->

  <xsl:template match="o:FieldCodes"/>
  <!-- Refer mail frpm Prasanth subject "Unwanted text in math format" -->
</xsl:stylesheet>
